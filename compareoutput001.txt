

**********************************************************************************************
**********************************************************************************************
*                                                                                            *
*                          server listening on tcp://mdindoost:5555                          *
*                            arkouda server version = v2023.10.06                            *
*                              built with chapel version1.32.0                               *
*                                 memory limit = 14970345062                                 *
*                                  bytes of memory used = 0                                  *
*                                                                                            *
**********************************************************************************************
**********************************************************************************************


2023-12-04:14:53:31 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [], size = 0}
2023-12-04:14:53:31 [ServerDaemon] run Line 585 INFO [Chapel] >>> connect 
2023-12-04:14:53:31 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"connected to arkouda server tcp://*:5555", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:31 [ServerDaemon] run Line 685 INFO [Chapel] <<< connect took 0.00068593025207519531 sec
2023-12-04:14:53:31 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after connect command is 0% pct of max memory 14970345062
2023-12-04:14:53:31 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [], size = 0}
2023-12-04:14:53:31 [ServerDaemon] run Line 585 INFO [Chapel] >>> getconfig []
2023-12-04:14:53:31 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"{\"arkoudaVersion\":\"v2023.10.06\", \"chplVersion\":\"1.32.0\", \"ZMQVersion\":\"4.3.4\", \"HDF5Version\":\"1.12.2\", \"serverHostname\":\"mdindoost\", \"ServerPort\":5555, \"numLocales\":1, \"numPUs\":4, \"maxTaskPar\":4, \"physicalMemory\":16633716736, \"distributionType\":\"domain(1,int(64),one)\", \"LocaleConfigs\":[{\"id\":0, \"name\":\"mdindoost\", \"numPUs\":4, \"maxTaskPar\":4, \"physicalMemory\":16633716736}], \"authenticate\":false, \"logLevel\":\"INFO\", \"logChannel\":\"CONSOLE\", \"regexMaxCaptures\":20, \"byteorder\":\"little\", \"autoShutdown\":false, \"serverInfoNoSplash\":false}", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:31 [ServerDaemon] run Line 685 INFO [Chapel] <<< getconfig took 0.00060200691223144531 sec
2023-12-04:14:53:31 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after getconfig command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = seg_string, val = False, objType = VALUE, dtype = bool), (key = size, val = 210, objType = VALUE, dtype = int64)], size = 3}
2023-12-04:14:53:32 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:32 [ServerConfig] overMemLimit Line 315 INFO [Chapel] memory high watermark = 420 memory limit = 14970345062 projected pct memory used of 0%
2023-12-04:14:53:32 [ServerConfig] overMemLimit Line 315 INFO [Chapel] memory high watermark = 1680 memory limit = 14970345062 projected pct memory used of 0%
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_1 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0018529891967773438 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 210, objType = VALUE, dtype = int64), (key = seg_string, val = False, objType = VALUE, dtype = bool)], size = 3}
2023-12-04:14:53:32 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_2 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.00102996826171875 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = float64, objType = VALUE, dtype = str), (key = seg_string, val = False, objType = VALUE, dtype = bool)], size = 3}
2023-12-04:14:53:32 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_3 float64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0020608901977539062 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = keynames, val = ["id_EXswT9X_1", "id_EXswT9X_2"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_1\\\", \\\"id_EXswT9X_2\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-04:14:53:32 [ServerConfig] overMemLimit Line 315 INFO [Chapel] memory high watermark = 4200184 memory limit = 14970345062 projected pct memory used of 0%
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_5 int64 210 1 (210,) 8+created id_EXswT9X_6 int64 210 1 (210,) 8+created id_EXswT9X_7 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.031472921371459961 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_1, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_7, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_1\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_7\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_8 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0011079311370849609 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_2, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_7, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_2\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_7\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_9 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012390613555908203 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = append, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = names, val = ["id_EXswT9X_8", "id_EXswT9X_9"], objType = LIST, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"append\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_8\\\", \\\"id_EXswT9X_9\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_10 int64 420 1 (420,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0012540817260742188 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_EXswT9X_10"], objType = LIST, dtype = str), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_10\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-04:14:53:32 [ServerConfig] overMemLimit Line 315 INFO [Chapel] memory high watermark = 4206064 memory limit = 14970345062 projected pct memory used of 0%
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_12 int64 420 1 (420,) 8+created id_EXswT9X_13 int64 103 1 (103,) 8+created id_EXswT9X_14 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.015542030334472656 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_14, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_10, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_10\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_14\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_15 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0019550323486328125 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stop, val = 103, objType = VALUE, dtype = int64), (key = start, val = 0, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_16 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0020771026611328125 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = valName, val = id_EXswT9X_16, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = permName, val = id_EXswT9X_12, objType = VALUE, dtype = str), (key = size, val = 420, objType = VALUE, dtype = int64), (key = permute, val = True, objType = VALUE, dtype = bool), (key = segName, val = id_EXswT9X_13, objType = VALUE, dtype = str)], size = 6}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_12\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_13\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_16\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"420\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_17 int64 420 1 (420,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0022449493408203125 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = array, val = id_EXswT9X_17, objType = PDARRAY, dtype = int64), (key = stop, val = 210, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [slice] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_17\"}", "{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"210\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_18 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [slice] took 0.0019121170043945312 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [slice] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 210, objType = VALUE, dtype = int64), (key = array, val = id_EXswT9X_17, objType = PDARRAY, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = stop, val = 420, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [slice] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_17\"}", "{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"210\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"420\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_19 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [slice] took 0.0019268989562988281 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [slice] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 1, objType = VALUE, dtype = int64), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_EXswT9X_18"], objType = LIST, dtype = str), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = True, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_18\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_21 int64 210 1 (210,) 8+created id_EXswT9X_22 int64 82 1 (82,) 8+created id_EXswT9X_23 int64 82 1 (82,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0025720596313476562 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_18, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_23, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_18\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_23\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_24 int64 82 1 (82,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018069744110107422 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = segments, val = id_EXswT9X_22, objType = PDARRAY, dtype = int64), (key = size, val = 210, objType = VALUE, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> countReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_22\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"210\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_25 int64 82 1 (82,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< countReduction took 0.0089490413665771484 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after countReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 103, objType = VALUE, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_26 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0019459724426269531 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_26, objType = PDARRAY, dtype = int64), (key = val, val = 0, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 3}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> set ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_26\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"val\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"0\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"set id_EXswT9X_26 to 0", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< set took 0.015110969543457031 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after set command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_26, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_24, objType = PDARRAY, dtype = int64), (key = value, val = id_EXswT9X_25, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray]=pdarray ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_26\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_24\"}", "{\"key\": \"value\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_25\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"setPdarrayIndexToPdarrayMsg success", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray]=pdarray took 0.00173187255859375 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray]=pdarray command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_26, objType = PDARRAY, dtype = int64), (key = func, val = cumsum, objType = VALUE, dtype = str)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"cumsum\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_26\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_27 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc took 0.012906074523925781 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = seg_string, val = False, objType = VALUE, dtype = bool), (key = size, val = 1, objType = VALUE, dtype = int64)], size = 3}
2023-12-04:14:53:32 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_28 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0016858577728271484 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = mode, val = append, objType = VALUE, dtype = str), (key = names, val = ["id_EXswT9X_28", "id_EXswT9X_27"], objType = LIST, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"append\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_28\\\", \\\"id_EXswT9X_27\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_29 int64 104 1 (104,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.00215911865234375 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_27, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_27\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_27", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016319751739501953 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = AkArraySrc, val = id_EXswT9X_18, objType = PDARRAY, dtype = int64), (key = Directed, val = True, objType = VALUE, dtype = bool), (key = Weighted, val = False, objType = VALUE, dtype = bool), (key = AkArrayDst, val = id_EXswT9X_19, objType = PDARRAY, dtype = int64), (key = AkArraySeg, val = id_EXswT9X_29, objType = PDARRAY, dtype = int64), (key = NumVertices, val = 103, objType = VALUE, dtype = int64), (key = NumEdges, val = 210, objType = VALUE, dtype = int64), (key = AkArrayWeight, val = id_EXswT9X_3, objType = PDARRAY, dtype = float64), (key = AkArrayVmap, val = id_EXswT9X_15, objType = PDARRAY, dtype = int64)], size = 9}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> addEdgesFrom ["{\"key\": \"AkArraySrc\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_18\"}", "{\"key\": \"AkArrayDst\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_19\"}", "{\"key\": \"AkArraySeg\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_29\"}", "{\"key\": \"AkArrayWeight\", \"objType\": \"PDARRAY\", \"dtype\": \"float64\", \"val\": \"id_EXswT9X_3\"}", "{\"key\": \"AkArrayVmap\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_15\"}", "{\"key\": \"Directed\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"Weighted\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"NumVertices\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}", "{\"key\": \"NumEdges\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"210\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"id_EXswT9X_30", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< addEdgesFrom took 0.0084590911865234375 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after addEdgesFrom command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_9, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_9\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_9", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016360282897949219 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_8, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_8\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015151500701904297 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_5, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_5\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_5", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016310214996337891 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_6, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_6\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_6", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014939308166503906 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_7, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_7\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_7", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015270709991455078 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_17, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_17\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_17", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014469623565673828 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_10, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_10\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_10", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012869834899902344 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_12, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_12\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_12", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012869834899902344 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_13, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_13\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_13", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016620159149169922 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_14, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_14\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_14", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016469955444335938 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_16, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_16\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_16", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012149810791015625 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_21, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_21\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_21", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011579990386962891 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_22, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_22\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_22", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00095200538635253906 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_23, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_23\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_23", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012090206146240234 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_24, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_24\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_24", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010840892791748047 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_25, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_25\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_25", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00090503692626953125 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_26, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_26\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_26", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00060987472534179688 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_28, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_28\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_28", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00069308280944824219 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_18, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_18\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_18", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010290145874023438 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_19, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_19\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_19", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010170936584472656 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_29, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_29\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_29", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00096797943115234375 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_3, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_3\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_3", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010170936584472656 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_15, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_15\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_15", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.000988006591796875 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_2, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_2\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_2", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00098514556884765625 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_1, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_1\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00089812278747558594 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = seg_string, val = False, objType = VALUE, dtype = bool), (key = size, val = 107, objType = VALUE, dtype = int64)], size = 3}
2023-12-04:14:53:32 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_31 int64 107 1 (107,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0012459754943847656 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = seg_string, val = True, objType = VALUE, dtype = bool), (key = size, val = 749, objType = VALUE, dtype = int64), (key = dtype, val = uint8, objType = VALUE, dtype = str)], size = 3}
2023-12-04:14:53:32 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_33 int64 107 1 (107,) 8+created id_EXswT9X_32 uint8 749 1 (749,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0012900829315185547 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = offsets, val = id_EXswT9X_33, objType = PDARRAY, dtype = int64), (key = values, val = id_EXswT9X_32, objType = PDARRAY, dtype = uint8)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> segStr-assemble ["{\"key\": \"offsets\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_33\"}", "{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"uint8\", \"val\": \"id_EXswT9X_32\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_34 str 107 1 (107,) 1+created bytes.size 749", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< segStr-assemble took 0.0010130405426025391 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segStr-assemble command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_33, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_33\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_33", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00099205970764160156 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_32, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_32\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_32", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00090503692626953125 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stride, val = 1, objType = VALUE, dtype = int64), (key = start, val = 0, objType = VALUE, dtype = int64), (key = stop, val = 107, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"107\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_35 int64 107 1 (107,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0011470317840576172 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 210, objType = VALUE, dtype = int64), (key = seg_string, val = False, objType = VALUE, dtype = bool)], size = 3}
2023-12-04:14:53:32 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_36 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0011739730834960938 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 210, objType = VALUE, dtype = int64), (key = seg_string, val = False, objType = VALUE, dtype = bool), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 3}
2023-12-04:14:53:32 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_37 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0011060237884521484 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = seg_string, val = True, objType = VALUE, dtype = bool), (key = size, val = 630, objType = VALUE, dtype = int64), (key = dtype, val = uint8, objType = VALUE, dtype = str)], size = 3}
2023-12-04:14:53:32 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_39 int64 210 1 (210,) 8+created id_EXswT9X_38 uint8 630 1 (630,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.00092101097106933594 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = offsets, val = id_EXswT9X_39, objType = PDARRAY, dtype = int64), (key = values, val = id_EXswT9X_38, objType = PDARRAY, dtype = uint8)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> segStr-assemble ["{\"key\": \"offsets\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_39\"}", "{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"uint8\", \"val\": \"id_EXswT9X_38\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_40 str 210 1 (210,) 1+created bytes.size 630", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< segStr-assemble took 0.00091600418090820312 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segStr-assemble command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_39, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_39\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_39", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00090098381042480469 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_38, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_38\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_38", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00083804130554199219 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stride, val = 1, objType = VALUE, dtype = int64), (key = start, val = 0, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 210, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"210\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_41 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0011560916900634766 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["Strings"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool), (key = keynames, val = ["id_EXswT9X_34"], objType = LIST, dtype = str)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_34\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"Strings\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_44 int64 107 1 (107,) 8+created id_EXswT9X_45 int64 1 1 (1,) 8+created id_EXswT9X_46 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0018100738525390625 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = subcmd, val = pdarrayIndex, objType = VALUE, dtype = str), (key = key, val = id_EXswT9X_46, objType = PDARRAY, dtype = int64), (key = obj, val = id_EXswT9X_34, objType = PDARRAY, dtype = <U0), (key = objType, val = Strings, objType = VALUE, dtype = str), (key = dtype, val = <U0, objType = VALUE, dtype = <class 'numpy.dtype[str_]'>)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedIndex ["{\"key\": \"subcmd\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarrayIndex\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"Strings\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"<class 'numpy.dtype[str_]'>\", \"val\": \"<U0\"}", "{\"key\": \"obj\", \"objType\": \"PDARRAY\", \"dtype\": \"<U0\", \"val\": \"id_EXswT9X_34\"}", "{\"key\": \"key\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_46\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_47 str 1 1 (1,) 1+created bytes.size 7", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedIndex took 0.0013060569763183594 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedIndex command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_48 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0012540817260742188 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = permName, val = id_EXswT9X_44, objType = VALUE, dtype = str), (key = valName, val = id_EXswT9X_48, objType = VALUE, dtype = str), (key = size, val = 107, objType = VALUE, dtype = int64), (key = permute, val = True, objType = VALUE, dtype = bool), (key = segName, val = id_EXswT9X_45, objType = VALUE, dtype = str)], size = 6}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_44\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_45\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_48\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"107\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_49 int64 107 1 (107,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0014860630035400391 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_EXswT9X_30, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> nodes ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_30\"}"]
2023-12-04:14:53:32 [GraphInfoMsg] nodesMsg Line 102 DEBUG [Chapel] Extracting nodes takes 9.6e-05
2023-12-04:14:53:32 [GraphInfoMsg] nodesMsg Line 103 DEBUG [Chapel] created id_EXswT9X_50 int64 103 1 (103,) 8+ 
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_50 int64 103 1 (103,) 8+ ", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< nodes took 0.0012209415435791016 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after nodes command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = pda1, val = id_EXswT9X_31, objType = PDARRAY, dtype = int64), (key = invert, val = False, objType = VALUE, dtype = bool), (key = pda2, val = id_EXswT9X_50, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> in1d ["{\"key\": \"pda1\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_31\"}", "{\"key\": \"pda2\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_50\"}", "{\"key\": \"invert\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_51 bool 107 1 (107,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< in1d took 0.0012409687042236328 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after in1d command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_31, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_51, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_31\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_51\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_52 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012018680572509766 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_49, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_51, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_49\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_51\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_53 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012700557708740234 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_49, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_49\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_49", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00095701217651367188 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = mode, val = interleave, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = names, val = ["id_EXswT9X_50", "id_EXswT9X_52"], objType = LIST, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_50\\\", \\\"id_EXswT9X_52\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_54 int64 206 1 (206,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0013470649719238281 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = start, val = 0, objType = VALUE, dtype = int64), (key = stop, val = 103, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_55 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0010409355163574219 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 103, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 206, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"206\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_56 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0011489391326904297 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_EXswT9X_55", "id_EXswT9X_56"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_55\\\", \\\"id_EXswT9X_56\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_57 int64 206 1 (206,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0015239715576171875 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_56, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_56\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_56", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00093197822570800781 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_55, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_55\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_55", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00093793869018554688 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = keynames, val = ["id_EXswT9X_54"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_54\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_59 int64 206 1 (206,) 8+created id_EXswT9X_60 int64 103 1 (103,) 8+created id_EXswT9X_61 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.014835119247436523 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_54, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_61, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_54\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_61\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_62 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.00098896026611328125 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = value, val = 103, objType = VALUE, dtype = int64), (key = a, val = id_EXswT9X_57, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = <, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"<\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_57\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_63 bool 206 1 (206,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0020439624786376953 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_63, objType = PDARRAY, dtype = bool), (key = idx, val = id_EXswT9X_59, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_63\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_59\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_64 bool 206 1 (206,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018589496612548828 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = values, val = id_EXswT9X_64, objType = PDARRAY, dtype = bool), (key = op, val = sum, objType = VALUE, dtype = str), (key = segments, val = id_EXswT9X_60, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_64\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_60\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"sum\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_65 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0020990371704101562 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_64, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_64\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_64", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010850429534912109 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_63, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_63\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_63", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00095987319946289062 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >, objType = VALUE, dtype = str), (key = value, val = 1, objType = VALUE, dtype = int64), (key = a, val = id_EXswT9X_65, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_65\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_66 bool 103 1 (103,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0012710094451904297 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = any, objType = VALUE, dtype = str), (key = array, val = id_EXswT9X_66, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> reduction ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"any\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_66\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"bool False", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< reduction took 0.0010499954223632812 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after reduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_66, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_66\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_66", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00094199180603027344 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_59, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_57, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_57\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_59\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_67 int64 206 1 (206,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0010919570922851562 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = ddof, val = 1, objType = VALUE, dtype = int64), (key = values, val = id_EXswT9X_67, objType = PDARRAY, dtype = int64), (key = op, val = min, objType = VALUE, dtype = str), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = segments, val = id_EXswT9X_60, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_67\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_60\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"min\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_68 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0013740062713623047 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_67, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_67\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_67", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00093102455139160156 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >=, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_68, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = value, val = 103, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_68\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_69 bool 103 1 (103,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0018830299377441406 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = func, val = where, objType = VALUE, dtype = str), (key = scalar, val = -1, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = b, val = id_EXswT9X_68, objType = PDARRAY, dtype = int64), (key = condition, val = id_EXswT9X_69, objType = PDARRAY, dtype = bool)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc3sv ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"where\"}", "{\"key\": \"condition\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_69\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"scalar\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"-1\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_68\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_70 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc3sv took 0.0013010501861572266 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc3sv command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_69, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_69\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_69", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00096487998962402344 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_68, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_68\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_68", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00094699859619140625 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_EXswT9X_59, objType = VALUE, dtype = str), (key = size, val = 206, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = valName, val = id_EXswT9X_70, objType = VALUE, dtype = str), (key = segName, val = id_EXswT9X_60, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_59\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_60\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_70\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"206\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_71 int64 206 1 (206,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0015239715576171875 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >=, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_57, objType = PDARRAY, dtype = int64), (key = value, val = 103, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_57\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_72 bool 206 1 (206,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0012948513031005859 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_71, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_72, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_71\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_72\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_73 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0011839866638183594 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_72, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_72\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_72", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00097203254699707031 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_57, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_57\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_57", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00089502334594726562 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_54, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_54\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_54", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010809898376464844 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_62, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_62\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_62", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00088596343994140625 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_59, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_59\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_59", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00089097023010253906 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_60, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_60\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_60", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00091600418090820312 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_61, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_61\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_61", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00092315673828125 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_65, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_65\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_65", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0009250640869140625 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_70, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_70\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_70", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00092101097106933594 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_71, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_71\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_71", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00099205970764160156 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_52, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_52\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_52", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010800361633300781 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool), (key = keynames, val = ["id_EXswT9X_73", "id_EXswT9X_53"], objType = LIST, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_73\\\", \\\"id_EXswT9X_53\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_75 int64 103 1 (103,) 8+created id_EXswT9X_76 int64 103 1 (103,) 8+created id_EXswT9X_77 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0060620307922363281 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_73, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_77, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_73\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_77\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_78 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0013139247894287109 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_53, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_77, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_53\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_77\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_79 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012519359588623047 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_EXswT9X_30, objType = VALUE, dtype = str), (key = Arrays, val = id_EXswT9X_78 id_EXswT9X_79 id_EXswT9X_47, objType = VALUE, dtype = str)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> addNodeLabels ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_30\"}", "{\"key\": \"Arrays\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_78 id_EXswT9X_79 id_EXswT9X_47\"}"]
2023-12-04:14:53:32 [DipSLLPropertyGraphMsg] addNodeLabelsMsg Line 107 DEBUG [Chapel] DipSLLaddNodeLabels took 4.9e-05 sec 
2023-12-04:14:53:32 [DipSLLPropertyGraphMsg] addNodeLabelsMsg Line 108 DEBUG [Chapel] labels added
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"labels added", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< addNodeLabels took 0.0015769004821777344 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after addNodeLabels command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_44, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_44\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_44", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010349750518798828 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_45, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_45\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_45", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011639595031738281 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_46, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_46\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_46", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014719963073730469 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_48, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_48\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_48", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012240409851074219 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_47, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_47\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_47", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010499954223632812 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_50, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_50\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_50", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011000633239746094 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_51, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_51\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_51", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011389255523681641 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_53, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_53\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_53", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011241436004638672 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_73, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_73\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_73", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011210441589355469 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_79, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_79\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_79", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0013339519500732422 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_78, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_78\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_78", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014100074768066406 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_75, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_75\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_75", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001399993896484375 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_76, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_76\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_76", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011830329895019531 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_77, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_77\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_77", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00091695785522460938 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_EXswT9X_40"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = keytypes, val = ["Strings"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_40\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"Strings\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_82 int64 210 1 (210,) 8+created id_EXswT9X_83 int64 1 1 (1,) 8+created id_EXswT9X_84 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0019631385803222656 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = subcmd, val = pdarrayIndex, objType = VALUE, dtype = str), (key = obj, val = id_EXswT9X_40, objType = PDARRAY, dtype = <U0), (key = key, val = id_EXswT9X_84, objType = PDARRAY, dtype = int64), (key = dtype, val = <U0, objType = VALUE, dtype = <class 'numpy.dtype[str_]'>), (key = objType, val = Strings, objType = VALUE, dtype = str)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedIndex ["{\"key\": \"subcmd\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarrayIndex\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"Strings\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"<class 'numpy.dtype[str_]'>\", \"val\": \"<U0\"}", "{\"key\": \"obj\", \"objType\": \"PDARRAY\", \"dtype\": \"<U0\", \"val\": \"id_EXswT9X_40\"}", "{\"key\": \"key\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_84\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_85 str 1 1 (1,) 1+created bytes.size 3", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedIndex took 0.0011649131774902344 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedIndex command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_86 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.00095200538635253906 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_EXswT9X_82, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = size, val = 210, objType = VALUE, dtype = int64), (key = valName, val = id_EXswT9X_86, objType = VALUE, dtype = str), (key = segName, val = id_EXswT9X_83, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_82\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_83\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_86\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"210\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_87 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0014019012451171875 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_EXswT9X_30, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> nodes ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_30\"}"]
2023-12-04:14:53:32 [GraphInfoMsg] nodesMsg Line 102 DEBUG [Chapel] Extracting nodes takes 8.2e-05
2023-12-04:14:53:32 [GraphInfoMsg] nodesMsg Line 103 DEBUG [Chapel] created id_EXswT9X_88 int64 103 1 (103,) 8+ 
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_88 int64 103 1 (103,) 8+ ", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< nodes took 0.0012609958648681641 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after nodes command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = names, val = ["id_EXswT9X_88", "id_EXswT9X_36"], objType = LIST, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_88\\\", \\\"id_EXswT9X_36\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_89 int64 313 1 (313,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0016491413116455078 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 103, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_90 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0010819435119628906 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 103, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 313, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"313\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_91 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.00092792510986328125 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = names, val = ["id_EXswT9X_90", "id_EXswT9X_91"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_90\\\", \\\"id_EXswT9X_91\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_92 int64 313 1 (313,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0012140274047851562 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_91, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_91\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_91", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00087594985961914062 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_90, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_90\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_90", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011739730834960938 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keynames, val = ["id_EXswT9X_89"], objType = LIST, dtype = str), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_89\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_94 int64 313 1 (313,) 8+created id_EXswT9X_95 int64 103 1 (103,) 8+created id_EXswT9X_96 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.016927003860473633 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_96, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_89, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_89\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_96\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_97 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018930435180664062 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_EXswT9X_92, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = <, objType = VALUE, dtype = str), (key = value, val = 103, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"<\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_92\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_98 bool 313 1 (313,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0018129348754882812 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_94, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_98, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_98\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_94\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_99 bool 313 1 (313,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018761157989501953 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = sum, objType = VALUE, dtype = str), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = values, val = id_EXswT9X_99, objType = PDARRAY, dtype = bool), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = segments, val = id_EXswT9X_95, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_99\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_95\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"sum\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_100 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0019669532775878906 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_99, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_99\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_99", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00162506103515625 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_98, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_98\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_98", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015230178833007812 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_EXswT9X_100, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = >, objType = VALUE, dtype = str), (key = value, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_100\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_101 bool 103 1 (103,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0018990039825439453 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_101, objType = PDARRAY, dtype = bool), (key = op, val = any, objType = VALUE, dtype = str)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> reduction ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"any\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_101\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"bool False", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< reduction took 0.0016880035400390625 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after reduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_101, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_101\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_101", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014719963073730469 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_94, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_92, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_92\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_94\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_102 int64 313 1 (313,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018620491027832031 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_EXswT9X_102, objType = PDARRAY, dtype = int64), (key = op, val = min, objType = VALUE, dtype = str), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = segments, val = id_EXswT9X_95, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_102\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_95\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"min\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_103 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0020430088043212891 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_102, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_102\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_102", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00156402587890625 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_EXswT9X_103, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = >=, objType = VALUE, dtype = str), (key = value, val = 103, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_103\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_104 bool 103 1 (103,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0018849372863769531 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = scalar, val = -1, objType = VALUE, dtype = str), (key = func, val = where, objType = VALUE, dtype = str), (key = b, val = id_EXswT9X_103, objType = PDARRAY, dtype = int64), (key = condition, val = id_EXswT9X_104, objType = PDARRAY, dtype = bool)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc3sv ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"where\"}", "{\"key\": \"condition\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_104\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"scalar\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"-1\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_103\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_105 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc3sv took 0.0020079612731933594 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc3sv command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_104, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_104\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_104", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00164794921875 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_103, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_103\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_103", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015330314636230469 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = valName, val = id_EXswT9X_105, objType = VALUE, dtype = str), (key = permName, val = id_EXswT9X_94, objType = VALUE, dtype = str), (key = size, val = 313, objType = VALUE, dtype = int64), (key = permute, val = True, objType = VALUE, dtype = bool), (key = segName, val = id_EXswT9X_95, objType = VALUE, dtype = str)], size = 6}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_94\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_95\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_105\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"313\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_106 int64 313 1 (313,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0021240711212158203 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_EXswT9X_92, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = >=, objType = VALUE, dtype = str), (key = value, val = 103, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_92\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_107 bool 313 1 (313,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0018589496612548828 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_107, objType = PDARRAY, dtype = bool), (key = array, val = id_EXswT9X_106, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_106\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_107\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_108 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018451213836669922 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_107, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_107\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_107", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016338825225830078 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_92, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_92\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_92", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016269683837890625 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_89, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_89\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_89", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016028881072998047 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_97, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_97\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_97", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015618801116943359 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_94, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_94\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_94", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016191005706787109 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_95, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_95\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_95", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014920234680175781 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_96, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_96\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_96", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010139942169189453 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_100, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_100\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_100", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011010169982910156 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_105, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_105\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_105", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010819435119628906 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_106, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_106\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_106", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011861324310302734 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = mode, val = interleave, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_EXswT9X_88", "id_EXswT9X_37"], objType = LIST, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_88\\\", \\\"id_EXswT9X_37\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_109 int64 313 1 (313,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.007965087890625 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stop, val = 103, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = start, val = 0, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_110 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.00189208984375 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stop, val = 313, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = start, val = 103, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"313\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_111 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0018091201782226562 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_EXswT9X_110", "id_EXswT9X_111"], objType = LIST, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_110\\\", \\\"id_EXswT9X_111\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_112 int64 313 1 (313,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0020048618316650391 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_111, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_111\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_111", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015311241149902344 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_110, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_110\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_110", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014901161193847656 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 1, objType = VALUE, dtype = int64), (key = keynames, val = ["id_EXswT9X_109"], objType = LIST, dtype = str), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_109\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_114 int64 313 1 (313,) 8+created id_EXswT9X_115 int64 103 1 (103,) 8+created id_EXswT9X_116 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.016881942749023438 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_116, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_109, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_109\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_116\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_117 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.00179290771484375 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = <, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_112, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = value, val = 103, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"<\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_112\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_118 bool 313 1 (313,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0019130706787109375 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_114, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_118, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_118\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_114\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_119 bool 313 1 (313,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0017688274383544922 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = sum, objType = VALUE, dtype = str), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = values, val = id_EXswT9X_119, objType = PDARRAY, dtype = bool), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = segments, val = id_EXswT9X_115, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_119\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_115\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"sum\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_120 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0019469261169433594 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_119, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_119\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_119", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014579296112060547 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_118, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_118\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_118", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014019012451171875 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_120, objType = PDARRAY, dtype = int64), (key = op, val = >, objType = VALUE, dtype = str), (key = value, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_120\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_121 bool 103 1 (103,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0017309188842773438 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_121, objType = PDARRAY, dtype = bool), (key = op, val = any, objType = VALUE, dtype = str)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> reduction ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"any\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_121\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"bool False", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< reduction took 0.0016329288482666016 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after reduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_121, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_121\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_121", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016200542449951172 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_114, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_112, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_112\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_114\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_122 int64 313 1 (313,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.001834869384765625 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = min, objType = VALUE, dtype = str), (key = values, val = id_EXswT9X_122, objType = PDARRAY, dtype = int64), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = segments, val = id_EXswT9X_115, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_122\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_115\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"min\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_123 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0021479129791259766 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_122, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_122\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_122", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015749931335449219 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_EXswT9X_123, objType = PDARRAY, dtype = int64), (key = op, val = >=, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = value, val = 103, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_123\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_124 bool 103 1 (103,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0017490386962890625 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = scalar, val = -1, objType = VALUE, dtype = str), (key = func, val = where, objType = VALUE, dtype = str), (key = b, val = id_EXswT9X_123, objType = PDARRAY, dtype = int64), (key = condition, val = id_EXswT9X_124, objType = PDARRAY, dtype = bool)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc3sv ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"where\"}", "{\"key\": \"condition\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_124\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"scalar\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"-1\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_123\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_125 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc3sv took 0.0018410682678222656 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc3sv command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_124, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_124\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_124", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015280246734619141 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_123, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_123\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_123", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016310214996337891 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = valName, val = id_EXswT9X_125, objType = VALUE, dtype = str), (key = permName, val = id_EXswT9X_114, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = size, val = 313, objType = VALUE, dtype = int64), (key = permute, val = True, objType = VALUE, dtype = bool), (key = segName, val = id_EXswT9X_115, objType = VALUE, dtype = str)], size = 6}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_114\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_115\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_125\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"313\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_126 int64 313 1 (313,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0021998882293701172 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >=, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_112, objType = PDARRAY, dtype = int64), (key = value, val = 103, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_112\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_127 bool 313 1 (313,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0018789768218994141 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_126, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_127, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_126\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_127\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_128 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018029212951660156 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_127, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_127\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_127", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015509128570556641 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_112, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_112\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_112", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015490055084228516 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_109, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_109\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_109", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015461444854736328 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_117, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_117\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_117", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014789104461669922 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_114, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_114\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_114", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016200542449951172 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_115, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_115\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_115", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015389919281005859 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_116, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_116\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_116", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00162506103515625 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_120, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_120\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_120", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016720294952392578 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_125, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_125\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_125", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016429424285888672 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_126, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_126\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_126", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016570091247558594 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_EXswT9X_30, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> edges ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_30\"}"]
2023-12-04:14:53:32 [GraphInfoMsg] edgesMsg Line 65 DEBUG [Chapel] Extracting edges takes 0.000151
2023-12-04:14:53:32 [GraphInfoMsg] edgesMsg Line 66 DEBUG [Chapel] created id_EXswT9X_129 int64 210 1 (210,) 8+ created id_EXswT9X_130 int64 210 1 (210,) 8
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_129 int64 210 1 (210,) 8+ created id_EXswT9X_130 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< edges took 0.0024600028991699219 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after edges command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool), (key = keynames, val = ["id_EXswT9X_108", "id_EXswT9X_128"], objType = LIST, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_108\\\", \\\"id_EXswT9X_128\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_132 int64 210 1 (210,) 8+created id_EXswT9X_133 int64 210 1 (210,) 8+created id_EXswT9X_134 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.031326055526733398 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_108, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_134, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_108\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_134\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_135 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0017731189727783203 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_128, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_134, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_128\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_134\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_136 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0017769336700439453 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = keynames, val = ["id_EXswT9X_129", "id_EXswT9X_130"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_129\\\", \\\"id_EXswT9X_130\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_138 int64 210 1 (210,) 8+created id_EXswT9X_139 int64 210 1 (210,) 8+created id_EXswT9X_140 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0025548934936523438 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_129, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_140, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_129\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_140\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_141 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0017411708831787109 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_130, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_140, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_130\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_140\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_142 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0017070770263671875 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 210, objType = VALUE, dtype = int64), (key = dtype, val = bool, objType = VALUE, dtype = str)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"bool\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"210\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_143 bool 210 1 (210,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0016000270843505859 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = bool, objType = VALUE, dtype = str), (key = val, val = True, objType = VALUE, dtype = str), (key = array, val = id_EXswT9X_143, objType = PDARRAY, dtype = bool)], size = 3}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> set ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_143\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"bool\"}", "{\"key\": \"val\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"True\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"set id_EXswT9X_143 to true", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< set took 0.0023999214172363281 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after set command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 210, objType = VALUE, dtype = int64), (key = dtype, val = bool, objType = VALUE, dtype = str)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"bool\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"210\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_144 bool 210 1 (210,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0017490386962890625 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_EXswT9X_143", "id_EXswT9X_144"], objType = LIST, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_143\\\", \\\"id_EXswT9X_144\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_145 bool 420 1 (420,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0027780532836914062 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_144, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_144\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_144", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0019218921661376953 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_143, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_143\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_143", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0022890567779541016 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_EXswT9X_135", "id_EXswT9X_141"], objType = LIST, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_135\\\", \\\"id_EXswT9X_141\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_146 int64 420 1 (420,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0030980110168457031 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_EXswT9X_136", "id_EXswT9X_142"], objType = LIST, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_136\\\", \\\"id_EXswT9X_142\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_147 int64 420 1 (420,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0034239292144775391 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = keynames, val = ["id_EXswT9X_146", "id_EXswT9X_147"], objType = LIST, dtype = str), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_146\\\", \\\"id_EXswT9X_147\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_149 int64 420 1 (420,) 8+created id_EXswT9X_150 int64 210 1 (210,) 8+created id_EXswT9X_151 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.031390905380249023 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_151, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_146, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_146\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_151\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_152 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0025539398193359375 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_151, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_147, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_147\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_151\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_153 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0023620128631591797 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 420, objType = VALUE, dtype = int64), (key = segments, val = id_EXswT9X_150, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> countReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_150\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"420\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_154 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< countReduction took 0.0024340152740478516 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after countReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_EXswT9X_154, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = ==, objType = VALUE, dtype = str), (key = value, val = 2, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"==\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_154\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_155 bool 210 1 (210,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0029900074005126953 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = valName, val = id_EXswT9X_155, objType = VALUE, dtype = str), (key = permName, val = id_EXswT9X_149, objType = VALUE, dtype = str), (key = size, val = 420, objType = VALUE, dtype = int64), (key = permute, val = True, objType = VALUE, dtype = bool), (key = segName, val = id_EXswT9X_150, objType = VALUE, dtype = str)], size = 6}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_149\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_150\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_155\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"420\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_156 bool 420 1 (420,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0027780532836914062 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_155, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_155\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_155", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0023040771484375 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_145, objType = PDARRAY, dtype = bool), (key = array, val = id_EXswT9X_156, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_156\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_145\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_157 bool 210 1 (210,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0030260086059570312 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = valName, val = id_EXswT9X_157, objType = VALUE, dtype = str), (key = permName, val = id_EXswT9X_132, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = size, val = 210, objType = VALUE, dtype = int64), (key = permute, val = True, objType = VALUE, dtype = bool), (key = segName, val = id_EXswT9X_133, objType = VALUE, dtype = str)], size = 6}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_132\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_133\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_157\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"210\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_158 bool 210 1 (210,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0028009414672851562 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_157, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_157\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_157", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0019450187683105469 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_132, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_132\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_132", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0019400119781494141 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_133, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_133\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_133", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0018670558929443359 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_134, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_134\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_134", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0018310546875 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_136, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_136\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_136", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0018770694732666016 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_135, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_135\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_135", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011260509490966797 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_138, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_138\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_138", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011680126190185547 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_139, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_139\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_139", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011949539184570312 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_140, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_140\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_140", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011899471282958984 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_142, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_142\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_142", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010550022125244141 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_141, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_141\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_141", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011069774627685547 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_145, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_145\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_145", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00109100341796875 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_147, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_147\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_147", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011019706726074219 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_146, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_146\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_146", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010850429534912109 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_149, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_149\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_149", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010640621185302734 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_150, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_150\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_150", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010230541229248047 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_151, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_151\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_151", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00099706649780273438 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_153, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_153\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_153", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010290145874023438 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_152, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_152\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_152", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012340545654296875 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_154, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_154\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_154", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011110305786132812 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_156, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_156\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_156", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010550022125244141 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_108, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_158, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_108\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_158\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_159 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0013930797576904297 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_108, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_108\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_108", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010530948638916016 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_158, objType = PDARRAY, dtype = bool), (key = array, val = id_EXswT9X_128, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_128\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_158\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_160 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012528896331787109 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_128, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_128\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_128", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001049041748046875 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_158, objType = PDARRAY, dtype = bool), (key = array, val = id_EXswT9X_87, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_87\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_158\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_161 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012569427490234375 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_87, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_87\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_87", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010390281677246094 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keytypes, val = ["pdarray", "pdarray", "pdarray"], objType = LIST, dtype = str), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = nstr, val = 3, objType = VALUE, dtype = int64), (key = keynames, val = ["id_EXswT9X_159", "id_EXswT9X_160", "id_EXswT9X_161"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"3\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_159\\\", \\\"id_EXswT9X_160\\\", \\\"id_EXswT9X_161\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_163 int64 210 1 (210,) 8+created id_EXswT9X_164 int64 210 1 (210,) 8+created id_EXswT9X_165 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.027968883514404297 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_165, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_159, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_159\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_165\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_166 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0017900466918945312 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_165, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_160, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_160\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_165\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_167 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0016970634460449219 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_165, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_161, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_161\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_165\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_168 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0016770362854003906 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_EXswT9X_129", "id_EXswT9X_166"], objType = LIST, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_129\\\", \\\"id_EXswT9X_166\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_169 int64 420 1 (420,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0021049976348876953 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = names, val = ["id_EXswT9X_130", "id_EXswT9X_167"], objType = LIST, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_130\\\", \\\"id_EXswT9X_167\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_170 int64 420 1 (420,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0021829605102539062 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = stop, val = 210, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"210\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_171 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0018489360809326172 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = start, val = 210, objType = VALUE, dtype = int64), (key = stop, val = 420, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"210\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"420\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_172 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0018029212951660156 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = names, val = ["id_EXswT9X_171", "id_EXswT9X_172"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_171\\\", \\\"id_EXswT9X_172\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_173 int64 420 1 (420,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0021049976348876953 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_172, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_172\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_172", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015389919281005859 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_171, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_171\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_171", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015799999237060547 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_EXswT9X_169", "id_EXswT9X_170"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_169\\\", \\\"id_EXswT9X_170\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_175 int64 420 1 (420,) 8+created id_EXswT9X_176 int64 210 1 (210,) 8+created id_EXswT9X_177 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.028330087661743164 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_177, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_169, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_169\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_177\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_178 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018429756164550781 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_177, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_170, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_170\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_177\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_179 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0016870498657226562 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_EXswT9X_173, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = <, objType = VALUE, dtype = str), (key = value, val = 210, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"<\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_173\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"210\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_180 bool 420 1 (420,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0017619132995605469 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_180, objType = PDARRAY, dtype = bool), (key = idx, val = id_EXswT9X_175, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_180\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_175\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_181 bool 420 1 (420,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0013329982757568359 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = op, val = sum, objType = VALUE, dtype = str), (key = values, val = id_EXswT9X_181, objType = PDARRAY, dtype = bool), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = segments, val = id_EXswT9X_176, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_181\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_176\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"sum\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_182 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0015799999237060547 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_181, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_181\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_181", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00083994865417480469 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_180, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_180\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_180", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012269020080566406 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_182, objType = PDARRAY, dtype = int64), (key = value, val = 1, objType = VALUE, dtype = int64), (key = op, val = >, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_182\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_183 bool 210 1 (210,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.010371923446655273 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = any, objType = VALUE, dtype = str), (key = array, val = id_EXswT9X_183, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> reduction ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"any\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_183\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"bool False", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< reduction took 0.0017359256744384766 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after reduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_183, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_183\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_183", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016469955444335938 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_173, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_175, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_173\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_175\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_184 int64 420 1 (420,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0020170211791992188 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_EXswT9X_184, objType = PDARRAY, dtype = int64), (key = op, val = min, objType = VALUE, dtype = str), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = segments, val = id_EXswT9X_176, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_184\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_176\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"min\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_185 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0015280246734619141 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_184, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_184\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_184", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010130405426025391 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = >=, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_185, objType = PDARRAY, dtype = int64), (key = value, val = 210, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_185\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"210\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_186 bool 210 1 (210,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.001461029052734375 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = b, val = id_EXswT9X_185, objType = PDARRAY, dtype = int64), (key = func, val = where, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = scalar, val = -1, objType = VALUE, dtype = str), (key = condition, val = id_EXswT9X_186, objType = PDARRAY, dtype = bool)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc3sv ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"where\"}", "{\"key\": \"condition\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_186\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"scalar\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"-1\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_185\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_187 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc3sv took 0.0016391277313232422 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc3sv command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_186, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_186\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_186", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011439323425292969 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_185, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_185\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_185", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012459754943847656 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = permName, val = id_EXswT9X_175, objType = VALUE, dtype = str), (key = valName, val = id_EXswT9X_187, objType = VALUE, dtype = str), (key = size, val = 420, objType = VALUE, dtype = int64), (key = permute, val = True, objType = VALUE, dtype = bool), (key = segName, val = id_EXswT9X_176, objType = VALUE, dtype = str)], size = 6}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_175\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_176\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_187\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"420\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_188 int64 420 1 (420,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0017859935760498047 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = value, val = 210, objType = VALUE, dtype = int64), (key = op, val = >=, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_173, objType = PDARRAY, dtype = int64)], size = 4}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_173\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"210\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_189 bool 420 1 (420,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0013689994812011719 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_188, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_189, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_188\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_189\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_190 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0013899803161621094 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_189, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_189\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_189", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011150836944580078 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_173, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_173\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_173", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010728836059570312 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_170, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_170\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_170", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010969638824462891 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_169, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_169\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_169", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011169910430908203 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_179, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_179\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_179", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012729167938232422 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_178, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_178\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_178", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016620159149169922 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_175, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_175\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_175", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00164794921875 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_176, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_176\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_176", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015389919281005859 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_177, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_177\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_177", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014309883117675781 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_182, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_182\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_182", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00074696540832519531 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_187, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_187\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_187", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0008258819580078125 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_188, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_188\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_188", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011849403381347656 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_EXswT9X_30, objType = VALUE, dtype = str), (key = Arrays, val = id_EXswT9X_190 id_EXswT9X_168 id_EXswT9X_85, objType = VALUE, dtype = str)], size = 2}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> addEdgeRelationships ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_30\"}", "{\"key\": \"Arrays\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_190 id_EXswT9X_168 id_EXswT9X_85\"}"]
2023-12-04:14:53:32 [DipSLLPropertyGraphMsg] addEdgeRelationshipsMsg Line 368 DEBUG [Chapel] DipSLLaddEdgeRelationships took 0.000839 sec
2023-12-04:14:53:32 [DipSLLPropertyGraphMsg] addEdgeRelationshipsMsg Line 369 DEBUG [Chapel] edge relationships added
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"edge relationships added", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< addEdgeRelationships took 0.0035390853881835938 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after addEdgeRelationships command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_82, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_82\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_82", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011179447174072266 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_83, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_83\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_83", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010960102081298828 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_84, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_84\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_84", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001068115234375 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_86, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_86\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_86", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00102996826171875 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_85, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_85\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_85", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010280609130859375 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_88, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_88\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_88", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010209083557128906 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_130, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_130\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_130", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011260509490966797 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_129, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_129\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_129", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011570453643798828 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_158, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_158\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_158", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011529922485351562 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_161, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_161\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_161", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012960433959960938 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_160, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_160\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_160", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011119842529296875 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_159, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_159\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_159", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010449886322021484 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_168, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_168\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_168", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011029243469238281 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_167, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_167\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_167", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011820793151855469 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_166, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_166\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_166", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00115203857421875 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_163, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_163\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_163", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011010169982910156 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_164, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_164\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_164", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010049343109130859 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_165, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_165\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_165", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010390281677246094 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_190, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_190\"}"]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_190", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001132965087890625 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = seg_string, val = False, objType = VALUE, dtype = bool)], size = 3}
2023-12-04:14:53:32 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_191 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0014779567718505859 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = seg_string, val = False, objType = VALUE, dtype = bool), (key = size, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 3}
2023-12-04:14:53:32 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_192 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0012819766998291016 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = float64, objType = VALUE, dtype = str), (key = seg_string, val = False, objType = VALUE, dtype = bool), (key = size, val = 1, objType = VALUE, dtype = int64)], size = 3}
2023-12-04:14:53:32 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:32 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_193 float64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:32 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0012180805206298828 sec
2023-12-04:14:53:32 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:32 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = keynames, val = ["id_EXswT9X_191", "id_EXswT9X_192"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:32 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_191\\\", \\\"id_EXswT9X_192\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_195 int64 4 1 (4,) 8+created id_EXswT9X_196 int64 4 1 (4,) 8+created id_EXswT9X_197 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.028545141220092773 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_197, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_191, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_191\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_197\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_198 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0015330314636230469 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_197, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_192, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_192\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_197\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_199 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0014889240264892578 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = mode, val = append, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_EXswT9X_198", "id_EXswT9X_199"], objType = LIST, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"append\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_198\\\", \\\"id_EXswT9X_199\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_200 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0015358924865722656 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = keynames, val = ["id_EXswT9X_200"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_200\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_202 int64 8 1 (8,) 8+created id_EXswT9X_203 int64 4 1 (4,) 8+created id_EXswT9X_204 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.016786098480224609 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_200, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_204, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_200\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_204\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_205 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0055289268493652344 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = stop, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_206 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0012879371643066406 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = size, val = 8, objType = VALUE, dtype = int64), (key = permName, val = id_EXswT9X_202, objType = VALUE, dtype = str), (key = valName, val = id_EXswT9X_206, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool), (key = segName, val = id_EXswT9X_203, objType = VALUE, dtype = str)], size = 6}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_202\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_203\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_206\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_207 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0027339458465576172 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_207, objType = PDARRAY, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = start, val = 0, objType = VALUE, dtype = int64), (key = stop, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [slice] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_207\"}", "{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_208 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [slice] took 0.0028820037841796875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [slice] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_207, objType = PDARRAY, dtype = int64), (key = stop, val = 8, objType = VALUE, dtype = int64), (key = start, val = 4, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [slice] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_207\"}", "{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_209 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [slice] took 0.010854005813598633 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [slice] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_EXswT9X_208"], objType = LIST, dtype = str), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = assumeSortedStr, val = True, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_208\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_211 int64 4 1 (4,) 8+created id_EXswT9X_212 int64 3 1 (3,) 8+created id_EXswT9X_213 int64 3 1 (3,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0032100677490234375 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_208, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_213, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_208\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_213\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_214 int64 3 1 (3,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0019619464874267578 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 4, objType = VALUE, dtype = int64), (key = segments, val = id_EXswT9X_212, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> countReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_212\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_215 int64 3 1 (3,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< countReduction took 0.0019519329071044922 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after countReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 4, objType = VALUE, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_216 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0021300315856933594 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_216, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = val, val = 0, objType = VALUE, dtype = str)], size = 3}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> set ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_216\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"val\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"0\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"set id_EXswT9X_216 to 0", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< set took 0.0019629001617431641 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after set command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_216, objType = PDARRAY, dtype = int64), (key = value, val = id_EXswT9X_215, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_214, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray]=pdarray ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_216\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_214\"}", "{\"key\": \"value\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_215\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"setPdarrayIndexToPdarrayMsg success", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray]=pdarray took 0.0018050670623779297 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray]=pdarray command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_216, objType = PDARRAY, dtype = int64), (key = func, val = cumsum, objType = VALUE, dtype = str)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"cumsum\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_216\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_217 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc took 0.0020229816436767578 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 1, objType = VALUE, dtype = int64), (key = seg_string, val = False, objType = VALUE, dtype = bool)], size = 3}
2023-12-04:14:53:33 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_218 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.002223968505859375 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = append, objType = VALUE, dtype = str), (key = names, val = ["id_EXswT9X_218", "id_EXswT9X_217"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"append\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_218\\\", \\\"id_EXswT9X_217\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_219 int64 5 1 (5,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0020940303802490234 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_217, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_217\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_217", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0024290084838867188 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = AkArraySrc, val = id_EXswT9X_208, objType = PDARRAY, dtype = int64), (key = AkArrayWeight, val = id_EXswT9X_193, objType = PDARRAY, dtype = float64), (key = Directed, val = True, objType = VALUE, dtype = bool), (key = NumVertices, val = 4, objType = VALUE, dtype = int64), (key = AkArrayDst, val = id_EXswT9X_209, objType = PDARRAY, dtype = int64), (key = AkArrayVmap, val = id_EXswT9X_205, objType = PDARRAY, dtype = int64), (key = Weighted, val = False, objType = VALUE, dtype = bool), (key = NumEdges, val = 4, objType = VALUE, dtype = int64), (key = AkArraySeg, val = id_EXswT9X_219, objType = PDARRAY, dtype = int64)], size = 9}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> addEdgesFrom ["{\"key\": \"AkArraySrc\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_208\"}", "{\"key\": \"AkArrayDst\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_209\"}", "{\"key\": \"AkArraySeg\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_219\"}", "{\"key\": \"AkArrayWeight\", \"objType\": \"PDARRAY\", \"dtype\": \"float64\", \"val\": \"id_EXswT9X_193\"}", "{\"key\": \"AkArrayVmap\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_205\"}", "{\"key\": \"Directed\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"Weighted\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"NumVertices\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"NumEdges\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"id_EXswT9X_220", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< addEdgesFrom took 0.0023181438446044922 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after addEdgesFrom command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_199, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_199\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_199", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014789104461669922 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_198, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_198\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_198", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015389919281005859 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_195, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_195\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_195", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015230178833007812 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_196, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_196\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_196", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014691352844238281 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_197, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_197\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_197", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014431476593017578 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_207, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_207\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_207", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0013849735260009766 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_200, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_200\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_200", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0013740062713623047 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_202, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_202\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_202", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0013818740844726562 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_203, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_203\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_203", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014970302581787109 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_204, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_204\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_204", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010199546813964844 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_206, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_206\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_206", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00090003013610839844 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_211, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_211\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_211", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011758804321289062 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_212, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_212\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_212", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011129379272460938 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_213, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_213\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_213", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00077104568481445312 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_214, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_214\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_214", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00069093704223632812 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_215, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_215\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_215", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0006999969482421875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_216, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_216\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_216", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00063991546630859375 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_218, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_218\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_218", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00078701972961425781 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_208, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_208\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_208", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00077199935913085938 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_209, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_209\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_209", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00095295906066894531 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_219, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_219\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_219", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00064897537231445312 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_193, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_193\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_193", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00079703330993652344 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_205, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_205\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_205", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.000720977783203125 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 4, objType = VALUE, dtype = int64), (key = seg_string, val = False, objType = VALUE, dtype = bool)], size = 3}
2023-12-04:14:53:33 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_221 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0023949146270751953 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 28, objType = VALUE, dtype = int64), (key = seg_string, val = True, objType = VALUE, dtype = bool), (key = dtype, val = uint8, objType = VALUE, dtype = str)], size = 3}
2023-12-04:14:53:33 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_223 int64 4 1 (4,) 8+created id_EXswT9X_222 uint8 28 1 (28,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0016970634460449219 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_EXswT9X_222, objType = PDARRAY, dtype = uint8), (key = offsets, val = id_EXswT9X_223, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> segStr-assemble ["{\"key\": \"offsets\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_223\"}", "{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"uint8\", \"val\": \"id_EXswT9X_222\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_224 str 4 1 (4,) 1+created bytes.size 28", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< segStr-assemble took 0.0012249946594238281 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segStr-assemble command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_223, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_223\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_223", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010800361633300781 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_222, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_222\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_222", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00087094306945800781 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = stop, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_225 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0013329982757568359 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_31, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_31\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_31", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010180473327636719 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_34, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_34\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_34", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.000988006591796875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_35, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_35\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_35", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0009479522705078125 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 4, objType = VALUE, dtype = int64), (key = seg_string, val = False, objType = VALUE, dtype = bool)], size = 3}
2023-12-04:14:53:33 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_226 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0011081695556640625 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 4, objType = VALUE, dtype = int64), (key = seg_string, val = False, objType = VALUE, dtype = bool), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 3}
2023-12-04:14:53:33 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_227 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0011961460113525391 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = seg_string, val = True, objType = VALUE, dtype = bool), (key = dtype, val = uint8, objType = VALUE, dtype = str), (key = size, val = 12, objType = VALUE, dtype = int64)], size = 3}
2023-12-04:14:53:33 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_229 int64 4 1 (4,) 8+created id_EXswT9X_228 uint8 12 1 (12,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0013179779052734375 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = offsets, val = id_EXswT9X_229, objType = PDARRAY, dtype = int64), (key = values, val = id_EXswT9X_228, objType = PDARRAY, dtype = uint8)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> segStr-assemble ["{\"key\": \"offsets\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_229\"}", "{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"uint8\", \"val\": \"id_EXswT9X_228\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_230 str 4 1 (4,) 1+created bytes.size 12", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< segStr-assemble took 0.0012149810791015625 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segStr-assemble command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_229, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_229\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_229", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00072002410888671875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_228, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_228\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_228", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00066900253295898438 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = stop, val = 4, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_231 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.00091791152954101562 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_36, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_36\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_36", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00066494941711425781 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_37, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_37\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_37", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010659694671630859 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_40, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_40\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_40", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010981559753417969 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_41, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_41\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_41", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011529922485351562 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keynames, val = ["id_EXswT9X_224"], objType = LIST, dtype = str), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = keytypes, val = ["Strings"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_224\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"Strings\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_234 int64 4 1 (4,) 8+created id_EXswT9X_235 int64 1 1 (1,) 8+created id_EXswT9X_236 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0021100044250488281 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = obj, val = id_EXswT9X_224, objType = PDARRAY, dtype = <U0), (key = subcmd, val = pdarrayIndex, objType = VALUE, dtype = str), (key = key, val = id_EXswT9X_236, objType = PDARRAY, dtype = int64), (key = dtype, val = <U0, objType = VALUE, dtype = <class 'numpy.dtype[str_]'>), (key = objType, val = Strings, objType = VALUE, dtype = str)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedIndex ["{\"key\": \"subcmd\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarrayIndex\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"Strings\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"<class 'numpy.dtype[str_]'>\", \"val\": \"<U0\"}", "{\"key\": \"obj\", \"objType\": \"PDARRAY\", \"dtype\": \"<U0\", \"val\": \"id_EXswT9X_224\"}", "{\"key\": \"key\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_236\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_237 str 1 1 (1,) 1+created bytes.size 7", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedIndex took 0.0016889572143554688 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedIndex command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stride, val = 1, objType = VALUE, dtype = int64), (key = start, val = 0, objType = VALUE, dtype = int64), (key = stop, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_238 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0020508766174316406 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = permName, val = id_EXswT9X_234, objType = VALUE, dtype = str), (key = valName, val = id_EXswT9X_238, objType = VALUE, dtype = str), (key = size, val = 4, objType = VALUE, dtype = int64), (key = permute, val = True, objType = VALUE, dtype = bool), (key = segName, val = id_EXswT9X_235, objType = VALUE, dtype = str)], size = 6}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_234\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_235\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_238\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_239 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0010888576507568359 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_EXswT9X_220, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> nodes ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_220\"}"]
2023-12-04:14:53:33 [GraphInfoMsg] nodesMsg Line 102 DEBUG [Chapel] Extracting nodes takes 5.1e-05
2023-12-04:14:53:33 [GraphInfoMsg] nodesMsg Line 103 DEBUG [Chapel] created id_EXswT9X_240 int64 4 1 (4,) 8+ 
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_240 int64 4 1 (4,) 8+ ", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< nodes took 0.00081706047058105469 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after nodes command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = pda1, val = id_EXswT9X_221, objType = PDARRAY, dtype = int64), (key = invert, val = False, objType = VALUE, dtype = bool), (key = pda2, val = id_EXswT9X_240, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> in1d ["{\"key\": \"pda1\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_221\"}", "{\"key\": \"pda2\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_240\"}", "{\"key\": \"invert\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_241 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< in1d took 0.000988006591796875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after in1d command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_221, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_241, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_221\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_241\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_242 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.00090909004211425781 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_239, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_241, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_239\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_241\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_243 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.00086498260498046875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_239, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_239\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_239", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00092387199401855469 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_EXswT9X_240", "id_EXswT9X_242"], objType = LIST, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_240\\\", \\\"id_EXswT9X_242\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_244 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0010499954223632812 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 4, objType = VALUE, dtype = int64), (key = start, val = 0, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_245 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.00115203857421875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = start, val = 4, objType = VALUE, dtype = int64), (key = stop, val = 8, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_246 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0012190341949462891 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_EXswT9X_245", "id_EXswT9X_246"], objType = LIST, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_245\\\", \\\"id_EXswT9X_246\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_247 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0012040138244628906 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_246, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_246\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_246", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00090098381042480469 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_245, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_245\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_245", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00067400932312011719 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = keynames, val = ["id_EXswT9X_244"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_244\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_249 int64 8 1 (8,) 8+created id_EXswT9X_250 int64 4 1 (4,) 8+created id_EXswT9X_251 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.014446020126342773 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_244, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_251, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_244\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_251\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_252 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.00087404251098632812 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = <, objType = VALUE, dtype = str), (key = value, val = 4, objType = VALUE, dtype = int64), (key = a, val = id_EXswT9X_247, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"<\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_247\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_253 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.00088095664978027344 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_253, objType = PDARRAY, dtype = bool), (key = idx, val = id_EXswT9X_249, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_253\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_249\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_254 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.00085496902465820312 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_EXswT9X_254, objType = PDARRAY, dtype = bool), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = op, val = sum, objType = VALUE, dtype = str), (key = segments, val = id_EXswT9X_250, objType = PDARRAY, dtype = int64), (key = skip_nan, val = True, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_254\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_250\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"sum\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_255 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.00094199180603027344 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_254, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_254\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_254", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00068306922912597656 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_253, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_253\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_253", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00073003768920898438 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >, objType = VALUE, dtype = str), (key = value, val = 1, objType = VALUE, dtype = int64), (key = a, val = id_EXswT9X_255, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_255\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_256 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.00087594985961914062 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = any, objType = VALUE, dtype = str), (key = array, val = id_EXswT9X_256, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> reduction ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"any\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_256\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"bool False", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< reduction took 0.0010001659393310547 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after reduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_256, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_256\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_256", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010409355163574219 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_247, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_249, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_247\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_249\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_257 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012419223785400391 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = min, objType = VALUE, dtype = str), (key = values, val = id_EXswT9X_257, objType = PDARRAY, dtype = int64), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = segments, val = id_EXswT9X_250, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_257\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_250\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"min\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_258 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0021760463714599609 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_257, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_257\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_257", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014951229095458984 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_258, objType = PDARRAY, dtype = int64), (key = op, val = >=, objType = VALUE, dtype = str), (key = value, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_258\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_259 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.00185394287109375 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = func, val = where, objType = VALUE, dtype = str), (key = b, val = id_EXswT9X_258, objType = PDARRAY, dtype = int64), (key = scalar, val = -1, objType = VALUE, dtype = str), (key = condition, val = id_EXswT9X_259, objType = PDARRAY, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc3sv ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"where\"}", "{\"key\": \"condition\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_259\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"scalar\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"-1\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_258\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_260 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc3sv took 0.0019440650939941406 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc3sv command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_259, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_259\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_259", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016210079193115234 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_258, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_258\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_258", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016920566558837891 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = valName, val = id_EXswT9X_260, objType = VALUE, dtype = str), (key = permName, val = id_EXswT9X_249, objType = VALUE, dtype = str), (key = size, val = 8, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = segName, val = id_EXswT9X_250, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_249\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_250\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_260\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_261 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0021209716796875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_EXswT9X_247, objType = PDARRAY, dtype = int64), (key = value, val = 4, objType = VALUE, dtype = int64), (key = op, val = >=, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_247\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_262 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0018291473388671875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_262, objType = PDARRAY, dtype = bool), (key = array, val = id_EXswT9X_261, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_261\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_262\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_263 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018219947814941406 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_262, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_262\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_262", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016310214996337891 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_247, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_247\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_247", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016460418701171875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_244, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_244\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_244", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015439987182617188 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_252, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_252\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_252", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0017249584197998047 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_249, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_249\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_249", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015928745269775391 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_250, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_250\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_250", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001750946044921875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_251, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_251\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_251", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012159347534179688 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_255, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_255\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_255", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012040138244628906 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_260, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_260\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_260", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011839866638183594 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_261, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_261\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_261", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011389255523681641 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_242, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_242\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_242", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011360645294189453 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = keynames, val = ["id_EXswT9X_263", "id_EXswT9X_243"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_263\\\", \\\"id_EXswT9X_243\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_265 int64 4 1 (4,) 8+created id_EXswT9X_266 int64 4 1 (4,) 8+created id_EXswT9X_267 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0020630359649658203 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_263, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_267, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_263\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_267\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_268 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0013680458068847656 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_267, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_243, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_243\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_267\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_269 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0013380050659179688 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = Arrays, val = id_EXswT9X_268 id_EXswT9X_269 id_EXswT9X_237, objType = VALUE, dtype = str), (key = GraphName, val = id_EXswT9X_220, objType = VALUE, dtype = str)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> addNodeLabels ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_220\"}", "{\"key\": \"Arrays\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_268 id_EXswT9X_269 id_EXswT9X_237\"}"]
2023-12-04:14:53:33 [DipSLLPropertyGraphMsg] addNodeLabelsMsg Line 107 DEBUG [Chapel] DipSLLaddNodeLabels took 1.1e-05 sec 
2023-12-04:14:53:33 [DipSLLPropertyGraphMsg] addNodeLabelsMsg Line 108 DEBUG [Chapel] labels added
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"labels added", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< addNodeLabels took 0.0014359951019287109 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after addNodeLabels command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_234, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_234\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_234", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010480880737304688 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_235, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_235\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_235", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010149478912353516 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_236, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_236\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_236", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010430812835693359 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_238, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_238\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_238", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010259151458740234 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_237, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_237\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_237", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010740756988525391 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_240, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_240\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_240", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010988712310791016 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_241, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_241\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_241", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00083303451538085938 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_243, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_243\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_243", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00068807601928710938 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_263, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_263\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_263", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011439323425292969 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_269, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_269\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_269", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011339187622070312 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_268, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_268\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_268", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00099897384643554688 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_265, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_265\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_265", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010669231414794922 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_266, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_266\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_266", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012400150299072266 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_267, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_267\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_267", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011920928955078125 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_EXswT9X_230"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = keytypes, val = ["Strings"], objType = LIST, dtype = str)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_230\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"Strings\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_272 int64 4 1 (4,) 8+created id_EXswT9X_273 int64 1 1 (1,) 8+created id_EXswT9X_274 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0034549236297607422 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = subcmd, val = pdarrayIndex, objType = VALUE, dtype = str), (key = key, val = id_EXswT9X_274, objType = PDARRAY, dtype = int64), (key = obj, val = id_EXswT9X_230, objType = PDARRAY, dtype = <U0), (key = dtype, val = <U0, objType = VALUE, dtype = <class 'numpy.dtype[str_]'>), (key = objType, val = Strings, objType = VALUE, dtype = str)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedIndex ["{\"key\": \"subcmd\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarrayIndex\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"Strings\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"<class 'numpy.dtype[str_]'>\", \"val\": \"<U0\"}", "{\"key\": \"obj\", \"objType\": \"PDARRAY\", \"dtype\": \"<U0\", \"val\": \"id_EXswT9X_230\"}", "{\"key\": \"key\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_274\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_275 str 1 1 (1,) 1+created bytes.size 3", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedIndex took 0.0018100738525390625 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedIndex command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = stop, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_276 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0020051002502441406 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_EXswT9X_272, objType = VALUE, dtype = str), (key = size, val = 4, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = valName, val = id_EXswT9X_276, objType = VALUE, dtype = str), (key = segName, val = id_EXswT9X_273, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_272\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_273\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_276\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_277 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0016739368438720703 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_EXswT9X_220, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> nodes ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_220\"}"]
2023-12-04:14:53:33 [GraphInfoMsg] nodesMsg Line 102 DEBUG [Chapel] Extracting nodes takes 8.7e-05
2023-12-04:14:53:33 [GraphInfoMsg] nodesMsg Line 103 DEBUG [Chapel] created id_EXswT9X_278 int64 4 1 (4,) 8+ 
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_278 int64 4 1 (4,) 8+ ", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< nodes took 0.0014450550079345703 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after nodes command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_EXswT9X_278", "id_EXswT9X_226"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_278\\\", \\\"id_EXswT9X_226\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_279 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0014569759368896484 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = stop, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_280 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.00090813636779785156 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 4, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 8, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_281 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0008029937744140625 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = mode, val = interleave, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_EXswT9X_280", "id_EXswT9X_281"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_280\\\", \\\"id_EXswT9X_281\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_282 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0016601085662841797 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_281, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_281\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_281", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011949539184570312 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_280, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_280\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_280", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012600421905517578 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 1, objType = VALUE, dtype = int64), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_EXswT9X_279"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_279\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_284 int64 8 1 (8,) 8+created id_EXswT9X_285 int64 4 1 (4,) 8+created id_EXswT9X_286 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.014950990676879883 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_279, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_286, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_279\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_286\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_287 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.00087690353393554688 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = <, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_282, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = value, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"<\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_282\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_288 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.00092411041259765625 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_284, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_288, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_288\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_284\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_289 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.00086903572082519531 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_EXswT9X_289, objType = PDARRAY, dtype = bool), (key = op, val = sum, objType = VALUE, dtype = str), (key = segments, val = id_EXswT9X_285, objType = PDARRAY, dtype = int64), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = skip_nan, val = True, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_289\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_285\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"sum\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_290 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0010499954223632812 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_289, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_289\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_289", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00073909759521484375 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_288, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_288\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_288", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00083899497985839844 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_EXswT9X_290, objType = PDARRAY, dtype = int64), (key = op, val = >, objType = VALUE, dtype = str), (key = value, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_290\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_291 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0011079311370849609 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = any, objType = VALUE, dtype = str), (key = array, val = id_EXswT9X_291, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> reduction ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"any\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_291\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"bool False", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< reduction took 0.0010449886322021484 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after reduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_291, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_291\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_291", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011391639709472656 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_282, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_284, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_282\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_284\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_292 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0095670223236083984 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_EXswT9X_292, objType = PDARRAY, dtype = int64), (key = op, val = min, objType = VALUE, dtype = str), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = segments, val = id_EXswT9X_285, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_292\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_285\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"min\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_293 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.001995086669921875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_292, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_292\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_292", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0054810047149658203 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >=, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_293, objType = PDARRAY, dtype = int64), (key = value, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_293\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_294 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0018351078033447266 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = func, val = where, objType = VALUE, dtype = str), (key = b, val = id_EXswT9X_293, objType = PDARRAY, dtype = int64), (key = scalar, val = -1, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = condition, val = id_EXswT9X_294, objType = PDARRAY, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc3sv ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"where\"}", "{\"key\": \"condition\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_294\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"scalar\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"-1\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_293\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_295 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc3sv took 0.0019810199737548828 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc3sv command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_294, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_294\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_294", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0018160343170166016 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_293, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_293\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_293", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0062549114227294922 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_EXswT9X_284, objType = VALUE, dtype = str), (key = size, val = 8, objType = VALUE, dtype = int64), (key = valName, val = id_EXswT9X_295, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = segName, val = id_EXswT9X_285, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_284\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_285\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_295\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_296 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0022220611572265625 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >=, objType = VALUE, dtype = str), (key = value, val = 4, objType = VALUE, dtype = int64), (key = a, val = id_EXswT9X_282, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_282\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_297 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0059580802917480469 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_296, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_297, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_296\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_297\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_298 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0017910003662109375 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_297, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_297\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_297", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015470981597900391 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_282, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_282\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_282", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016200542449951172 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_279, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_279\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_279", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0038430690765380859 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_287, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_287\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_287", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015969276428222656 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_284, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_284\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_284", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016510486602783203 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_285, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_285\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_285", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0040349960327148438 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_286, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_286\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_286", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014519691467285156 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_290, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_290\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_290", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010449886322021484 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_295, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_295\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_295", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0013439655303955078 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_296, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_296\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_296", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0008640289306640625 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = names, val = ["id_EXswT9X_278", "id_EXswT9X_227"], objType = LIST, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_278\\\", \\\"id_EXswT9X_227\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_299 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0013110637664794922 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = stop, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_300 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.00087904930114746094 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stop, val = 8, objType = VALUE, dtype = int64), (key = start, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_301 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0013120174407958984 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = names, val = ["id_EXswT9X_300", "id_EXswT9X_301"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_300\\\", \\\"id_EXswT9X_301\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_302 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.00162506103515625 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_301, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_301\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_301", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001110076904296875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_300, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_300\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_300", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012860298156738281 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_EXswT9X_299"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_299\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_304 int64 8 1 (8,) 8+created id_EXswT9X_305 int64 4 1 (4,) 8+created id_EXswT9X_306 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.015533924102783203 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_299, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_306, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_299\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_306\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_307 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0014400482177734375 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_EXswT9X_302, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = <, objType = VALUE, dtype = str), (key = value, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"<\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_302\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_308 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0014290809631347656 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_304, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_308, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_308\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_304\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_309 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012798309326171875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_EXswT9X_309, objType = PDARRAY, dtype = bool), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = op, val = sum, objType = VALUE, dtype = str), (key = segments, val = id_EXswT9X_305, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_309\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_305\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"sum\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_310 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0015339851379394531 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_309, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_309\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_309", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015878677368164062 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_308, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_308\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_308", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0017020702362060547 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >, objType = VALUE, dtype = str), (key = value, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_310, objType = PDARRAY, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_310\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_311 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.001953125 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_311, objType = PDARRAY, dtype = bool), (key = op, val = any, objType = VALUE, dtype = str)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> reduction ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"any\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_311\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"bool False", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< reduction took 0.0015819072723388672 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after reduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_311, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_311\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_311", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016019344329833984 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_304, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_302, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_302\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_304\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_312 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018599033355712891 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = values, val = id_EXswT9X_312, objType = PDARRAY, dtype = int64), (key = op, val = min, objType = VALUE, dtype = str), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = segments, val = id_EXswT9X_305, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_312\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_305\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"min\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_313 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0021638870239257812 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_312, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_312\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_312", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015439987182617188 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = value, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = >=, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_313, objType = PDARRAY, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_313\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_314 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0018939971923828125 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = b, val = id_EXswT9X_313, objType = PDARRAY, dtype = int64), (key = scalar, val = -1, objType = VALUE, dtype = str), (key = func, val = where, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = condition, val = id_EXswT9X_314, objType = PDARRAY, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc3sv ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"where\"}", "{\"key\": \"condition\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_314\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"scalar\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"-1\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_313\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_315 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc3sv took 0.0020279884338378906 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc3sv command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_314, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_314\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_314", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0017840862274169922 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_313, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_313\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_313", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0017349720001220703 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = permName, val = id_EXswT9X_304, objType = VALUE, dtype = str), (key = size, val = 8, objType = VALUE, dtype = int64), (key = valName, val = id_EXswT9X_315, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool), (key = segName, val = id_EXswT9X_305, objType = VALUE, dtype = str)], size = 6}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_304\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_305\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_315\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_316 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0022079944610595703 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = value, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = >=, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_302, objType = PDARRAY, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_302\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_317 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0019359588623046875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_316, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_317, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_316\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_317\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_318 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0019450187683105469 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_317, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_317\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_317", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016489028930664062 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_302, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_302\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_302", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0017158985137939453 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_299, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_299\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_299", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0017559528350830078 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_307, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_307\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_307", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0017549991607666016 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_304, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_304\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_304", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016999244689941406 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_305, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_305\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_305", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016050338745117188 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_306, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_306\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_306", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014789104461669922 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_310, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_310\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_310", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011410713195800781 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_315, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_315\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_315", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010678768157958984 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_316, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_316\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_316", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010709762573242188 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_EXswT9X_220, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> edges ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_220\"}"]
2023-12-04:14:53:33 [GraphInfoMsg] edgesMsg Line 65 DEBUG [Chapel] Extracting edges takes 0.000167
2023-12-04:14:53:33 [GraphInfoMsg] edgesMsg Line 66 DEBUG [Chapel] created id_EXswT9X_319 int64 4 1 (4,) 8+ created id_EXswT9X_320 int64 4 1 (4,) 8
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_319 int64 4 1 (4,) 8+ created id_EXswT9X_320 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< edges took 0.001708984375 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after edges command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_EXswT9X_298", "id_EXswT9X_318"], objType = LIST, dtype = str), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_298\\\", \\\"id_EXswT9X_318\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_322 int64 4 1 (4,) 8+created id_EXswT9X_323 int64 4 1 (4,) 8+created id_EXswT9X_324 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.029588937759399414 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_298, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_324, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_298\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_324\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_325 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.001483917236328125 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_318, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_324, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_318\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_324\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_326 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0013689994812011719 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keynames, val = ["id_EXswT9X_319", "id_EXswT9X_320"], objType = LIST, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_319\\\", \\\"id_EXswT9X_320\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_328 int64 4 1 (4,) 8+created id_EXswT9X_329 int64 4 1 (4,) 8+created id_EXswT9X_330 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0021181106567382812 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_330, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_319, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_319\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_330\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_331 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0013170242309570312 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_330, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_320, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_320\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_330\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_332 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012850761413574219 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = bool, objType = VALUE, dtype = str)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"bool\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_333 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0012440681457519531 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_333, objType = PDARRAY, dtype = bool), (key = val, val = True, objType = VALUE, dtype = str), (key = dtype, val = bool, objType = VALUE, dtype = str)], size = 3}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> set ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_333\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"bool\"}", "{\"key\": \"val\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"True\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"set id_EXswT9X_333 to true", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< set took 0.0012059211730957031 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after set command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = bool, objType = VALUE, dtype = str), (key = size, val = 4, objType = VALUE, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"bool\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_334 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0011949539184570312 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = names, val = ["id_EXswT9X_333", "id_EXswT9X_334"], objType = LIST, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_333\\\", \\\"id_EXswT9X_334\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_335 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0016191005706787109 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_334, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_334\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_334", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011420249938964844 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_333, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_333\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_333", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011739730834960938 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = names, val = ["id_EXswT9X_325", "id_EXswT9X_331"], objType = LIST, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_325\\\", \\\"id_EXswT9X_331\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_336 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0016140937805175781 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_EXswT9X_326", "id_EXswT9X_332"], objType = LIST, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_326\\\", \\\"id_EXswT9X_332\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_337 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0017650127410888672 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keynames, val = ["id_EXswT9X_336", "id_EXswT9X_337"], objType = LIST, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_336\\\", \\\"id_EXswT9X_337\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_339 int64 8 1 (8,) 8+created id_EXswT9X_340 int64 4 1 (4,) 8+created id_EXswT9X_341 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.027524948120117188 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_336, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_341, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_336\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_341\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_342 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018608570098876953 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_341, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_337, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_337\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_341\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_343 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0017669200897216797 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = segments, val = id_EXswT9X_340, objType = PDARRAY, dtype = int64), (key = size, val = 8, objType = VALUE, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> countReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_340\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_344 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< countReduction took 0.0015780925750732422 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after countReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = ==, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_344, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = value, val = 2, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"==\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_344\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_345 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0014030933380126953 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_EXswT9X_339, objType = VALUE, dtype = str), (key = size, val = 8, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = valName, val = id_EXswT9X_345, objType = VALUE, dtype = str), (key = segName, val = id_EXswT9X_340, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_339\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_340\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_345\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_346 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0020709037780761719 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_345, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_345\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_345", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016009807586669922 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_346, objType = PDARRAY, dtype = bool), (key = idx, val = id_EXswT9X_335, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_346\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_335\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_347 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0016729831695556641 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_EXswT9X_322, objType = VALUE, dtype = str), (key = size, val = 4, objType = VALUE, dtype = int64), (key = valName, val = id_EXswT9X_347, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = segName, val = id_EXswT9X_323, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_322\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_323\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_347\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_348 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0020110607147216797 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_347, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_347\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_347", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015139579772949219 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_322, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_322\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_322", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001544952392578125 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_323, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_323\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_323", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015511512756347656 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_324, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_324\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_324", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015358924865722656 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_326, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_326\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_326", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015759468078613281 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_325, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_325\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_325", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015349388122558594 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_328, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_328\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_328", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010039806365966797 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_329, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_329\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_329", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012140274047851562 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_330, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_330\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_330", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012929439544677734 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_332, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_332\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_332", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012810230255126953 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_331, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_331\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_331", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0013179779052734375 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_335, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_335\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_335", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0017490386962890625 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_337, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_337\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_337", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011789798736572266 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_336, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_336\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_336", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011849403381347656 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_339, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_339\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_339", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001377105712890625 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_340, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_340\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_340", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012080669403076172 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_341, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_341\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_341", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00087690353393554688 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_343, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_343\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_343", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00091099739074707031 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_342, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_342\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_342", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010409355163574219 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_344, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_344\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_344", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00096893310546875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_346, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_346\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_346", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010819435119628906 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_298, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_348, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_298\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_348\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_349 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0046789646148681641 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_298, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_298\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_298", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011718273162841797 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_348, objType = PDARRAY, dtype = bool), (key = array, val = id_EXswT9X_318, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_318\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_348\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_350 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0011918544769287109 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_318, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_318\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_318", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010328292846679688 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_348, objType = PDARRAY, dtype = bool), (key = array, val = id_EXswT9X_277, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_277\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_348\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_351 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012090206146240234 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_277, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_277\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_277", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011529922485351562 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 3, objType = VALUE, dtype = int64), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_EXswT9X_349", "id_EXswT9X_350", "id_EXswT9X_351"], objType = LIST, dtype = str), (key = keytypes, val = ["pdarray", "pdarray", "pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"3\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_349\\\", \\\"id_EXswT9X_350\\\", \\\"id_EXswT9X_351\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_353 int64 4 1 (4,) 8+created id_EXswT9X_354 int64 4 1 (4,) 8+created id_EXswT9X_355 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.028563022613525391 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_349, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_355, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_349\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_355\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_356 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018589496612548828 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_350, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_355, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_350\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_355\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_357 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018630027770996094 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_351, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_355, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_351\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_355\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_358 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018830299377441406 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = names, val = ["id_EXswT9X_319", "id_EXswT9X_356"], objType = LIST, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_319\\\", \\\"id_EXswT9X_356\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_359 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0022170543670654297 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = names, val = ["id_EXswT9X_320", "id_EXswT9X_357"], objType = LIST, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_320\\\", \\\"id_EXswT9X_357\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_360 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0021259784698486328 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 4, objType = VALUE, dtype = int64), (key = start, val = 0, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_361 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.001789093017578125 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = start, val = 4, objType = VALUE, dtype = int64), (key = stop, val = 8, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_362 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0018191337585449219 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = names, val = ["id_EXswT9X_361", "id_EXswT9X_362"], objType = LIST, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_361\\\", \\\"id_EXswT9X_362\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_363 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0021669864654541016 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_362, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_362\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_362", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016350746154785156 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_361, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_361\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_361", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0017130374908447266 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = keynames, val = ["id_EXswT9X_359", "id_EXswT9X_360"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_359\\\", \\\"id_EXswT9X_360\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_365 int64 8 1 (8,) 8+created id_EXswT9X_366 int64 4 1 (4,) 8+created id_EXswT9X_367 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.028473138809204102 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_359, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_367, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_359\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_367\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_368 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0017940998077392578 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_360, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_367, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_360\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_367\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_369 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018048286437988281 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = <, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_363, objType = PDARRAY, dtype = int64), (key = value, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"<\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_363\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_370 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.001895904541015625 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_365, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_370, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_370\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_365\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_371 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018451213836669922 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = sum, objType = VALUE, dtype = str), (key = values, val = id_EXswT9X_371, objType = PDARRAY, dtype = bool), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = segments, val = id_EXswT9X_366, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_371\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_366\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"sum\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_372 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0020430088043212891 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_371, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_371\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_371", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016310214996337891 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_370, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_370\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_370", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015349388122558594 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_EXswT9X_372, objType = PDARRAY, dtype = int64), (key = value, val = 1, objType = VALUE, dtype = int64), (key = op, val = >, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_372\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_373 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0018260478973388672 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_373, objType = PDARRAY, dtype = bool), (key = op, val = any, objType = VALUE, dtype = str)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> reduction ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"any\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_373\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"bool False", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< reduction took 0.0016930103302001953 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after reduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_373, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_373\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_373", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016400814056396484 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_365, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_363, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_363\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_365\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_374 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0017709732055664062 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = min, objType = VALUE, dtype = str), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = values, val = id_EXswT9X_374, objType = PDARRAY, dtype = int64), (key = segments, val = id_EXswT9X_366, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_374\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_366\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"min\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_375 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0020520687103271484 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_374, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_374\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_374", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015580654144287109 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >=, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_375, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = value, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_375\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_376 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.001834869384765625 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = b, val = id_EXswT9X_375, objType = PDARRAY, dtype = int64), (key = func, val = where, objType = VALUE, dtype = str), (key = scalar, val = -1, objType = VALUE, dtype = str), (key = condition, val = id_EXswT9X_376, objType = PDARRAY, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc3sv ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"where\"}", "{\"key\": \"condition\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_376\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"scalar\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"-1\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_375\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_377 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc3sv took 0.0020718574523925781 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc3sv command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_376, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_376\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_376", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016851425170898438 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_375, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_375\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_375", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001708984375 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = valName, val = id_EXswT9X_377, objType = VALUE, dtype = str), (key = permName, val = id_EXswT9X_365, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = size, val = 8, objType = VALUE, dtype = int64), (key = segName, val = id_EXswT9X_366, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_365\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_366\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_377\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_378 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0020849704742431641 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_EXswT9X_363, objType = PDARRAY, dtype = int64), (key = value, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = >=, objType = VALUE, dtype = str)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_363\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_379 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0018460750579833984 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_EXswT9X_379, objType = PDARRAY, dtype = bool), (key = array, val = id_EXswT9X_378, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_378\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_EXswT9X_379\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_380 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0017499923706054688 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_379, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_379\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_379", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014350414276123047 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_363, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_363\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_363", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015819072723388672 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_360, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_360\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_360", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015430450439453125 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_359, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_359\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_359", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016989707946777344 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_369, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_369\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_369", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0017189979553222656 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_368, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_368\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_368", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015778541564941406 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_365, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_365\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_365", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015728473663330078 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_366, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_366\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_366", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014829635620117188 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_367, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_367\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_367", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011050701141357422 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_372, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_372\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_372", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010459423065185547 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_377, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_377\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_377", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010330677032470703 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_378, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_378\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_378", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00093603134155273438 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_EXswT9X_220, objType = VALUE, dtype = str), (key = Arrays, val = id_EXswT9X_380 id_EXswT9X_358 id_EXswT9X_275, objType = VALUE, dtype = str)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> addEdgeRelationships ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_220\"}", "{\"key\": \"Arrays\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_380 id_EXswT9X_358 id_EXswT9X_275\"}"]
2023-12-04:14:53:33 [DipSLLPropertyGraphMsg] addEdgeRelationshipsMsg Line 368 DEBUG [Chapel] DipSLLaddEdgeRelationships took 0.000622 sec
2023-12-04:14:53:33 [DipSLLPropertyGraphMsg] addEdgeRelationshipsMsg Line 369 DEBUG [Chapel] edge relationships added
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"edge relationships added", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< addEdgeRelationships took 0.0022730827331542969 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after addEdgeRelationships command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_272, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_272\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_272", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010929107666015625 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_273, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_273\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_273", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011000633239746094 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_274, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_274\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_274", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010380744934082031 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_276, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_276\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_276", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010769367218017578 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_275, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_275\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_275", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010089874267578125 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_278, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_278\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_278", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014929771423339844 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_320, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_320\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_320", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015120506286621094 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_319, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_319\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_319", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014948844909667969 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_348, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_348\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_348", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011119842529296875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_351, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_351\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_351", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012080669403076172 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_350, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_350\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_350", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011870861053466797 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_349, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_349\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_349", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010650157928466797 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_358, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_358\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_358", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010559558868408203 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_357, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_357\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_357", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010640621185302734 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_356, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_356\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_356", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010859966278076172 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_353, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_353\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_353", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010759830474853516 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_354, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_354\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_354", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011439323425292969 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_355, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_355\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_355", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010709762573242188 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_380, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_380\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_380", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011489391326904297 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_EXswT9X_220, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> nodes ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_220\"}"]
2023-12-04:14:53:33 [GraphInfoMsg] nodesMsg Line 102 DEBUG [Chapel] Extracting nodes takes 8.8e-05
2023-12-04:14:53:33 [GraphInfoMsg] nodesMsg Line 103 DEBUG [Chapel] created id_EXswT9X_381 int64 4 1 (4,) 8+ 
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_381 int64 4 1 (4,) 8+ ", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< nodes took 0.0014309883117675781 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after nodes command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_382 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0013928413391113281 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_EXswT9X_220, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> edges ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_220\"}"]
2023-12-04:14:53:33 [GraphInfoMsg] edgesMsg Line 65 DEBUG [Chapel] Extracting edges takes 0.000162
2023-12-04:14:53:33 [GraphInfoMsg] edgesMsg Line 66 DEBUG [Chapel] created id_EXswT9X_383 int64 4 1 (4,) 8+ created id_EXswT9X_384 int64 4 1 (4,) 8
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_383 int64 4 1 (4,) 8+ created id_EXswT9X_384 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< edges took 0.0015299320220947266 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after edges command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_383, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_383\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_383", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011310577392578125 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool), (key = keynames, val = ["id_EXswT9X_384"], objType = LIST, dtype = str)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_384\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_386 int64 4 1 (4,) 8+created id_EXswT9X_387 int64 4 1 (4,) 8+created id_EXswT9X_388 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0327301025390625 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_384, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_388, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_384\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_388\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_389 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012769699096679688 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = segments, val = id_EXswT9X_387, objType = PDARRAY, dtype = int64), (key = size, val = 4, objType = VALUE, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> countReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_387\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_390 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< countReduction took 0.0012950897216796875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after countReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_386, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_386\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_386", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010609626770019531 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_387, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_387\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_387", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011129379272460938 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_388, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_388\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_388", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010869503021240234 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 4, objType = VALUE, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_391 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0011849403381347656 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_391, objType = PDARRAY, dtype = int64), (key = val, val = 0, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 3}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> set ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_391\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"val\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"0\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"set id_EXswT9X_391 to 0", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< set took 0.0025420188903808594 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after set command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = value, val = id_EXswT9X_390, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_391, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_389, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray]=pdarray ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_391\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_389\"}", "{\"key\": \"value\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_390\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"setPdarrayIndexToPdarrayMsg success", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray]=pdarray took 0.0011820793151855469 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray]=pdarray command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_384, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_384\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_384", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010528564453125 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_389, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_389\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_389", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.000988006591796875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_390, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_390\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_390", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00109100341796875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_EXswT9X_220, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> edges ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_220\"}"]
2023-12-04:14:53:33 [GraphInfoMsg] edgesMsg Line 65 DEBUG [Chapel] Extracting edges takes 0.00015
2023-12-04:14:53:33 [GraphInfoMsg] edgesMsg Line 66 DEBUG [Chapel] created id_EXswT9X_392 int64 4 1 (4,) 8+ created id_EXswT9X_393 int64 4 1 (4,) 8
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_392 int64 4 1 (4,) 8+ created id_EXswT9X_393 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< edges took 0.0014760494232177734 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after edges command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_393, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_393\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_393", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016520023345947266 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = keynames, val = ["id_EXswT9X_392"], objType = LIST, dtype = str), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = True, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_392\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_395 int64 4 1 (4,) 8+created id_EXswT9X_396 int64 3 1 (3,) 8+created id_EXswT9X_397 int64 3 1 (3,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0023970603942871094 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_392, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_397, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_392\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_397\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_398 int64 3 1 (3,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018141269683837891 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = segments, val = id_EXswT9X_396, objType = PDARRAY, dtype = int64), (key = size, val = 4, objType = VALUE, dtype = int64)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> countReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_396\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_399 int64 3 1 (3,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< countReduction took 0.0018649101257324219 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after countReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_395, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_395\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_395", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0017209053039550781 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_396, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_396\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_396", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010800361633300781 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_397, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_397\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_397", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011990070343017578 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 2}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_400 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0012960433959960938 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_400, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = val, val = 0, objType = VALUE, dtype = str)], size = 3}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> set ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_400\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"val\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"0\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"set id_EXswT9X_400 to 0", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< set took 0.0013329982757568359 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after set command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_400, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_398, objType = PDARRAY, dtype = int64), (key = value, val = id_EXswT9X_399, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray]=pdarray ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_400\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_398\"}", "{\"key\": \"value\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_399\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"setPdarrayIndexToPdarrayMsg success", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray]=pdarray took 0.0013279914855957031 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray]=pdarray command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_392, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_392\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_392", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0013370513916015625 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_398, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_398\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_398", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0013120174407958984 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_399, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_399\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_399", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011858940124511719 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = +, objType = VALUE, dtype = str), (key = a, val = id_EXswT9X_391, objType = PDARRAY, dtype = int64), (key = b, val = id_EXswT9X_400, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvv ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"+\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_391\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_400\"}"]
2023-12-04:14:53:33 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_401 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:33 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvv took 0.0015239715576171875 sec
2023-12-04:14:53:33 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvv command is 0% pct of max memory 14970345062
2023-12-04:14:53:33 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_401, objType = VALUE, dtype = str), (key = algoName, val = RadixSortLSD, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str)], size = 3}
2023-12-04:14:53:33 [ServerDaemon] run Line 585 INFO [Chapel] >>> argsort ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_401\"}", "{\"key\": \"algoName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"RadixSortLSD\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_402 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< argsort took 0.02715301513671875 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after argsort command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_382, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_402, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_382\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_402\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_403 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0013170242309570312 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_382, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_382\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_382", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010969638824462891 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_EXswT9X_30, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> edges ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_30\"}"]
2023-12-04:14:53:34 [GraphInfoMsg] edgesMsg Line 65 DEBUG [Chapel] Extracting edges takes 0.000145
2023-12-04:14:53:34 [GraphInfoMsg] edgesMsg Line 66 DEBUG [Chapel] created id_EXswT9X_404 int64 210 1 (210,) 8+ created id_EXswT9X_405 int64 210 1 (210,) 8
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_404 int64 210 1 (210,) 8+ created id_EXswT9X_405 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< edges took 0.0014119148254394531 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after edges command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_404, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_404\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_404", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011539459228515625 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = keynames, val = ["id_EXswT9X_405"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_405\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_407 int64 210 1 (210,) 8+created id_EXswT9X_408 int64 93 1 (93,) 8+created id_EXswT9X_409 int64 93 1 (93,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.022538900375366211 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_405, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_409, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_405\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_409\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_410 int64 93 1 (93,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0014829635620117188 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = segments, val = id_EXswT9X_408, objType = PDARRAY, dtype = int64), (key = size, val = 210, objType = VALUE, dtype = int64)], size = 2}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> countReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_408\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"210\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_411 int64 93 1 (93,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< countReduction took 0.0012519359588623047 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after countReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_407, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_407\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_407", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001110076904296875 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_408, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_408\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_408", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010919570922851562 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_409, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_409\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_409", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011060237884521484 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 103, objType = VALUE, dtype = int64)], size = 2}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_412 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0011789798736572266 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_412, objType = PDARRAY, dtype = int64), (key = val, val = 0, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 3}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> set ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_412\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"val\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"0\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"set id_EXswT9X_412 to 0", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< set took 0.0011990070343017578 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after set command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = value, val = id_EXswT9X_411, objType = PDARRAY, dtype = int64), (key = array, val = id_EXswT9X_412, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_410, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray]=pdarray ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_412\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_410\"}", "{\"key\": \"value\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_411\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"setPdarrayIndexToPdarrayMsg success", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray]=pdarray took 0.0048861503601074219 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray]=pdarray command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_405, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_405\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_405", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010800361633300781 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_410, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_410\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_410", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010869503021240234 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_411, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_411\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_411", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010850429534912109 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_EXswT9X_30, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> edges ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_30\"}"]
2023-12-04:14:53:34 [GraphInfoMsg] edgesMsg Line 65 DEBUG [Chapel] Extracting edges takes 0.000169
2023-12-04:14:53:34 [GraphInfoMsg] edgesMsg Line 66 DEBUG [Chapel] created id_EXswT9X_413 int64 210 1 (210,) 8+ created id_EXswT9X_414 int64 210 1 (210,) 8
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_413 int64 210 1 (210,) 8+ created id_EXswT9X_414 int64 210 1 (210,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< edges took 0.0015060901641845703 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after edges command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_414, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_414\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_414", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011289119720458984 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_EXswT9X_413"], objType = LIST, dtype = str), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = assumeSortedStr, val = True, objType = VALUE, dtype = bool)], size = 5}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_EXswT9X_413\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_416 int64 210 1 (210,) 8+created id_EXswT9X_417 int64 82 1 (82,) 8+created id_EXswT9X_418 int64 82 1 (82,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0018429756164550781 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_413, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_418, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_413\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_418\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_419 int64 82 1 (82,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012888908386230469 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = segments, val = id_EXswT9X_417, objType = PDARRAY, dtype = int64), (key = size, val = 210, objType = VALUE, dtype = int64)], size = 2}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> countReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_417\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"210\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_420 int64 82 1 (82,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< countReduction took 0.0011780261993408203 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after countReduction command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_416, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_416\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_416", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011289119720458984 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_417, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_417\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_417", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010938644409179688 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_418, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_418\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_418", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011048316955566406 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 103, objType = VALUE, dtype = int64)], size = 2}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"103\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_421 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0012049674987792969 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = val, val = 0, objType = VALUE, dtype = str), (key = array, val = id_EXswT9X_421, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 3}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> set ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_421\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"val\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"0\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"set id_EXswT9X_421 to 0", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< set took 0.0011980533599853516 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after set command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_421, objType = PDARRAY, dtype = int64), (key = value, val = id_EXswT9X_420, objType = PDARRAY, dtype = int64), (key = idx, val = id_EXswT9X_419, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray]=pdarray ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_421\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_419\"}", "{\"key\": \"value\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_420\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"setPdarrayIndexToPdarrayMsg success", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray]=pdarray took 0.0012471675872802734 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray]=pdarray command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_413, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_413\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_413", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011041164398193359 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_419, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_419\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_419", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010399818420410156 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_420, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_420\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_420", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010859966278076172 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = +, objType = VALUE, dtype = str), (key = b, val = id_EXswT9X_421, objType = PDARRAY, dtype = int64), (key = a, val = id_EXswT9X_412, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvv ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"+\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_412\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_421\"}"]
2023-12-04:14:53:34 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_422 int64 103 1 (103,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:34 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvv took 0.0014140605926513672 sec
2023-12-04:14:53:34 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvv command is 0% pct of max memory 14970345062
2023-12-04:14:53:34 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = MainGraphName, val = id_EXswT9X_30, objType = VALUE, dtype = str), (key = SubGraphDegreeName, val = id_EXswT9X_401, objType = VALUE, dtype = str), (key = Type, val = VF2, objType = VALUE, dtype = str), (key = GraphDegreeName, val = id_EXswT9X_422, objType = VALUE, dtype = str), (key = SubGraphName, val = id_EXswT9X_220, objType = VALUE, dtype = str), (key = SubGraphInternalVerticesSortedName, val = id_EXswT9X_403, objType = VALUE, dtype = str)], size = 6}
2023-12-04:14:53:34 [ServerDaemon] run Line 585 INFO [Chapel] >>> subgraphIsomorphismVF2 ["{\"key\": \"MainGraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_30\"}", "{\"key\": \"SubGraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_220\"}", "{\"key\": \"GraphDegreeName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_422\"}", "{\"key\": \"SubGraphDegreeName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_401\"}", "{\"key\": \"SubGraphInternalVerticesSortedName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_403\"}", "{\"key\": \"Type\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"VF2\"}"]
$$$ graphEntryName = id_EXswT9X_30
$$$ subgraphEntryName = id_EXswT9X_220
$$$ typeN = VF2
$$$ subGraphDegreeName = id_EXswT9X_401
$$$ subGraphInternalVerticesSortedName = id_EXswT9X_403
$$$$$ graph_degree        = 5 4 2 7 5 7 6 1 8 1 4 2 6 3 2 6 4 6 4 4 2 2 1 6 6 3 4 6 1 7 2 2 7 7 3 5 5 7 3 4 2 2 4 4 4 3 5 6 4 4 7 5 5 3 6 6 3 7 3 2 1 3 5 3 2 6 9 5 2 3 7 6 5 2 1 4 5 3 3 3 3 4 4 3 1 1 7 6 2 5 7 2 6 5 4 1 1 5 3 6 4 5 2
$$$$$ subgraph_degree        = 2 3 2 1
$$$$$ degree sorted subgraph = 3 0 2 1
-----------------vf2 called-------------------

-----------------createInitialState called-------------------

-----------------dfs called-------------------

initialState pushed to stack(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = -1 -1 -1 -1, mapping = {}, depth = 0, cost = 0.0, Tin1 = {}, Tout1 = {}, Tin2 = {}, Tout2 = {})
pop happened stack.size = 0


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = -1 -1 -1 -1, mapping = {}, depth = 0, cost = 0.0, Tin1 = {}, Tout1 = {}, Tin2 = {}, Tout2 = {})
-----------------getCandidatePairsOpti called-------------------

HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
HERE 3
candidatesOpti has: #103 to check = {(20, 0), (29, 0), (42, 0), (40, 0), (59, 0), (70, 0), (19, 0), (78, 0), (26, 0), (64, 0), (89, 0), (51, 0), (23, 0), (13, 0), (91, 0), (4, 0), (102, 0), (65, 0), (37, 0), (63, 0), (50, 0), (52, 0), (44, 0), (27, 0), (93, 0), (73, 0), (90, 0), (94, 0), (85, 0), (57, 0), (86, 0), (47, 0), (49, 0), (58, 0), (45, 0), (67, 0), (87, 0), (28, 0), (3, 0), (14, 0), (16, 0), (80, 0), (77, 0), (60, 0), (98, 0), (72, 0), (0, 0), (6, 0), (34, 0), (74, 0), (32, 0), (54, 0), (39, 0), (92, 0), (10, 0), (5, 0), (53, 0), (15, 0), (100, 0), (84, 0), (1, 0), (11, 0), (83, 0), (79, 0), (61, 0), (38, 0), (75, 0), (33, 0), (99, 0), (24, 0), (76, 0), (69, 0), (31, 0), (66, 0), (46, 0), (8, 0), (88, 0), (56, 0), (97, 0), (25, 0), (9, 0), (82, 0), (68, 0), (55, 0), (101, 0), (81, 0), (41, 0), (17, 0), (2, 0), (36, 0), (35, 0), (62, 0), (30, 0), (43, 0), (95, 0), (22, 0), (18, 0), (7, 0), (96, 0), (12, 0), (48, 0), (21, 0), (71, 0)}

-----------------isFeasible called for (15,0)-------------------
-----------------isFeasible called for (73,0)-------------------
-----------------isFeasible called for (20,0)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (97,0)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rsucc called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rin called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (90,0)-------------------
-----------------Rpred called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------Rnew called-------------------

-----------------Rin called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (100,0)-------------------
-----------------isFeasible called for (29,0)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (25,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (9,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (82,0)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (42,0)-------------------
-----------------Rpred called-------------------

-----------------Rin called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (94,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (85,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (57,0)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (84,0)-------------------
-----------------Rpred called-------------------

-----------------Rout called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (1,0)-------------------
-----------------Rpred called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (68,0)-------------------
-----------------Rpred called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (40,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (59,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (70,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (55,0)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (86,0)-------------------
-----------------Rpred called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rsucc called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (19,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rout called-------------------

-----------------Rin called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (11,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rout called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (83,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (79,0)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (47,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (101,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (78,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (61,0)-------------------
-----------------Rpred called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (26,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rsucc called-------------------

-----------------Rout called-------------------

-----------------Rin called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rnew called-------------------

-----------------isFeasible called for (49,0)-------------------
-----------------Rpred called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (64,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (89,0)-------------------
-----------------Rpred called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (81,0)-------------------
-----------------Rpred called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (38,0)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rin called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (51,0)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (58,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (45,0)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (23,0)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (75,0)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rout called-------------------

-----------------isFeasible called for (41,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (67,0)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (17,0)-------------------
-----------------Rpred called-------------------

-----------------Rout called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (13,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rnew called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (33,0)-------------------
-----------------Rpred called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (91,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rout called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (4,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (87,0)-------------------
-----------------Rpred called-------------------

-----------------Rin called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (2,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rout called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rsucc called-------------------

-----------------Rnew called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
Feasibility returned False because of Rin
-----------------isFeasible called for (36,0)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (99,0)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (102,0)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rin called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (28,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (3,0)-------------------
-----------------Rpred called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (65,0)-------------------
-----------------Rpred called-------------------

-----------------Rout called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (24,0)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (35,0)-------------------
-----------------Rpred called-------------------

-----------------Rout called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (37,0)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (14,0)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------Rout called-------------------

-----------------Rin called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (62,0)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rout called-------------------

-----------------isFeasible called for (76,0)-------------------
-----------------Rpred called-------------------

-----------------Rin called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (63,0)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (16,0)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (30,0)-------------------
-----------------Rpred called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (50,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rout called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (43,0)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (69,0)-------------------
-----------------Rpred called-------------------

-----------------Rout called-------------------

-----------------Rsucc called-------------------

-----------------Rnew called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (31,0)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (80,0)-------------------
-----------------Rpred called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (52,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (77,0)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (95,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (22,0)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (66,0)-------------------
-----------------Rpred called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (44,0)-------------------
-----------------Rpred called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (18,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (7,0)-------------------
-----------------Rpred called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (60,0)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (46,0)-------------------
-----------------Rpred called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (96,0)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (27,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (98,0)-------------------
-----------------Rpred called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (12,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (72,0)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (8,0)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (93,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rout called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (48,0)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (88,0)-------------------
-----------------Rpred called-------------------

-----------------Rin called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (0,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rsucc called-------------------

-----------------Rout called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (56,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (21,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (71,0)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (6,0)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------Rsucc called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (34,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (74,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (32,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (54,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (39,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (92,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (10,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
-----------------isFeasible called for (5,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (53,0)-------------------
-----------------Rpred called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

Feasibility returned False because of Rin
end of checking all current candidates

pop happened stack.size = 61


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 5 -1 -1 -1, mapping = {(5, 0)}, depth = 1, cost = 0.0, Tin1 = {55, 33, 32, 54}, Tout1 = {7, 44, 87}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(44, 1), (87, 1), (7, 1)}

-----------------isFeasible called for (44,1)-------------------
-----------------isFeasible called for (87,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (7,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 62


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 5 44 -1 -1, mapping = {(44, 1), (5, 0)}, depth = 2, cost = 0.0, Tin1 = {56, 55, 33, 32, 54}, Tout1 = {7, 69, 87, 101}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(87, 2), (7, 2), (69, 2), (101, 2)}

-----------------isFeasible called for (101,2)-------------------
-----------------isFeasible called for (69,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (87,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (7,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 61


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 5 87 -1 -1, mapping = {(5, 0), (87, 1)}, depth = 2, cost = 0.0, Tin1 = {51, 55, 33, 32, 54}, Tout1 = {7, 20, 8, 57, 44, 80}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(7, 2), (44, 2), (57, 2), (8, 2), (20, 2), (80, 2)}

-----------------isFeasible called for (80,2)-------------------
-----------------isFeasible called for (57,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (7,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (44,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (8,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (20,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 60


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 92 -1 -1 -1, mapping = {(92, 0)}, depth = 1, cost = 0.0, Tin1 = {47, 43}, Tout1 = {4, 50, 2, 27}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(2, 1), (4, 1), (50, 1), (27, 1)}

-----------------isFeasible called for (4,1)-------------------
-----------------isFeasible called for (27,1)-------------------
-----------------isFeasible called for (2,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (50,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 62


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 92 50 -1 -1, mapping = {(92, 0), (50, 1)}, depth = 2, cost = 0.0, Tin1 = {47, 49, 43, 54}, Tout1 = {39, 93, 4, 67, 2, 27, 89}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #7 to check = {(67, 2), (93, 2), (89, 2), (27, 2), (39, 2), (4, 2), (2, 2)}

-----------------isFeasible called for (89,2)-------------------
-----------------isFeasible called for (39,2)-------------------
-----------------isFeasible called for (67,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (93,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (4,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (27,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (2,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 61


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 92 4 -1 -1, mapping = {(4, 1), (92, 0)}, depth = 2, cost = 0.0, Tin1 = {55, 47, 43}, Tout1 = {1, 32, 47, 50, 2, 27}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(47, 2), (32, 2), (1, 2), (27, 2), (50, 2), (2, 2)}

-----------------isFeasible called for (1,2)-------------------
-----------------isFeasible called for (50,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (47,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (2,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (27,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------Rout called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (32,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 61


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 92 4 47 -1, mapping = {(47, 2), (4, 1), (92, 0)}, depth = 3, cost = 0.0, Tin1 = {55, 37, 1, 32, 43}, Tout1 = {29, 1, 32, 50, 2, 27}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(27, 3), (2, 3), (29, 3), (32, 3), (1, 3), (50, 3)}

-----------------isFeasible called for (2,3)-------------------
-----------------isFeasible called for (27,3)-------------------
-----------------isFeasible called for (29,3)-------------------
-----------------isFeasible called for (1,3)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (50,3)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (32,3)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 60


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 92 27 -1 -1, mapping = {(92, 0), (27, 1)}, depth = 2, cost = 0.0, Tin1 = {12, 47, 43, 11}, Tout1 = {8, 4, 50, 2, 88, 96}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(88, 2), (96, 2), (8, 2), (4, 2), (50, 2), (2, 2)}

-----------------isFeasible called for (8,2)-------------------
-----------------isFeasible called for (4,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (88,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (50,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (96,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (2,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 59


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 54 -1 -1 -1, mapping = {(54, 0)}, depth = 1, cost = 0.0, Tin1 = {57, 97}, Tout1 = {5, 29, 8, 50}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(29, 1), (5, 1), (50, 1), (8, 1)}

-----------------isFeasible called for (8,1)-------------------
-----------------isFeasible called for (50,1)-------------------
-----------------isFeasible called for (29,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (5,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 62


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 54 5 -1 -1, mapping = {(5, 1), (54, 0)}, depth = 2, cost = 0.0, Tin1 = {55, 33, 57, 32, 97}, Tout1 = {29, 7, 8, 50, 44, 87}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(87, 2), (7, 2), (44, 2), (29, 2), (8, 2), (50, 2)}

-----------------isFeasible called for (50,2)-------------------
-----------------isFeasible called for (29,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (87,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (7,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (8,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (44,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 61


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 54 29 -1 -1, mapping = {(29, 1), (54, 0)}, depth = 2, cost = 0.0, Tin1 = {55, 57, 47, 97, 10, 3}, Tout1 = {5, 39, 8, 48, 50}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(5, 2), (48, 2), (8, 2), (39, 2), (50, 2)}

-----------------isFeasible called for (5,2)-------------------
-----------------isFeasible called for (8,2)-------------------
-----------------isFeasible called for (39,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (48,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (50,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 60


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 54 50 -1 -1, mapping = {(54, 0), (50, 1)}, depth = 2, cost = 0.0, Tin1 = {57, 49, 92, 97}, Tout1 = {5, 39, 29, 8, 93, 67, 89}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #7 to check = {(5, 2), (67, 2), (93, 2), (29, 2), (8, 2), (89, 2), (39, 2)}

-----------------isFeasible called for (93,2)-------------------
-----------------isFeasible called for (29,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (39,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (5,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (8,2)-------------------
-----------------Rpred called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (67,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (89,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 59


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 54 8 -1 -1, mapping = {(54, 0), (8, 1)}, depth = 2, cost = 0.0, Tin1 = {17, 57, 97, 27, 87}, Tout1 = {5, 29, 71, 75, 50, 13, 63}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #7 to check = {(5, 2), (13, 2), (63, 2), (75, 2), (29, 2), (71, 2), (50, 2)}

-----------------isFeasible called for (63,2)-------------------
-----------------isFeasible called for (5,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (29,2)-------------------
-----------------isFeasible called for (50,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (13,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (71,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (75,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 58


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 32 -1 -1 -1, mapping = {(32, 0)}, depth = 1, cost = 0.0, Tin1 = {56, 0, 4, 62}, Tout1 = {5, 16, 47}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(5, 1), (47, 1), (16, 1)}

-----------------isFeasible called for (47,1)-------------------
-----------------isFeasible called for (5,1)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (16,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 60


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 32 47 -1 -1, mapping = {(47, 1), (32, 0)}, depth = 2, cost = 0.0, Tin1 = {56, 37, 1, 0, 4, 62}, Tout1 = {5, 16, 29, 92}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(5, 2), (16, 2), (92, 2), (29, 2)}

-----------------isFeasible called for (29,2)-------------------
-----------------isFeasible called for (5,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (16,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (92,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 59


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 32 16 -1 -1, mapping = {(32, 0), (16, 1)}, depth = 2, cost = 0.0, Tin1 = {56, 0, 4, 62}, Tout1 = {5, 51, 102, 47, 88}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(5, 2), (47, 2), (51, 2), (102, 2), (88, 2)}

-----------------isFeasible called for (88,2)-------------------
-----------------isFeasible called for (5,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (102,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (47,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (51,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 58


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 32 5 -1 -1, mapping = {(5, 1), (32, 0)}, depth = 2, cost = 0.0, Tin1 = {56, 55, 33, 0, 4, 54, 62}, Tout1 = {16, 7, 47, 44, 87}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(87, 2), (47, 2), (44, 2), (16, 2), (7, 2)}

-----------------isFeasible called for (87,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (47,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (44,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (16,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (7,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 57


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 6 -1 -1 -1, mapping = {(6, 0)}, depth = 1, cost = 0.0, Tin1 = {20, 82, 100}, Tout1 = {46, 23, 74}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(46, 1), (74, 1), (23, 1)}

-----------------isFeasible called for (46,1)-------------------
-----------------isFeasible called for (23,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (74,1)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 58


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 6 23 -1 -1, mapping = {(6, 0), (23, 1)}, depth = 2, cost = 0.0, Tin1 = {64, 20, 82, 89, 100}, Tout1 = {25, 46, 15, 99, 74}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(46, 2), (25, 2), (99, 2), (74, 2), (15, 2)}

-----------------isFeasible called for (25,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (46,2)-------------------
-----------------isFeasible called for (15,2)-------------------
-----------------isFeasible called for (99,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (74,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 57


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 6 46 -1 -1, mapping = {(6, 0), (46, 1)}, depth = 2, cost = 0.0, Tin1 = {20, 33, 90, 82, 100}, Tout1 = {23, 49, 43, 74}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(23, 2), (43, 2), (74, 2), (49, 2)}

-----------------isFeasible called for (43,2)-------------------
-----------------isFeasible called for (49,2)-------------------
-----------------isFeasible called for (23,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (74,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 56


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 71 -1 -1 -1, mapping = {(71, 0)}, depth = 1, cost = 0.0, Tin1 = {8, 48, 70, 62}, Tout1 = {76, 100}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(100, 1), (76, 1)}

-----------------isFeasible called for (100,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (76,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 57


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 71 76 -1 -1, mapping = {(76, 1), (71, 0)}, depth = 2, cost = 0.0, Tin1 = {8, 48, 70, 62, 101}, Tout1 = {37, 69, 62, 100}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(69, 2), (100, 2), (62, 2), (37, 2)}

-----------------isFeasible called for (37,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (69,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (100,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (62,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 57


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 71 76 62 -1, mapping = {(62, 2), (76, 1), (71, 0)}, depth = 3, cost = 0.0, Tin1 = {8, 48, 70, 63, 101}, Tout1 = {37, 32, 69, 82, 100}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(82, 3), (100, 3), (32, 3), (69, 3), (37, 3)}

-----------------isFeasible called for (32,3)-------------------
-----------------isFeasible called for (100,3)-------------------
-----------------isFeasible called for (37,3)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (82,3)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (69,3)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 58


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 71 76 62 37, mapping = {(62, 2), (76, 1), (37, 3), (71, 0)}, depth = 4, cost = 0.0, Tin1 = {94, 66, 8, 48, 70, 63, 101}, Tout1 = {66, 32, 47, 69, 18, 99, 82, 100}, Tin2 = {}, Tout2 = {})
if state.mapping.size == g2.n_vertices { WORKED 
-----------------isSolution called-------------------

************************NEW ISO FOUND: {(62, 2), (76, 1), (37, 3), (71, 0)}
now the stack.size = 58

-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #0 to check = {}

end of checking all current candidates

pop happened stack.size = 57


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 3 -1 0 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 71 76 62 69, mapping = {(62, 2), (76, 1), (69, 3), (71, 0)}, depth = 4, cost = 0.0, Tin1 = {8, 48, 70, 63, 44, 101}, Tout1 = {37, 32, 99, 82, 100}, Tin2 = {}, Tout2 = {})
if state.mapping.size == g2.n_vertices { WORKED 
-----------------isSolution called-------------------

************************NEW ISO FOUND: {(62, 2), (76, 1), (69, 3), (71, 0)}
now the stack.size = 57

-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #0 to check = {}

end of checking all current candidates

pop happened stack.size = 56


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1, core2 = 71 100 -1 -1, mapping = {(100, 1), (71, 0)}, depth = 2, cost = 0.0, Tin1 = {8, 48, 70, 62}, Tout1 = {76, 6, 41, 2}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(76, 2), (41, 2), (6, 2), (2, 2)}

-----------------isFeasible called for (76,2)-------------------
-----------------isFeasible called for (41,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (6,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (2,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 55


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 0 -1 -1 -1, mapping = {(0, 0)}, depth = 1, cost = 0.0, Tin1 = {77, 90, 97}, Tout1 = {32, 42}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(32, 1), (42, 1)}

-----------------isFeasible called for (32,1)-------------------
-----------------isFeasible called for (42,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 55


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 0 32 -1 -1, mapping = {(0, 0), (32, 1)}, depth = 2, cost = 0.0, Tin1 = {56, 77, 90, 4, 97, 62}, Tout1 = {5, 16, 47, 42}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(5, 2), (16, 2), (47, 2), (42, 2)}

-----------------isFeasible called for (42,2)-------------------
-----------------isFeasible called for (5,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (16,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (47,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 54


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 48 -1 -1 -1, mapping = {(48, 0)}, depth = 1, cost = 0.0, Tin1 = {29, 1}, Tout1 = {71, 65}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(71, 1), (65, 1)}

-----------------isFeasible called for (71,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (65,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 55


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 48 65 -1 -1, mapping = {(65, 1), (48, 0)}, depth = 2, cost = 0.0, Tin1 = {29, 1, 26}, Tout1 = {71, 19, 70, 89, 80}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(19, 2), (70, 2), (71, 2), (89, 2), (80, 2)}

-----------------isFeasible called for (70,2)-------------------
-----------------isFeasible called for (80,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (71,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (19,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (89,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 54


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 48 71 -1 -1, mapping = {(71, 1), (48, 0)}, depth = 2, cost = 0.0, Tin1 = {29, 8, 1, 70, 62}, Tout1 = {76, 65, 100}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(76, 2), (100, 2), (65, 2)}

-----------------isFeasible called for (65,2)-------------------
-----------------isFeasible called for (76,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (100,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 53


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 72 -1 -1 -1, mapping = {(72, 0)}, depth = 1, cost = 0.0, Tin1 = {12, 24, 19}, Tout1 = {24, 22}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(24, 1), (22, 1)}

-----------------isFeasible called for (24,1)-------------------
-----------------isFeasible called for (22,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 52


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 8 -1 -1 -1, mapping = {(8, 0)}, depth = 1, cost = 0.0, Tin1 = {17, 54, 27, 87}, Tout1 = {71, 75, 13, 63}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(71, 1), (63, 1), (13, 1), (75, 1)}

-----------------isFeasible called for (71,1)-------------------
-----------------isFeasible called for (13,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (75,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (63,1)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 54


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 8 63 -1 -1, mapping = {(63, 1), (8, 0)}, depth = 2, cost = 0.0, Tin1 = {17, 54, 27, 82, 87}, Tout1 = {71, 75, 13, 62}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(13, 2), (62, 2), (75, 2), (71, 2)}

-----------------isFeasible called for (62,2)-------------------
-----------------isFeasible called for (71,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (13,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (75,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 53


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 8 75 -1 -1, mapping = {(8, 0), (75, 1)}, depth = 2, cost = 0.0, Tin1 = {17, 83, 54, 27, 87}, Tout1 = {55, 71, 13, 63, 97}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(13, 2), (63, 2), (97, 2), (55, 2), (71, 2)}

-----------------isFeasible called for (63,2)-------------------
-----------------isFeasible called for (71,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (13,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (97,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (55,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 52


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 8 71 -1 -1, mapping = {(71, 1), (8, 0)}, depth = 2, cost = 0.0, Tin1 = {17, 48, 70, 54, 27, 87, 62}, Tout1 = {75, 76, 13, 63, 100}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(13, 2), (76, 2), (100, 2), (63, 2), (75, 2)}

-----------------isFeasible called for (76,2)-------------------
-----------------isFeasible called for (13,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (100,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (63,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (75,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 51


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 93 -1 -1 -1, mapping = {(93, 0)}, depth = 1, cost = 0.0, Tin1 = {61, 17, 50}, Tout1 = {24, 43}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(24, 1), (43, 1)}

-----------------isFeasible called for (24,1)-------------------
-----------------isFeasible called for (43,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 52


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 93 43 -1 -1, mapping = {(43, 1), (93, 0)}, depth = 2, cost = 0.0, Tin1 = {61, 95, 46, 17, 50}, Tout1 = {24, 92}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(92, 2), (24, 2)}

-----------------isFeasible called for (24,2)-------------------
-----------------isFeasible called for (92,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 51


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 93 24 -1 -1, mapping = {(24, 1), (93, 0)}, depth = 2, cost = 0.0, Tin1 = {61, 72, 12, 90, 17, 50}, Tout1 = {33, 72, 43}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(72, 2), (33, 2), (43, 2)}

-----------------isFeasible called for (43,2)-------------------
-----------------isFeasible called for (33,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (72,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 50


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 12 -1 -1 -1, mapping = {(12, 0)}, depth = 1, cost = 0.0, Tin1 = {49, 67}, Tout1 = {72, 24, 27, 26}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(24, 1), (26, 1), (72, 1), (27, 1)}

-----------------isFeasible called for (24,1)-------------------
-----------------isFeasible called for (72,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (27,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (26,1)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 53


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 12 26 -1 -1, mapping = {(26, 1), (12, 0)}, depth = 2, cost = 0.0, Tin1 = {51, 78, 49, 67}, Tout1 = {72, 24, 65, 27}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(72, 2), (27, 2), (65, 2), (24, 2)}

-----------------isFeasible called for (27,2)-------------------
-----------------isFeasible called for (24,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (72,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (65,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 52


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 12 72 -1 -1, mapping = {(72, 1), (12, 0)}, depth = 2, cost = 0.0, Tin1 = {24, 19, 49, 67}, Tout1 = {24, 22, 27, 26}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(26, 2), (22, 2), (27, 2), (24, 2)}

-----------------isFeasible called for (27,2)-------------------
-----------------isFeasible called for (22,2)-------------------
-----------------isFeasible called for (24,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (26,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 51


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 12 24 -1 -1, mapping = {(24, 1), (12, 0)}, depth = 2, cost = 0.0, Tin1 = {72, 90, 93, 49, 67}, Tout1 = {33, 72, 27, 26}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(26, 2), (72, 2), (33, 2), (27, 2)}

-----------------isFeasible called for (33,2)-------------------
-----------------isFeasible called for (27,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (26,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (72,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 50


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 12 27 -1 -1, mapping = {(12, 0), (27, 1)}, depth = 2, cost = 0.0, Tin1 = {49, 92, 67, 11}, Tout1 = {72, 24, 8, 88, 26, 96}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(96, 2), (26, 2), (72, 2), (8, 2), (24, 2), (88, 2)}

-----------------isFeasible called for (8,2)-------------------
-----------------isFeasible called for (24,2)-------------------
-----------------isFeasible called for (96,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (88,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (26,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (72,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 49


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 27 -1 -1 -1, mapping = {(27, 0)}, depth = 1, cost = 0.0, Tin1 = {12, 92, 11}, Tout1 = {8, 88, 96}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(96, 1), (8, 1), (88, 1)}

-----------------isFeasible called for (96,1)-------------------
-----------------isFeasible called for (8,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (88,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 49


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 27 8 -1 -1, mapping = {(8, 1), (27, 0)}, depth = 2, cost = 0.0, Tin1 = {12, 17, 92, 54, 11, 87}, Tout1 = {71, 75, 13, 63, 88, 96}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(96, 2), (13, 2), (63, 2), (75, 2), (71, 2), (88, 2)}

-----------------isFeasible called for (63,2)-------------------
-----------------isFeasible called for (88,2)-------------------
-----------------isFeasible called for (96,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (71,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (13,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (75,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 48


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 46 -1 -1 -1, mapping = {(46, 0)}, depth = 1, cost = 0.0, Tin1 = {33, 90, 6}, Tout1 = {49, 43}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(49, 1), (43, 1)}

-----------------isFeasible called for (49,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (43,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 49


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 46 43 -1 -1, mapping = {(46, 0), (43, 1)}, depth = 2, cost = 0.0, Tin1 = {33, 95, 90, 93, 6}, Tout1 = {49, 92}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(92, 2), (49, 2)}

-----------------isFeasible called for (92,2)-------------------
-----------------isFeasible called for (49,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 48


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 46 49 -1 -1, mapping = {(46, 0), (49, 1)}, depth = 2, cost = 0.0, Tin1 = {33, 90, 6}, Tout1 = {12, 50, 43, 86}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(86, 2), (12, 2), (43, 2), (50, 2)}

-----------------isFeasible called for (86,2)-------------------
-----------------isFeasible called for (50,2)-------------------
-----------------isFeasible called for (43,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (12,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 47


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 44 -1 -1 -1, mapping = {(44, 0)}, depth = 1, cost = 0.0, Tin1 = {5, 56}, Tout1 = {69, 101}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(101, 1), (69, 1)}

-----------------isFeasible called for (69,1)-------------------
-----------------isFeasible called for (101,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 47


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1, core2 = 44 101 -1 -1, mapping = {(101, 1), (44, 0)}, depth = 2, cost = 0.0, Tin1 = {5, 56}, Tout1 = {81, 76, 69, 36, 98}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(76, 2), (69, 2), (81, 2), (36, 2), (98, 2)}

-----------------isFeasible called for (36,2)-------------------
-----------------isFeasible called for (98,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (76,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (69,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (81,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 46


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 66 -1 -1 -1, mapping = {(66, 0)}, depth = 1, cost = 0.0, Tin1 = {37, 40, 59, 36, 89}, Tout1 = {37, 13, 68, 38}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(37, 1), (68, 1), (38, 1), (13, 1)}

-----------------isFeasible called for (68,1)-------------------
-----------------isFeasible called for (37,1)-------------------
-----------------isFeasible called for (38,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (13,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 46


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 66 38 -1 -1, mapping = {(66, 0), (38, 1)}, depth = 2, cost = 0.0, Tin1 = {37, 40, 59, 36, 89}, Tout1 = {60, 37, 13, 15, 68}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(13, 2), (37, 2), (60, 2), (15, 2), (68, 2)}

-----------------isFeasible called for (37,2)-------------------
-----------------isFeasible called for (15,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (13,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (68,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (60,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 45


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 77 -1 -1 -1, mapping = {(77, 0)}, depth = 1, cost = 0.0, Tin1 = {14}, Tout1 = {0, 3}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(3, 1), (0, 1)}

-----------------isFeasible called for (0,1)-------------------
-----------------isFeasible called for (3,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 46


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 77 0 -1 -1, mapping = {(0, 1), (77, 0)}, depth = 2, cost = 0.0, Tin1 = {90, 97, 14}, Tout1 = {32, 42, 3}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(32, 2), (3, 2), (42, 2)}

-----------------isFeasible called for (3,2)-------------------
-----------------isFeasible called for (42,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (32,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 45


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 77 3 -1 -1, mapping = {(3, 1), (77, 0)}, depth = 2, cost = 0.0, Tin1 = {35, 94, 53, 91, 14}, Tout1 = {29, 33, 0}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(33, 2), (29, 2), (0, 2)}

-----------------isFeasible called for (33,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (29,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (0,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 44


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 52 -1 -1 -1, mapping = {(52, 0)}, depth = 1, cost = 0.0, Tin1 = {15}, Tout1 = {86, 45, 18, 98}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(18, 1), (86, 1), (45, 1), (98, 1)}

-----------------isFeasible called for (86,1)-------------------
-----------------isFeasible called for (98,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (45,1)-------------------
-----------------isFeasible called for (18,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 45


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 52 45 -1 -1, mapping = {(52, 0), (45, 1)}, depth = 2, cost = 0.0, Tin1 = {15, 31}, Tout1 = {57, 86, 18, 98}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(86, 2), (57, 2), (18, 2), (98, 2)}

-----------------isFeasible called for (86,2)-------------------
-----------------isFeasible called for (57,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (98,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (18,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 44


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 52 86 -1 -1, mapping = {(86, 1), (52, 0)}, depth = 2, cost = 0.0, Tin1 = {61, 49, 15}, Tout1 = {51, 61, 25, 45, 18, 98, 99}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #7 to check = {(51, 2), (61, 2), (45, 2), (25, 2), (99, 2), (18, 2), (98, 2)}

-----------------isFeasible called for (25,2)-------------------
-----------------isFeasible called for (61,2)-------------------
-----------------isFeasible called for (98,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (51,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (45,2)-------------------
-----------------Rpred called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (99,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (18,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 43


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 31 -1 -1 -1, mapping = {(31, 0)}, depth = 1, cost = 0.0, Tin1 = {89}, Tout1 = {45}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
candidatesOpti has: #1 to check = {(45, 1)}

-----------------isFeasible called for (45,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 43


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 31 45 -1 -1, mapping = {(31, 0), (45, 1)}, depth = 2, cost = 0.0, Tin1 = {52, 89}, Tout1 = {57}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
candidatesOpti has: #1 to check = {(57, 2)}

-----------------isFeasible called for (57,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 42


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 43 -1 -1 -1, mapping = {(43, 0)}, depth = 1, cost = 0.0, Tin1 = {95, 46, 93}, Tout1 = {92}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
candidatesOpti has: #1 to check = {(92, 1)}

-----------------isFeasible called for (92,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 42


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 43 92 -1 -1, mapping = {(43, 0), (92, 1)}, depth = 2, cost = 0.0, Tin1 = {95, 46, 93, 47}, Tout1 = {4, 50, 2, 27}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(27, 2), (4, 2), (50, 2), (2, 2)}

-----------------isFeasible called for (27,2)-------------------
-----------------isFeasible called for (4,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (50,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (2,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 41


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 50 -1 -1 -1, mapping = {(50, 0)}, depth = 1, cost = 0.0, Tin1 = {49, 92, 54}, Tout1 = {39, 93, 67, 89}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(93, 1), (67, 1), (39, 1), (89, 1)}

-----------------isFeasible called for (67,1)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (93,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (39,1)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (89,1)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 43


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 50 89 -1 -1, mapping = {(50, 0), (89, 1)}, depth = 2, cost = 0.0, Tin1 = {49, 92, 54, 65}, Tout1 = {39, 66, 23, 93, 67, 31}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(67, 2), (93, 2), (23, 2), (66, 2), (31, 2), (39, 2)}

-----------------isFeasible called for (93,2)-------------------
-----------------isFeasible called for (66,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (31,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (67,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (23,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (39,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 42


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 50 93 -1 -1, mapping = {(93, 1), (50, 0)}, depth = 2, cost = 0.0, Tin1 = {61, 17, 49, 92, 54}, Tout1 = {39, 24, 67, 43, 89}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(67, 2), (43, 2), (89, 2), (39, 2), (24, 2)}

-----------------isFeasible called for (43,2)-------------------
-----------------isFeasible called for (39,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (67,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (24,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (89,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 41


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 50 67 -1 -1, mapping = {(50, 0), (67, 1)}, depth = 2, cost = 0.0, Tin1 = {49, 92, 54}, Tout1 = {39, 12, 30, 17, 93, 41, 89}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #7 to check = {(30, 2), (93, 2), (12, 2), (17, 2), (89, 2), (39, 2), (41, 2)}

-----------------isFeasible called for (93,2)-------------------
-----------------isFeasible called for (30,2)-------------------
-----------------isFeasible called for (39,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (17,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (12,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (41,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (89,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 40


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 16 -1 -1 -1, mapping = {(16, 0)}, depth = 1, cost = 0.0, Tin1 = {32}, Tout1 = {51, 102, 88}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(51, 1), (102, 1), (88, 1)}

-----------------isFeasible called for (51,1)-------------------
-----------------isFeasible called for (102,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (88,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 40


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 16 51 -1 -1, mapping = {(16, 0), (51, 1)}, depth = 2, cost = 0.0, Tin1 = {32, 86}, Tout1 = {102, 88, 26, 73, 87}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(73, 2), (87, 2), (26, 2), (102, 2), (88, 2)}

-----------------isFeasible called for (102,2)-------------------
-----------------isFeasible called for (88,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (73,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (87,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (26,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 39


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 76 -1 -1 -1, mapping = {(76, 0)}, depth = 1, cost = 0.0, Tin1 = {71, 101}, Tout1 = {37, 69, 62}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(37, 1), (62, 1), (69, 1)}

-----------------isFeasible called for (62,1)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (37,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (69,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 40


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 76 62 -1 -1, mapping = {(76, 0), (62, 1)}, depth = 2, cost = 0.0, Tin1 = {71, 63, 101}, Tout1 = {71, 37, 32, 69, 82}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(32, 2), (69, 2), (82, 2), (37, 2), (71, 2)}

-----------------isFeasible called for (69,2)-------------------
-----------------isFeasible called for (37,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (32,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (71,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (82,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 40


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 76 62 71 -1, mapping = {(76, 0), (62, 1), (71, 2)}, depth = 3, cost = 0.0, Tin1 = {8, 48, 70, 63, 101}, Tout1 = {37, 32, 69, 82, 100}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(82, 3), (100, 3), (32, 3), (69, 3), (37, 3)}

-----------------isFeasible called for (100,3)-------------------
-----------------isFeasible called for (37,3)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (82,3)-------------------
-----------------isFeasible called for (32,3)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (69,3)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 41


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 76 62 71 32, mapping = {(76, 0), (62, 1), (71, 2), (32, 3)}, depth = 4, cost = 0.0, Tin1 = {56, 8, 48, 70, 0, 4, 63, 101}, Tout1 = {5, 16, 37, 47, 69, 82, 100}, Tin2 = {}, Tout2 = {})
if state.mapping.size == g2.n_vertices { WORKED 
-----------------isSolution called-------------------

************************NEW ISO FOUND: {(76, 0), (62, 1), (71, 2), (32, 3)}
now the stack.size = 41

-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #0 to check = {}

end of checking all current candidates

pop happened stack.size = 40


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 76 62 71 82, mapping = {(82, 3), (76, 0), (62, 1), (71, 2)}, depth = 4, cost = 0.0, Tin1 = {8, 48, 70, 63, 101}, Tout1 = {37, 32, 6, 63, 69, 42, 100}, Tin2 = {}, Tout2 = {})
if state.mapping.size == g2.n_vertices { WORKED 
-----------------isSolution called-------------------

************************NEW ISO FOUND: {(82, 3), (76, 0), (62, 1), (71, 2)}
now the stack.size = 40

-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #0 to check = {}

end of checking all current candidates

pop happened stack.size = 39


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 76 37 -1 -1, mapping = {(37, 1), (76, 0)}, depth = 2, cost = 0.0, Tin1 = {94, 71, 66, 101}, Tout1 = {66, 47, 69, 18, 99, 62}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(47, 2), (69, 2), (62, 2), (66, 2), (18, 2), (99, 2)}

-----------------isFeasible called for (69,2)-------------------
-----------------isFeasible called for (66,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (47,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (62,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (18,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (99,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 38


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 63 -1 -1 -1, mapping = {(63, 0)}, depth = 1, cost = 0.0, Tin1 = {8, 82}, Tout1 = {62}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
candidatesOpti has: #1 to check = {(62, 1)}

-----------------isFeasible called for (62,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 38


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 63 62 -1 -1, mapping = {(62, 1), (63, 0)}, depth = 2, cost = 0.0, Tin1 = {8, 76, 82}, Tout1 = {71, 32, 82}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(32, 2), (82, 2), (71, 2)}

-----------------isFeasible called for (82,2)-------------------
-----------------isFeasible called for (32,2)-------------------
-----------------isFeasible called for (71,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 38


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 63 62 82 -1, mapping = {(82, 2), (62, 1), (63, 0)}, depth = 3, cost = 0.0, Tin1 = {8, 76}, Tout1 = {71, 32, 6, 42}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(71, 3), (42, 3), (32, 3), (6, 3)}

-----------------isFeasible called for (32,3)-------------------
-----------------isFeasible called for (6,3)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (71,3)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (42,3)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 39


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 63 62 82 32, mapping = {(82, 2), (62, 1), (63, 0), (32, 3)}, depth = 4, cost = 0.0, Tin1 = {56, 8, 76, 0, 4}, Tout1 = {5, 16, 71, 47, 6, 42}, Tin2 = {}, Tout2 = {})
if state.mapping.size == g2.n_vertices { WORKED 
-----------------isSolution called-------------------

************************NEW ISO FOUND: {(82, 2), (62, 1), (63, 0), (32, 3)}
now the stack.size = 39

-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #0 to check = {}

end of checking all current candidates

pop happened stack.size = 38


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 0 -1 -1 -1 -1 -1 -1 -1 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 63 62 82 71, mapping = {(71, 3), (82, 2), (62, 1), (63, 0)}, depth = 4, cost = 0.0, Tin1 = {8, 76, 48, 70}, Tout1 = {76, 32, 6, 42, 100}, Tin2 = {}, Tout2 = {})
if state.mapping.size == g2.n_vertices { WORKED 
-----------------isSolution called-------------------

************************NEW ISO FOUND: {(71, 3), (82, 2), (62, 1), (63, 0)}
now the stack.size = 38

-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #0 to check = {}

end of checking all current candidates

pop happened stack.size = 37


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 62 -1 -1 -1, mapping = {(62, 0)}, depth = 1, cost = 0.0, Tin1 = {76, 63}, Tout1 = {71, 32, 82}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(71, 1), (32, 1), (82, 1)}

-----------------isFeasible called for (32,1)-------------------
-----------------isFeasible called for (71,1)-------------------
-----------------isFeasible called for (82,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 39


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 62 82 -1 -1, mapping = {(82, 1), (62, 0)}, depth = 2, cost = 0.0, Tin1 = {76, 63}, Tout1 = {71, 32, 6, 63, 42}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(32, 2), (63, 2), (71, 2), (42, 2), (6, 2)}

-----------------isFeasible called for (71,2)-------------------
-----------------isFeasible called for (32,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (42,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (63,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (6,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 39


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 62 82 63 -1, mapping = {(63, 2), (82, 1), (62, 0)}, depth = 3, cost = 0.0, Tin1 = {8, 76}, Tout1 = {71, 32, 6, 42}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(71, 3), (42, 3), (32, 3), (6, 3)}

-----------------isFeasible called for (71,3)-------------------
-----------------isFeasible called for (6,3)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (32,3)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (42,3)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 40


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 62 82 63 6, mapping = {(63, 2), (82, 1), (6, 3), (62, 0)}, depth = 4, cost = 0.0, Tin1 = {20, 8, 76, 100}, Tout1 = {71, 46, 23, 32, 42, 74}, Tin2 = {}, Tout2 = {})
if state.mapping.size == g2.n_vertices { WORKED 
-----------------isSolution called-------------------

************************NEW ISO FOUND: {(63, 2), (82, 1), (6, 3), (62, 0)}
now the stack.size = 40

-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #0 to check = {}

end of checking all current candidates

pop happened stack.size = 39


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 62 82 63 42, mapping = {(42, 3), (63, 2), (82, 1), (62, 0)}, depth = 4, cost = 0.0, Tin1 = {8, 76, 57, 0, 21}, Tout1 = {71, 32, 6}, Tin2 = {}, Tout2 = {})
if state.mapping.size == g2.n_vertices { WORKED 
-----------------isSolution called-------------------

************************NEW ISO FOUND: {(42, 3), (63, 2), (82, 1), (62, 0)}
now the stack.size = 39

-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #0 to check = {}

end of checking all current candidates

pop happened stack.size = 38


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 62 32 -1 -1, mapping = {(32, 1), (62, 0)}, depth = 2, cost = 0.0, Tin1 = {56, 76, 0, 4, 63}, Tout1 = {5, 16, 71, 47, 82}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(5, 2), (16, 2), (47, 2), (82, 2), (71, 2)}

-----------------isFeasible called for (82,2)-------------------
-----------------isFeasible called for (71,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (5,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (16,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (47,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 37


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 62 71 -1 -1, mapping = {(71, 1), (62, 0)}, depth = 2, cost = 0.0, Tin1 = {8, 76, 48, 70, 63}, Tout1 = {76, 32, 82, 100}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(32, 2), (76, 2), (82, 2), (100, 2)}

-----------------isFeasible called for (76,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (32,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (82,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (100,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 37


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 62 71 76 -1, mapping = {(71, 1), (76, 2), (62, 0)}, depth = 3, cost = 0.0, Tin1 = {8, 48, 70, 63, 101}, Tout1 = {37, 32, 69, 82, 100}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(82, 3), (100, 3), (32, 3), (69, 3), (37, 3)}

-----------------isFeasible called for (100,3)-------------------
-----------------isFeasible called for (37,3)-------------------
-----------------isFeasible called for (32,3)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (82,3)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (69,3)-------------------
-----------------Rpred called-------------------

-----------------Rout called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 37


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 3 -1 -1, core2 = 62 71 76 100, mapping = {(71, 1), (76, 2), (100, 3), (62, 0)}, depth = 4, cost = 0.0, Tin1 = {8, 48, 70, 63, 101}, Tout1 = {37, 32, 6, 41, 69, 2, 82}, Tin2 = {}, Tout2 = {})
if state.mapping.size == g2.n_vertices { WORKED 
-----------------isSolution called-------------------

************************NEW ISO FOUND: {(71, 1), (76, 2), (100, 3), (62, 0)}
now the stack.size = 37

-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #0 to check = {}

end of checking all current candidates

pop happened stack.size = 36


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 14 -1 -1 -1, mapping = {(14, 0)}, depth = 1, cost = 0.0, Tin1 = {70}, Tout1 = {77}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
candidatesOpti has: #1 to check = {(77, 1)}

-----------------isFeasible called for (77,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 36


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 14 77 -1 -1, mapping = {(14, 0), (77, 1)}, depth = 2, cost = 0.0, Tin1 = {70}, Tout1 = {0, 3}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(3, 2), (0, 2)}

-----------------isFeasible called for (0,2)-------------------
-----------------isFeasible called for (3,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 35


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 37 -1 -1 -1, mapping = {(37, 0)}, depth = 1, cost = 0.0, Tin1 = {94, 66, 76}, Tout1 = {66, 47, 18, 99}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(66, 1), (18, 1), (99, 1), (47, 1)}

-----------------isFeasible called for (99,1)-------------------
-----------------isFeasible called for (66,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------isFeasible called for (18,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (47,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 35


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 37 47 -1 -1, mapping = {(47, 1), (37, 0)}, depth = 2, cost = 0.0, Tin1 = {94, 66, 76, 1, 32, 4}, Tout1 = {29, 66, 92, 18, 99}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(92, 2), (29, 2), (66, 2), (18, 2), (99, 2)}

-----------------isFeasible called for (29,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (92,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (66,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (18,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (99,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 34


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 24 -1 -1 -1, mapping = {(24, 0)}, depth = 1, cost = 0.0, Tin1 = {72, 12, 90, 93}, Tout1 = {33, 72}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(33, 1), (72, 1)}

-----------------isFeasible called for (72,1)-------------------
-----------------isFeasible called for (33,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 34


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 24 33 -1 -1, mapping = {(24, 0), (33, 1)}, depth = 2, cost = 0.0, Tin1 = {72, 12, 90, 93, 34, 3}, Tout1 = {5, 39, 72, 46, 97}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(5, 2), (46, 2), (72, 2), (97, 2), (39, 2)}

-----------------isFeasible called for (5,2)-------------------
-----------------isFeasible called for (39,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (46,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (72,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (97,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 33


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 35 -1 -1 -1, mapping = {(35, 0)}, depth = 1, cost = 0.0, Tin1 = {81, 17}, Tout1 = {58, 70, 3}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(58, 1), (3, 1), (70, 1)}

-----------------isFeasible called for (70,1)-------------------
-----------------isFeasible called for (3,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (58,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 34


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 35 3 -1 -1, mapping = {(3, 1), (35, 0)}, depth = 2, cost = 0.0, Tin1 = {77, 81, 94, 17, 53, 91}, Tout1 = {29, 33, 58, 70}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(58, 2), (70, 2), (33, 2), (29, 2)}

-----------------isFeasible called for (70,2)-------------------
-----------------isFeasible called for (29,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (58,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (33,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 33


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 35 70 -1 -1, mapping = {(70, 1), (35, 0)}, depth = 2, cost = 0.0, Tin1 = {81, 17, 1, 65}, Tout1 = {84, 58, 71, 90, 14, 3}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(90, 2), (14, 2), (58, 2), (84, 2), (3, 2), (71, 2)}

-----------------isFeasible called for (84,2)-------------------
-----------------isFeasible called for (71,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (90,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (3,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (14,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (58,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 32


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 3 -1 -1 -1, mapping = {(3, 0)}, depth = 1, cost = 0.0, Tin1 = {35, 77, 94, 53, 91}, Tout1 = {29, 33}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(29, 1), (33, 1)}

-----------------isFeasible called for (33,1)-------------------
-----------------isFeasible called for (29,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 33


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 3 33 -1 -1, mapping = {(33, 1), (3, 0)}, depth = 2, cost = 0.0, Tin1 = {35, 77, 94, 24, 53, 34, 91}, Tout1 = {5, 39, 29, 46, 97}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(5, 2), (46, 2), (97, 2), (29, 2), (39, 2)}

-----------------isFeasible called for (29,2)-------------------
-----------------isFeasible called for (39,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (5,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (46,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (97,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 32


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 3 29 -1 -1, mapping = {(29, 1), (3, 0)}, depth = 2, cost = 0.0, Tin1 = {35, 77, 94, 55, 53, 47, 54, 10, 91}, Tout1 = {39, 33, 48}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(48, 2), (33, 2), (39, 2)}

-----------------isFeasible called for (33,2)-------------------
-----------------isFeasible called for (48,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (39,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 31


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 65 -1 -1 -1, mapping = {(65, 0)}, depth = 1, cost = 0.0, Tin1 = {48, 26}, Tout1 = {19, 70, 89, 80}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(19, 1), (70, 1), (80, 1), (89, 1)}

-----------------isFeasible called for (70,1)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (19,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (80,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (89,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 33


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 65 89 -1 -1, mapping = {(65, 0), (89, 1)}, depth = 2, cost = 0.0, Tin1 = {48, 50, 26}, Tout1 = {66, 23, 19, 70, 31, 80}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(19, 2), (70, 2), (23, 2), (66, 2), (31, 2), (80, 2)}

-----------------isFeasible called for (70,2)-------------------
-----------------isFeasible called for (66,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (31,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (19,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------isFeasible called for (80,2)-------------------
-----------------Rpred called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (23,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 32


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 65 70 -1 -1, mapping = {(65, 0), (70, 1)}, depth = 2, cost = 0.0, Tin1 = {35, 1, 48, 26}, Tout1 = {84, 71, 90, 19, 89, 14, 80}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #7 to check = {(90, 2), (14, 2), (19, 2), (84, 2), (71, 2), (89, 2), (80, 2)}

-----------------isFeasible called for (84,2)-------------------
-----------------isFeasible called for (71,2)-------------------
-----------------isFeasible called for (80,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (90,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (89,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (14,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (19,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 31


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 65 19 -1 -1, mapping = {(65, 0), (19, 1)}, depth = 2, cost = 0.0, Tin1 = {48, 26}, Tout1 = {81, 72, 70, 15, 89, 80}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(72, 2), (81, 2), (70, 2), (89, 2), (15, 2), (80, 2)}

-----------------isFeasible called for (81,2)-------------------
-----------------isFeasible called for (15,2)-------------------
-----------------isFeasible called for (72,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (89,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (80,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (70,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 30


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 36 -1 -1 -1, mapping = {(36, 0)}, depth = 1, cost = 0.0, Tin1 = {64, 15, 101}, Tout1 = {90, 66}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(66, 1), (90, 1)}

-----------------isFeasible called for (90,1)-------------------
-----------------isFeasible called for (66,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 31


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 36 90 -1 -1, mapping = {(36, 0), (90, 1)}, depth = 2, cost = 0.0, Tin1 = {64, 56, 70, 15, 101}, Tout1 = {46, 24, 66, 0, 73}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(73, 2), (46, 2), (66, 2), (0, 2), (24, 2)}

-----------------isFeasible called for (66,2)-------------------
-----------------isFeasible called for (24,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (73,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (0,2)-------------------
-----------------Rpred called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (46,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 30


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 36 66 -1 -1, mapping = {(66, 1), (36, 0)}, depth = 2, cost = 0.0, Tin1 = {64, 37, 40, 59, 15, 89, 101}, Tout1 = {90, 37, 13, 68, 38}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(90, 2), (13, 2), (38, 2), (37, 2), (68, 2)}

-----------------isFeasible called for (38,2)-------------------
-----------------isFeasible called for (68,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (37,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (90,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (13,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 29


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 87 -1 -1 -1, mapping = {(87, 0)}, depth = 1, cost = 0.0, Tin1 = {5, 51}, Tout1 = {20, 8, 57, 80}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(20, 1), (57, 1), (8, 1), (80, 1)}

-----------------isFeasible called for (20,1)-------------------
-----------------isFeasible called for (57,1)-------------------
-----------------isFeasible called for (8,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (80,1)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 31


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 87 57 -1 -1, mapping = {(87, 0), (57, 1)}, depth = 2, cost = 0.0, Tin1 = {5, 51, 78, 34, 45}, Tout1 = {79, 20, 8, 54, 42, 80}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(54, 2), (79, 2), (8, 2), (20, 2), (42, 2), (80, 2)}

-----------------isFeasible called for (79,2)-------------------
-----------------isFeasible called for (42,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (54,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (80,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (8,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (20,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 30


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 87 20 -1 -1, mapping = {(20, 1), (87, 0)}, depth = 2, cost = 0.0, Tin1 = {5, 51}, Tout1 = {8, 57, 6, 80}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(57, 2), (8, 2), (80, 2), (6, 2)}

-----------------isFeasible called for (80,2)-------------------
-----------------isFeasible called for (57,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (6,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (8,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 29


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 87 8 -1 -1, mapping = {(87, 0), (8, 1)}, depth = 2, cost = 0.0, Tin1 = {5, 51, 17, 54, 27}, Tout1 = {20, 71, 75, 57, 13, 63, 80}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #7 to check = {(13, 2), (63, 2), (75, 2), (57, 2), (71, 2), (20, 2), (80, 2)}

-----------------isFeasible called for (63,2)-------------------
-----------------isFeasible called for (80,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (57,2)-------------------
-----------------isFeasible called for (13,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (75,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (71,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (20,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 28


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 4 -1 -1 -1, mapping = {(4, 0)}, depth = 1, cost = 0.0, Tin1 = {55, 92}, Tout1 = {1, 32, 47}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(1, 1), (47, 1), (32, 1)}

-----------------isFeasible called for (47,1)-------------------
-----------------isFeasible called for (1,1)-------------------
-----------------isFeasible called for (32,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 30


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 4 32 -1 -1, mapping = {(4, 0), (32, 1)}, depth = 2, cost = 0.0, Tin1 = {56, 55, 0, 92, 62}, Tout1 = {5, 16, 1, 47}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(5, 2), (16, 2), (47, 2), (1, 2)}

-----------------isFeasible called for (1,2)-------------------
-----------------isFeasible called for (5,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (16,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (47,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Feasibility returned False because of RsemanticFeasible
end of checking all current candidates

pop happened stack.size = 29


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 4 47 -1 -1, mapping = {(4, 0), (47, 1)}, depth = 2, cost = 0.0, Tin1 = {55, 37, 1, 32, 92}, Tout1 = {29, 1, 32, 92}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(32, 2), (92, 2), (29, 2), (1, 2)}

-----------------isFeasible called for (32,2)-------------------
-----------------isFeasible called for (29,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (1,2)-------------------
-----------------Rpred called-------------------

-----------------Rout called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Feasibility returned False because of RsemanticFeasible
-----------------isFeasible called for (92,2)-------------------
-----------------Rpred called-------------------

-----------------Rout called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Feasibility returned False because of RsemanticFeasible
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 29


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 4 47 92 -1, mapping = {(92, 2), (4, 0), (47, 1)}, depth = 3, cost = 0.0, Tin1 = {55, 37, 1, 32, 43}, Tout1 = {29, 1, 32, 50, 2, 27}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(27, 3), (2, 3), (29, 3), (32, 3), (1, 3), (50, 3)}

-----------------isFeasible called for (29,3)-------------------
-----------------isFeasible called for (1,3)-------------------
-----------------isFeasible called for (27,3)-------------------
-----------------isFeasible called for (2,3)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (50,3)-------------------
Feasibility returned FALSE because of Rpred
-----------------Rpred called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (32,3)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 29


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 4 47 92 29, mapping = {(92, 2), (4, 0), (47, 1), (29, 3)}, depth = 4, cost = 0.0, Tin1 = {55, 37, 1, 32, 43, 54, 10, 3}, Tout1 = {39, 1, 48, 32, 50, 2, 27}, Tin2 = {}, Tout2 = {})
if state.mapping.size == g2.n_vertices { WORKED 
-----------------isSolution called-------------------

************************NEW ISO FOUND: {(92, 2), (4, 0), (47, 1), (29, 3)}
now the stack.size = 29

-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #0 to check = {}

end of checking all current candidates

pop happened stack.size = 28


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 4 1 -1 -1, mapping = {(1, 1), (4, 0)}, depth = 2, cost = 0.0, Tin1 = {55, 92}, Tout1 = {48, 32, 47, 70}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(48, 2), (47, 2), (32, 2), (70, 2)}

-----------------isFeasible called for (70,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (48,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (47,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Feasibility returned False because of RsemanticFeasible
-----------------isFeasible called for (32,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 27


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 33 -1 -1 -1, mapping = {(33, 0)}, depth = 1, cost = 0.0, Tin1 = {24, 34, 3}, Tout1 = {5, 39, 46, 97}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(5, 1), (46, 1), (39, 1), (97, 1)}

-----------------isFeasible called for (46,1)-------------------
-----------------isFeasible called for (39,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (5,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (97,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 29


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1, core2 = 33 97 -1 -1, mapping = {(33, 0), (97, 1)}, depth = 2, cost = 0.0, Tin1 = {94, 24, 75, 34, 3}, Tout1 = {5, 39, 46, 0, 54}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(5, 2), (46, 2), (54, 2), (0, 2), (39, 2)}

-----------------isFeasible called for (0,2)-------------------
-----------------isFeasible called for (39,2)-------------------
-----------------isFeasible called for (5,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (46,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (54,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 28


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 33 5 -1 -1, mapping = {(33, 0), (5, 1)}, depth = 2, cost = 0.0, Tin1 = {55, 24, 34, 32, 54, 3}, Tout1 = {39, 7, 46, 97, 44, 87}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(87, 2), (46, 2), (44, 2), (7, 2), (97, 2), (39, 2)}

-----------------isFeasible called for (39,2)-------------------
-----------------isFeasible called for (87,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (46,2)-------------------
-----------------Rpred called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (44,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (7,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (97,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 27


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 33 46 -1 -1, mapping = {(33, 0), (46, 1)}, depth = 2, cost = 0.0, Tin1 = {90, 24, 34, 6, 3}, Tout1 = {5, 39, 49, 43, 97}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(5, 2), (97, 2), (43, 2), (49, 2), (39, 2)}

-----------------isFeasible called for (49,2)-------------------
-----------------isFeasible called for (43,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (5,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (39,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (97,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 26


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 17 -1 -1 -1, mapping = {(17, 0)}, depth = 1, cost = 0.0, Tin1 = {55, 81, 67}, Tout1 = {35, 8, 93}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(93, 1), (8, 1), (35, 1)}

-----------------isFeasible called for (8,1)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (93,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (35,1)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 28


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 17 35 -1 -1, mapping = {(17, 0), (35, 1)}, depth = 2, cost = 0.0, Tin1 = {55, 81, 67}, Tout1 = {58, 8, 93, 70, 3}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(58, 2), (70, 2), (93, 2), (3, 2), (8, 2)}

-----------------isFeasible called for (70,2)-------------------
-----------------isFeasible called for (8,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (58,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (93,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (3,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 27


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 17 93 -1 -1, mapping = {(93, 1), (17, 0)}, depth = 2, cost = 0.0, Tin1 = {61, 55, 81, 50, 67}, Tout1 = {35, 24, 8, 43}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(43, 2), (8, 2), (35, 2), (24, 2)}

-----------------isFeasible called for (43,2)-------------------
-----------------isFeasible called for (24,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (8,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (35,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 26


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 17 8 -1 -1, mapping = {(17, 0), (8, 1)}, depth = 2, cost = 0.0, Tin1 = {55, 81, 67, 54, 27, 87}, Tout1 = {35, 71, 75, 93, 13, 63}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(13, 2), (63, 2), (75, 2), (93, 2), (71, 2), (35, 2)}

-----------------isFeasible called for (63,2)-------------------
-----------------isFeasible called for (71,2)-------------------
-----------------isFeasible called for (13,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------isFeasible called for (75,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (35,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (93,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 25


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 67 -1 -1 -1, mapping = {(67, 0)}, depth = 1, cost = 0.0, Tin1 = {50}, Tout1 = {12, 30, 17, 41}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(12, 1), (30, 1), (17, 1), (41, 1)}

-----------------isFeasible called for (41,1)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (12,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (30,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (17,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 26


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 67 17 -1 -1, mapping = {(17, 1), (67, 0)}, depth = 2, cost = 0.0, Tin1 = {55, 81, 50}, Tout1 = {35, 12, 30, 8, 93, 41}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(30, 2), (93, 2), (12, 2), (8, 2), (35, 2), (41, 2)}

-----------------isFeasible called for (93,2)-------------------
-----------------isFeasible called for (41,2)-------------------
-----------------isFeasible called for (8,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (30,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (12,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (35,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 25


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 67 12 -1 -1, mapping = {(12, 1), (67, 0)}, depth = 2, cost = 0.0, Tin1 = {50, 49}, Tout1 = {72, 30, 24, 17, 41, 27, 26}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #7 to check = {(30, 2), (72, 2), (26, 2), (17, 2), (27, 2), (41, 2), (24, 2)}

-----------------isFeasible called for (17,2)-------------------
-----------------isFeasible called for (41,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (27,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (30,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (24,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (72,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (26,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 24


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 75 -1 -1 -1, mapping = {(75, 0)}, depth = 1, cost = 0.0, Tin1 = {8, 83}, Tout1 = {55, 97}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(55, 1), (97, 1)}

-----------------isFeasible called for (97,1)-------------------
-----------------isFeasible called for (55,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 25


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 75 55 -1 -1, mapping = {(75, 0), (55, 1)}, depth = 2, cost = 0.0, Tin1 = {8, 83, 91}, Tout1 = {5, 29, 17, 4, 97}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(5, 2), (97, 2), (17, 2), (29, 2), (4, 2)}

-----------------isFeasible called for (17,2)-------------------
-----------------isFeasible called for (4,2)-------------------
-----------------isFeasible called for (29,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (5,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (97,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 24


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1, core2 = 75 97 -1 -1, mapping = {(75, 0), (97, 1)}, depth = 2, cost = 0.0, Tin1 = {94, 33, 8, 83}, Tout1 = {55, 0, 54}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(54, 2), (55, 2), (0, 2)}

-----------------isFeasible called for (55,2)-------------------
-----------------isFeasible called for (0,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (54,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 23


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 23 -1 -1 -1, mapping = {(23, 0)}, depth = 1, cost = 0.0, Tin1 = {64, 6, 89}, Tout1 = {25, 15, 99}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(15, 1), (99, 1), (25, 1)}

-----------------isFeasible called for (99,1)-------------------
-----------------isFeasible called for (15,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (25,1)-------------------
-----------------Rpred called-------------------

-----------------Rout called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 23


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 23 15 -1 -1, mapping = {(23, 0), (15, 1)}, depth = 2, cost = 0.0, Tin1 = {64, 19, 6, 38, 89}, Tout1 = {25, 58, 52, 36, 99}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(58, 2), (25, 2), (99, 2), (36, 2), (52, 2)}

-----------------isFeasible called for (25,2)-------------------
-----------------isFeasible called for (99,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (52,2)-------------------
-----------------isFeasible called for (58,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (36,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 22


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 45 -1 -1 -1, mapping = {(45, 0)}, depth = 1, cost = 0.0, Tin1 = {52, 31}, Tout1 = {57}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
candidatesOpti has: #1 to check = {(57, 1)}

-----------------isFeasible called for (57,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 22


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 45 57 -1 -1, mapping = {(45, 0), (57, 1)}, depth = 2, cost = 0.0, Tin1 = {78, 52, 34, 31, 87}, Tout1 = {79, 54, 42}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(54, 2), (79, 2), (42, 2)}

-----------------isFeasible called for (42,2)-------------------
-----------------isFeasible called for (79,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (54,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 21


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 81 -1 -1 -1, mapping = {(81, 0)}, depth = 1, cost = 0.0, Tin1 = {19, 101}, Tout1 = {35, 17}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(17, 1), (35, 1)}

-----------------isFeasible called for (17,1)-------------------
-----------------isFeasible called for (35,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 22


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 81 17 -1 -1, mapping = {(17, 1), (81, 0)}, depth = 2, cost = 0.0, Tin1 = {55, 19, 67, 101}, Tout1 = {35, 8, 93}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(93, 2), (8, 2), (35, 2)}

-----------------isFeasible called for (93,2)-------------------
-----------------isFeasible called for (8,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (35,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Feasibility returned False because of RsemanticFeasible
end of checking all current candidates

pop happened stack.size = 21


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 81 35 -1 -1, mapping = {(81, 0), (35, 1)}, depth = 2, cost = 0.0, Tin1 = {17, 19, 101}, Tout1 = {58, 17, 70, 3}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(58, 2), (70, 2), (3, 2), (17, 2)}

-----------------isFeasible called for (70,2)-------------------
-----------------isFeasible called for (58,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (3,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (17,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Feasibility returned False because of RsemanticFeasible
end of checking all current candidates

pop happened stack.size = 20


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 38 -1 -1 -1, mapping = {(38, 0)}, depth = 1, cost = 0.0, Tin1 = {66}, Tout1 = {60, 15}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(15, 1), (60, 1)}

-----------------isFeasible called for (60,1)-------------------
-----------------isFeasible called for (15,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 20


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 38 15 -1 -1, mapping = {(38, 0), (15, 1)}, depth = 2, cost = 0.0, Tin1 = {66, 23, 19}, Tout1 = {58, 52, 60, 36}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(58, 2), (60, 2), (36, 2), (52, 2)}

-----------------isFeasible called for (60,2)-------------------
-----------------isFeasible called for (52,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (58,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (36,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 19


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 51 -1 -1 -1, mapping = {(51, 0)}, depth = 1, cost = 0.0, Tin1 = {16, 86}, Tout1 = {26, 73, 87}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(73, 1), (26, 1), (87, 1)}

-----------------isFeasible called for (26,1)-------------------
-----------------isFeasible called for (87,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (73,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 20


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 51 26 -1 -1, mapping = {(51, 0), (26, 1)}, depth = 2, cost = 0.0, Tin1 = {78, 16, 12, 86}, Tout1 = {65, 73, 87}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(73, 2), (87, 2), (65, 2)}

-----------------isFeasible called for (65,2)-------------------
-----------------isFeasible called for (73,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (87,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 19


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 51 87 -1 -1, mapping = {(51, 0), (87, 1)}, depth = 2, cost = 0.0, Tin1 = {5, 16, 86}, Tout1 = {20, 8, 57, 26, 73, 80}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(73, 2), (26, 2), (57, 2), (8, 2), (20, 2), (80, 2)}

-----------------isFeasible called for (80,2)-------------------
-----------------isFeasible called for (57,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (73,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (26,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (8,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (20,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 18


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 49 -1 -1 -1, mapping = {(49, 0)}, depth = 1, cost = 0.0, Tin1 = {46}, Tout1 = {12, 50, 86}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(12, 1), (86, 1), (50, 1)}

-----------------isFeasible called for (50,1)-------------------
-----------------isFeasible called for (86,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (12,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 20


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 49 86 -1 -1, mapping = {(49, 0), (86, 1)}, depth = 2, cost = 0.0, Tin1 = {61, 52, 46}, Tout1 = {51, 61, 25, 12, 50, 99}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(51, 2), (61, 2), (25, 2), (12, 2), (99, 2), (50, 2)}

-----------------isFeasible called for (61,2)-------------------
-----------------isFeasible called for (99,2)-------------------
-----------------isFeasible called for (50,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (51,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (25,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (12,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 19


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 49 50 -1 -1, mapping = {(49, 0), (50, 1)}, depth = 2, cost = 0.0, Tin1 = {46, 92, 54}, Tout1 = {39, 12, 93, 86, 67, 89}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(67, 2), (86, 2), (93, 2), (12, 2), (89, 2), (39, 2)}

-----------------isFeasible called for (89,2)-------------------
-----------------isFeasible called for (86,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (67,2)-------------------
-----------------isFeasible called for (39,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (93,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (12,2)-------------------
Feasibility returned FALSE because of Rpred
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 18


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 49 12 -1 -1, mapping = {(12, 1), (49, 0)}, depth = 2, cost = 0.0, Tin1 = {46, 67}, Tout1 = {72, 24, 50, 86, 27, 26}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(26, 2), (72, 2), (86, 2), (27, 2), (24, 2), (50, 2)}

-----------------isFeasible called for (86,2)-------------------
-----------------isFeasible called for (27,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (24,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (26,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (72,2)-------------------
-----------------getEdgeCount called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (50,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 17


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 89 -1 -1 -1, mapping = {(89, 0)}, depth = 1, cost = 0.0, Tin1 = {50, 65}, Tout1 = {66, 23, 31}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(66, 1), (31, 1), (23, 1)}

-----------------isFeasible called for (31,1)-------------------
-----------------isFeasible called for (66,1)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (23,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 19


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 89 23 -1 -1, mapping = {(23, 1), (89, 0)}, depth = 2, cost = 0.0, Tin1 = {64, 50, 65, 6}, Tout1 = {25, 66, 15, 99, 31}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(25, 2), (66, 2), (99, 2), (15, 2), (31, 2)}

-----------------isFeasible called for (66,2)-------------------
-----------------isFeasible called for (25,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (15,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (99,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (31,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 18


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 89 66 -1 -1, mapping = {(66, 1), (89, 0)}, depth = 2, cost = 0.0, Tin1 = {37, 40, 59, 50, 65, 36}, Tout1 = {37, 23, 13, 68, 38, 31}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(13, 2), (38, 2), (23, 2), (37, 2), (68, 2), (31, 2)}

-----------------isFeasible called for (38,2)-------------------
-----------------isFeasible called for (37,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (68,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (13,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (23,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (31,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 17


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 89 31 -1 -1, mapping = {(31, 1), (89, 0)}, depth = 2, cost = 0.0, Tin1 = {50, 65}, Tout1 = {66, 23, 45}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(45, 2), (23, 2), (66, 2)}

-----------------isFeasible called for (45,2)-------------------
-----------------isFeasible called for (66,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (23,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 16


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 61 -1 -1 -1, mapping = {(61, 0)}, depth = 1, cost = 0.0, Tin1 = {86}, Tout1 = {93, 86}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(93, 1), (86, 1)}

-----------------isFeasible called for (86,1)-------------------
-----------------isFeasible called for (93,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 16


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 61 93 -1 -1, mapping = {(93, 1), (61, 0)}, depth = 2, cost = 0.0, Tin1 = {17, 50, 86}, Tout1 = {24, 86, 43}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(86, 2), (43, 2), (24, 2)}

-----------------isFeasible called for (86,2)-------------------
-----------------isFeasible called for (43,2)-------------------
-----------------isFeasible called for (24,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 15


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1, core2 = 101 -1 -1 -1, mapping = {(101, 0)}, depth = 1, cost = 0.0, Tin1 = {44}, Tout1 = {81, 76, 36, 98}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(36, 1), (76, 1), (81, 1), (98, 1)}

-----------------isFeasible called for (36,1)-------------------
-----------------isFeasible called for (81,1)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (76,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (98,1)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 17


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1, core2 = 101 36 -1 -1, mapping = {(101, 0), (36, 1)}, depth = 2, cost = 0.0, Tin1 = {64, 15, 44}, Tout1 = {81, 90, 66, 76, 98}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(90, 2), (76, 2), (81, 2), (66, 2), (98, 2)}

-----------------isFeasible called for (66,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (98,2)-------------------
-----------------isFeasible called for (76,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (90,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (81,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 16


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1, core2 = 101 76 -1 -1, mapping = {(101, 0), (76, 1)}, depth = 2, cost = 0.0, Tin1 = {71, 44}, Tout1 = {81, 37, 69, 36, 98, 62}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(69, 2), (81, 2), (62, 2), (37, 2), (36, 2), (98, 2)}

-----------------isFeasible called for (37,2)-------------------
-----------------isFeasible called for (98,2)-------------------
-----------------isFeasible called for (69,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (36,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (81,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (62,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 15


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1, core2 = 101 81 -1 -1, mapping = {(101, 0), (81, 1)}, depth = 2, cost = 0.0, Tin1 = {19, 44}, Tout1 = {35, 76, 17, 36, 98}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(76, 2), (17, 2), (36, 2), (35, 2), (98, 2)}

-----------------isFeasible called for (76,2)-------------------
-----------------isFeasible called for (98,2)-------------------
-----------------isFeasible called for (36,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (35,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (17,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 14


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 26 -1 -1 -1, mapping = {(26, 0)}, depth = 1, cost = 0.0, Tin1 = {51, 78, 12}, Tout1 = {65}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
candidatesOpti has: #1 to check = {(65, 1)}

-----------------isFeasible called for (65,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 14


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 26 65 -1 -1, mapping = {(65, 1), (26, 0)}, depth = 2, cost = 0.0, Tin1 = {51, 78, 12, 48}, Tout1 = {19, 70, 89, 80}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(19, 2), (70, 2), (89, 2), (80, 2)}

-----------------isFeasible called for (89,2)-------------------
-----------------isFeasible called for (70,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (80,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (19,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 13


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 47 -1 -1 -1, mapping = {(47, 0)}, depth = 1, cost = 0.0, Tin1 = {37, 1, 32, 4}, Tout1 = {29, 92}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(29, 1), (92, 1)}

-----------------isFeasible called for (29,1)-------------------
-----------------isFeasible called for (92,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 14


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 47 92 -1 -1, mapping = {(47, 0), (92, 1)}, depth = 2, cost = 0.0, Tin1 = {37, 1, 32, 4, 43}, Tout1 = {29, 4, 50, 2, 27}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(29, 2), (27, 2), (4, 2), (50, 2), (2, 2)}

-----------------isFeasible called for (29,2)-------------------
-----------------isFeasible called for (4,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (27,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (50,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (2,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 14


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 47 92 4 -1, mapping = {(47, 0), (4, 2), (92, 1)}, depth = 3, cost = 0.0, Tin1 = {55, 37, 1, 32, 43}, Tout1 = {29, 1, 32, 50, 2, 27}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(27, 3), (2, 3), (29, 3), (32, 3), (1, 3), (50, 3)}

-----------------isFeasible called for (2,3)-------------------
-----------------isFeasible called for (29,3)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (1,3)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (27,3)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (50,3)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (32,3)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------Rout called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 16


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 47 92 4 27, mapping = {(27, 3), (47, 0), (4, 2), (92, 1)}, depth = 4, cost = 0.0, Tin1 = {55, 12, 37, 1, 32, 43, 11}, Tout1 = {29, 8, 1, 32, 50, 2, 88, 96}, Tin2 = {}, Tout2 = {})
if state.mapping.size == g2.n_vertices { WORKED 
-----------------isSolution called-------------------

************************NEW ISO FOUND: {(27, 3), (47, 0), (4, 2), (92, 1)}
now the stack.size = 16

-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #0 to check = {}

end of checking all current candidates

pop happened stack.size = 15


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 47 92 4 50, mapping = {(47, 0), (4, 2), (92, 1), (50, 3)}, depth = 4, cost = 0.0, Tin1 = {55, 37, 1, 32, 49, 43, 54}, Tout1 = {39, 29, 1, 32, 93, 67, 2, 27, 89}, Tin2 = {}, Tout2 = {})
if state.mapping.size == g2.n_vertices { WORKED 
-----------------isSolution called-------------------

************************NEW ISO FOUND: {(47, 0), (4, 2), (92, 1), (50, 3)}
now the stack.size = 15

-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #0 to check = {}

end of checking all current candidates

pop happened stack.size = 14


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 3 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 47 92 4 2, mapping = {(47, 0), (2, 3), (4, 2), (92, 1)}, depth = 4, cost = 0.0, Tin1 = {55, 37, 1, 32, 43, 100}, Tout1 = {29, 1, 32, 50, 27}, Tin2 = {}, Tout2 = {})
if state.mapping.size == g2.n_vertices { WORKED 
-----------------isSolution called-------------------

************************NEW ISO FOUND: {(47, 0), (2, 3), (4, 2), (92, 1)}
now the stack.size = 14

-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #0 to check = {}

end of checking all current candidates

pop happened stack.size = 13


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 47 29 -1 -1, mapping = {(29, 1), (47, 0)}, depth = 2, cost = 0.0, Tin1 = {55, 37, 1, 32, 4, 54, 10, 3}, Tout1 = {39, 48, 92}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(48, 2), (92, 2), (39, 2)}

-----------------isFeasible called for (39,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (48,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (92,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 12


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 19 -1 -1 -1, mapping = {(19, 0)}, depth = 1, cost = 0.0, Tin1 = {65}, Tout1 = {81, 72, 15}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(15, 1), (72, 1), (81, 1)}

-----------------isFeasible called for (72,1)-------------------
-----------------isFeasible called for (81,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (15,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 14


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 19 15 -1 -1, mapping = {(15, 1), (19, 0)}, depth = 2, cost = 0.0, Tin1 = {23, 65, 38}, Tout1 = {81, 58, 52, 72, 36}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(58, 2), (72, 2), (81, 2), (36, 2), (52, 2)}

-----------------isFeasible called for (81,2)-------------------
-----------------isFeasible called for (52,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (36,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (58,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------isFeasible called for (72,2)-------------------
-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------Rpred called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 13


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 19 72 -1 -1, mapping = {(72, 1), (19, 0)}, depth = 2, cost = 0.0, Tin1 = {12, 24, 65}, Tout1 = {81, 24, 22, 15}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(22, 2), (81, 2), (15, 2), (24, 2)}

-----------------isFeasible called for (22,2)-------------------
-----------------isFeasible called for (15,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (24,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (81,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 12


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 19 81 -1 -1, mapping = {(19, 0), (81, 1)}, depth = 2, cost = 0.0, Tin1 = {65, 101}, Tout1 = {35, 72, 17, 15}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(72, 2), (17, 2), (35, 2), (15, 2)}

-----------------isFeasible called for (17,2)-------------------
-----------------isFeasible called for (15,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (72,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (35,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 11


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 55 -1 -1 -1, mapping = {(55, 0)}, depth = 1, cost = 0.0, Tin1 = {75, 91}, Tout1 = {5, 29, 17, 4}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(17, 1), (29, 1), (5, 1), (4, 1)}

-----------------isFeasible called for (4,1)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (17,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (29,1)-------------------
-----------------Rpred called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (5,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 14


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 55 5 -1 -1, mapping = {(5, 1), (55, 0)}, depth = 2, cost = 0.0, Tin1 = {33, 75, 32, 54, 91}, Tout1 = {29, 7, 17, 4, 44, 87}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(87, 2), (7, 2), (44, 2), (17, 2), (29, 2), (4, 2)}

-----------------isFeasible called for (17,2)-------------------
-----------------isFeasible called for (29,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (4,2)-------------------
-----------------isFeasible called for (87,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (7,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (44,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 13


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 55 29 -1 -1, mapping = {(29, 1), (55, 0)}, depth = 2, cost = 0.0, Tin1 = {75, 47, 54, 10, 91, 3}, Tout1 = {5, 39, 17, 48, 4}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(5, 2), (48, 2), (17, 2), (4, 2), (39, 2)}

-----------------isFeasible called for (17,2)-------------------
-----------------isFeasible called for (4,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (5,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (48,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (39,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 12


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 55 4 -1 -1, mapping = {(55, 0), (4, 1)}, depth = 2, cost = 0.0, Tin1 = {75, 92, 91}, Tout1 = {5, 29, 17, 1, 32, 47}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(5, 2), (47, 2), (32, 2), (17, 2), (29, 2), (1, 2)}

-----------------isFeasible called for (17,2)-------------------
-----------------isFeasible called for (29,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (5,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (1,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (47,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (32,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 11


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 55 17 -1 -1, mapping = {(17, 1), (55, 0)}, depth = 2, cost = 0.0, Tin1 = {81, 75, 67, 91}, Tout1 = {5, 29, 35, 8, 93, 4}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(5, 2), (93, 2), (29, 2), (8, 2), (35, 2), (4, 2)}

-----------------isFeasible called for (93,2)-------------------
-----------------isFeasible called for (29,2)-------------------
-----------------isFeasible called for (4,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (5,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------isFeasible called for (8,2)-------------------
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (35,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 10


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 86 -1 -1 -1, mapping = {(86, 0)}, depth = 1, cost = 0.0, Tin1 = {61, 52, 49}, Tout1 = {51, 61, 25, 99}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(61, 1), (99, 1), (25, 1), (51, 1)}

-----------------isFeasible called for (51,1)-------------------
-----------------isFeasible called for (61,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (99,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (25,1)-------------------
-----------------Rpred called-------------------

-----------------Rout called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 10


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 86 51 -1 -1, mapping = {(86, 0), (51, 1)}, depth = 2, cost = 0.0, Tin1 = {61, 16, 52, 49}, Tout1 = {61, 25, 99, 26, 73, 87}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(73, 2), (87, 2), (26, 2), (61, 2), (25, 2), (99, 2)}

-----------------isFeasible called for (61,2)-------------------
-----------------isFeasible called for (99,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (73,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (25,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (87,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (26,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 9


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 1 -1 -1 -1, mapping = {(1, 0)}, depth = 1, cost = 0.0, Tin1 = {4}, Tout1 = {48, 70, 47}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(47, 1), (48, 1), (70, 1)}

-----------------isFeasible called for (47,1)-------------------
-----------------isFeasible called for (70,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (48,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 11


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 1 48 -1 -1, mapping = {(48, 1), (1, 0)}, depth = 2, cost = 0.0, Tin1 = {29, 4}, Tout1 = {71, 70, 47, 65}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(47, 2), (70, 2), (71, 2), (65, 2)}

-----------------isFeasible called for (70,2)-------------------
-----------------isFeasible called for (47,2)-------------------
-----------------isFeasible called for (71,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (65,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 10


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 1 47 -1 -1, mapping = {(47, 1), (1, 0)}, depth = 2, cost = 0.0, Tin1 = {37, 32, 4}, Tout1 = {29, 48, 70, 92}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(48, 2), (92, 2), (70, 2), (29, 2)}

-----------------isFeasible called for (29,2)-------------------
-----------------isFeasible called for (70,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (48,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (92,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 9


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 1 70 -1 -1, mapping = {(1, 0), (70, 1)}, depth = 2, cost = 0.0, Tin1 = {35, 4, 65}, Tout1 = {84, 71, 90, 48, 47, 14}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(48, 2), (47, 2), (14, 2), (90, 2), (84, 2), (71, 2)}

-----------------isFeasible called for (84,2)-------------------
-----------------isFeasible called for (71,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (48,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (47,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (14,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (90,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 8


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 70 -1 -1 -1, mapping = {(70, 0)}, depth = 1, cost = 0.0, Tin1 = {35, 1, 65}, Tout1 = {84, 71, 90, 14}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(71, 1), (84, 1), (90, 1), (14, 1)}

-----------------isFeasible called for (84,1)-------------------
-----------------isFeasible called for (90,1)-------------------
-----------------isFeasible called for (71,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (14,1)-------------------
-----------------Rpred called-------------------

-----------------Rnew called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 10


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 70 14 -1 -1, mapping = {(70, 0), (14, 1)}, depth = 2, cost = 0.0, Tin1 = {35, 1, 65}, Tout1 = {84, 77, 71, 90}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(90, 2), (77, 2), (84, 2), (71, 2)}

-----------------isFeasible called for (77,2)-------------------
-----------------isFeasible called for (71,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (90,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (84,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 9


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 70 71 -1 -1, mapping = {(71, 1), (70, 0)}, depth = 2, cost = 0.0, Tin1 = {35, 8, 1, 48, 65, 62}, Tout1 = {84, 90, 76, 14, 100}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(90, 2), (14, 2), (76, 2), (100, 2), (84, 2)}

-----------------isFeasible called for (76,2)-------------------
-----------------isFeasible called for (90,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (14,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (100,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (84,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 8


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 70 90 -1 -1, mapping = {(70, 0), (90, 1)}, depth = 2, cost = 0.0, Tin1 = {56, 35, 1, 65, 36}, Tout1 = {84, 71, 24, 46, 0, 73, 14}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #7 to check = {(73, 2), (46, 2), (14, 2), (84, 2), (71, 2), (0, 2), (24, 2)}

-----------------isFeasible called for (84,2)-------------------
-----------------isFeasible called for (24,2)-------------------
-----------------isFeasible called for (71,2)-------------------
-----------------isFeasible called for (73,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (46,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (0,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (14,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 7


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 57 -1 -1 -1, mapping = {(57, 0)}, depth = 1, cost = 0.0, Tin1 = {78, 34, 45, 87}, Tout1 = {79, 54, 42}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(54, 1), (42, 1), (79, 1)}

-----------------isFeasible called for (54,1)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (42,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (79,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 7


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 57 54 -1 -1, mapping = {(57, 0), (54, 1)}, depth = 2, cost = 0.0, Tin1 = {78, 34, 45, 97, 87}, Tout1 = {5, 79, 29, 8, 50, 42}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(5, 2), (79, 2), (29, 2), (8, 2), (42, 2), (50, 2)}

-----------------isFeasible called for (79,2)-------------------
-----------------isFeasible called for (42,2)-------------------
-----------------isFeasible called for (5,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (50,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (29,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (8,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 6


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 82 -1 -1 -1, mapping = {(82, 0)}, depth = 1, cost = 0.0, Tin1 = {62}, Tout1 = {6, 63, 42}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(63, 1), (6, 1), (42, 1)}

-----------------isFeasible called for (42,1)-------------------
-----------------isFeasible called for (63,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (6,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 7


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 82 6 -1 -1, mapping = {(82, 0), (6, 1)}, depth = 2, cost = 0.0, Tin1 = {20, 62, 100}, Tout1 = {46, 23, 63, 42, 74}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(46, 2), (63, 2), (23, 2), (74, 2), (42, 2)}

-----------------isFeasible called for (23,2)-------------------
-----------------isFeasible called for (46,2)-------------------
-----------------isFeasible called for (42,2)-------------------
-----------------isFeasible called for (74,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (63,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 6


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 82 63 -1 -1, mapping = {(82, 0), (63, 1)}, depth = 2, cost = 0.0, Tin1 = {8, 62}, Tout1 = {6, 42, 62}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(62, 2), (42, 2), (6, 2)}

-----------------isFeasible called for (62,2)-------------------
-----------------isFeasible called for (42,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (6,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 6


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 82 63 62 -1, mapping = {(82, 0), (63, 1), (62, 2)}, depth = 3, cost = 0.0, Tin1 = {8, 76}, Tout1 = {71, 32, 6, 42}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(71, 3), (42, 3), (32, 3), (6, 3)}

-----------------isFeasible called for (71,3)-------------------
-----------------isFeasible called for (6,3)-------------------
-----------------isFeasible called for (32,3)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (42,3)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 5


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1, core2 = 100 -1 -1 -1, mapping = {(100, 0)}, depth = 1, cost = 0.0, Tin1 = {71}, Tout1 = {6, 41, 2}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(2, 1), (41, 1), (6, 1)}

-----------------isFeasible called for (41,1)-------------------
-----------------isFeasible called for (2,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (6,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 5


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1, core2 = 100 6 -1 -1, mapping = {(100, 0), (6, 1)}, depth = 2, cost = 0.0, Tin1 = {20, 71, 82}, Tout1 = {46, 23, 41, 2, 74}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(46, 2), (23, 2), (74, 2), (41, 2), (2, 2)}

-----------------isFeasible called for (41,2)-------------------
-----------------isFeasible called for (74,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (23,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (46,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (2,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 4


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 90 -1 -1 -1, mapping = {(90, 0)}, depth = 1, cost = 0.0, Tin1 = {56, 70, 36}, Tout1 = {46, 24, 0, 73}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(73, 1), (24, 1), (46, 1), (0, 1)}

-----------------isFeasible called for (24,1)-------------------
-----------------isFeasible called for (0,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (73,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (46,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 6


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 90 46 -1 -1, mapping = {(90, 0), (46, 1)}, depth = 2, cost = 0.0, Tin1 = {56, 33, 70, 6, 36}, Tout1 = {24, 0, 49, 43, 73}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(73, 2), (43, 2), (0, 2), (49, 2), (24, 2)}

-----------------isFeasible called for (43,2)-------------------
-----------------isFeasible called for (49,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (73,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (24,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (0,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 5


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 90 24 -1 -1, mapping = {(90, 0), (24, 1)}, depth = 2, cost = 0.0, Tin1 = {56, 72, 12, 70, 93, 36}, Tout1 = {33, 72, 46, 0, 73}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(73, 2), (46, 2), (72, 2), (33, 2), (0, 2)}

-----------------isFeasible called for (0,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (33,2)-------------------
-----------------isFeasible called for (73,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (46,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (72,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 4


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 90 0 -1 -1, mapping = {(90, 0), (0, 1)}, depth = 2, cost = 0.0, Tin1 = {56, 77, 70, 36, 97}, Tout1 = {46, 24, 32, 73, 42}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(73, 2), (46, 2), (32, 2), (24, 2), (42, 2)}

-----------------isFeasible called for (24,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (73,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (42,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (46,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (32,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 3


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 29 -1 -1 -1, mapping = {(29, 0)}, depth = 1, cost = 0.0, Tin1 = {55, 47, 54, 10, 3}, Tout1 = {39, 48}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(48, 1), (39, 1)}

-----------------isFeasible called for (48,1)-------------------
-----------------isFeasible called for (39,1)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 3


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 29 48 -1 -1, mapping = {(29, 0), (48, 1)}, depth = 2, cost = 0.0, Tin1 = {55, 1, 47, 54, 10, 3}, Tout1 = {39, 71, 65}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(71, 2), (65, 2), (39, 2)}

-----------------isFeasible called for (71,2)-------------------
-----------------isFeasible called for (39,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (65,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 2


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1, core2 = 97 -1 -1 -1, mapping = {(97, 0)}, depth = 1, cost = 0.0, Tin1 = {94, 33, 75}, Tout1 = {0, 54}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
candidatesOpti has: #2 to check = {(0, 1), (54, 1)}

-----------------isFeasible called for (0,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------isFeasible called for (54,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 3


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1, core2 = 97 54 -1 -1, mapping = {(54, 1), (97, 0)}, depth = 2, cost = 0.0, Tin1 = {94, 33, 75, 57}, Tout1 = {5, 29, 8, 0, 50}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #5 to check = {(5, 2), (29, 2), (8, 2), (0, 2), (50, 2)}

-----------------isFeasible called for (29,2)-------------------
-----------------isFeasible called for (50,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (5,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (8,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (0,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 2


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1, core2 = 97 0 -1 -1, mapping = {(0, 1), (97, 0)}, depth = 2, cost = 0.0, Tin1 = {94, 33, 77, 90, 75}, Tout1 = {32, 54, 42}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(54, 2), (32, 2), (42, 2)}

-----------------isFeasible called for (42,2)-------------------
-----------------isFeasible called for (54,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (32,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 1


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 20 -1 -1 -1, mapping = {(20, 0)}, depth = 1, cost = 0.0, Tin1 = {87}, Tout1 = {6}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
candidatesOpti has: #1 to check = {(6, 1)}

-----------------isFeasible called for (6,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 1


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 20 6 -1 -1, mapping = {(20, 0), (6, 1)}, depth = 2, cost = 0.0, Tin1 = {82, 87, 100}, Tout1 = {46, 23, 74}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(46, 2), (23, 2), (74, 2)}

-----------------isFeasible called for (23,2)-------------------
-----------------isFeasible called for (74,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (46,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 0


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 15 -1 -1 -1, mapping = {(15, 0)}, depth = 1, cost = 0.0, Tin1 = {23, 19, 38}, Tout1 = {58, 52, 36}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
candidatesOpti has: #3 to check = {(58, 1), (52, 1), (36, 1)}

-----------------isFeasible called for (36,1)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (58,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (52,1)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rsucc called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rin called-------------------

-----------------Rout called-------------------

-----------------Rnew called-------------------

-----------------Rout called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------Rnew called-------------------

-----------------RsemanticFeasible called-------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
end of checking all current candidates

pop happened stack.size = 1


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 15 52 -1 -1, mapping = {(15, 0), (52, 1)}, depth = 2, cost = 0.0, Tin1 = {23, 19, 38}, Tout1 = {58, 86, 45, 36, 18, 98}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #6 to check = {(58, 2), (86, 2), (45, 2), (36, 2), (18, 2), (98, 2)}

-----------------isFeasible called for (86,2)-------------------
-----------------isFeasible called for (98,2)-------------------
-----------------isFeasible called for (58,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------isFeasible called for (36,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (45,2)-------------------
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (18,2)-------------------
Feasibility returned FALSE because of Rpred
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

pop happened stack.size = 0


working state now is:(n1 = 103, n2 = 4, D1 = {0..102}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1, core2 = 15 36 -1 -1, mapping = {(15, 0), (36, 1)}, depth = 2, cost = 0.0, Tin1 = {64, 23, 19, 38, 101}, Tout1 = {58, 52, 90, 66}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

HERE 1
HERE 1
HERE 1
HERE 1
candidatesOpti has: #4 to check = {(90, 2), (58, 2), (66, 2), (52, 2)}

-----------------isFeasible called for (66,2)-------------------
-----------------isFeasible called for (52,2)-------------------
-----------------Rpred called-------------------

-----------------isFeasible called for (90,2)-------------------
-----------------Rpred called-------------------

-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------isFeasible called for (58,2)-------------------
-----------------Rpred called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

-----------------getEdgeCount called-------------------

Feasibility returned FALSE because of Rpred
end of checking all current candidates

IsoArrtemp = 71 76 62 37 71 76 62 69 76 62 71 32 76 62 71 82 63 62 82 32 63 62 82 71 62 82 63 6 62 82 63 42 62 71 76 100 4 47 92 29 47 92 4 27 47 92 4 50 47 92 4 2
Subgraph Isomorphism took 3.37955 sec
IsoDistArray = 72 77 63 38 72 77 63 70 77 63 72 33 77 63 72 85 64 63 85 33 64 63 85 72 63 85 64 6 63 85 64 43 63 72 77 104 4 48 95 30 48 95 4 28 48 95 4 51 48 95 4 2
2023-12-04:14:53:37 [SubgraphIsomorphismVF2Msg] subgraphIsomorphismVF2Msg Line 164 INFO [Chapel] Subgraph Isomorphism took 3.37955 sec
2023-12-04:14:53:37 [SubgraphIsomorphismVF2Msg] subgraphIsomorphismVF2Msg Line 165 INFO [Chapel] created id_EXswT9X_427 int64 52 1 (52,) 8
2023-12-04:14:53:37 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_EXswT9X_427 int64 52 1 (52,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:37 [ServerDaemon] run Line 685 INFO [Chapel] <<< subgraphIsomorphismVF2 took 3.3822710514068604 sec
2023-12-04:14:53:37 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after subgraphIsomorphismVF2 command is 0% pct of max memory 14970345062
2023-12-04:14:53:37 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_381, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:37 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_381\"}"]
2023-12-04:14:53:37 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_381", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:37 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014569759368896484 sec
2023-12-04:14:53:37 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:37 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_403, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:37 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_403\"}"]
2023-12-04:14:53:37 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_403", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:37 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015339851379394531 sec
2023-12-04:14:53:37 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:37 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_391, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:37 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_391\"}"]
2023-12-04:14:53:37 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_391", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:37 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015289783477783203 sec
2023-12-04:14:53:37 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:37 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_400, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:37 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_400\"}"]
2023-12-04:14:53:37 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_400", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:37 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016100406646728516 sec
2023-12-04:14:53:37 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:37 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_401, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:37 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_401\"}"]
2023-12-04:14:53:37 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_401", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:37 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016188621520996094 sec
2023-12-04:14:53:37 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:37 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_402, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:37 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_402\"}"]
2023-12-04:14:53:37 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_402", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:37 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015339851379394531 sec
2023-12-04:14:53:37 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:37 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_412, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:37 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_412\"}"]
2023-12-04:14:53:37 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_412", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:37 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.000865936279296875 sec
2023-12-04:14:53:37 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:37 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_421, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:37 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_421\"}"]
2023-12-04:14:53:37 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_421", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:37 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00085616111755371094 sec
2023-12-04:14:53:37 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:37 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_EXswT9X_422, objType = VALUE, dtype = str)], size = 1}
2023-12-04:14:53:37 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_EXswT9X_422\"}"]
2023-12-04:14:53:37 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_EXswT9X_422", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:37 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00099492073059082031 sec
2023-12-04:14:53:37 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-04:14:53:37 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_EXswT9X_427, objType = PDARRAY, dtype = int64), (key = printThresh, val = 100, objType = VALUE, dtype = int64)], size = 2}
2023-12-04:14:53:37 [ServerDaemon] run Line 585 INFO [Chapel] >>> str ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_EXswT9X_427\"}", "{\"key\": \"printThresh\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"100\"}"]
2023-12-04:14:53:37 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"[72 77 63 38 72 77 63 70 77 63 72 33 77 63 72 85 64 63 85 33 64 63 85 72 63 85 64 6 63 85 64 43 63 72 77 104 4 48 95 30 48 95 4 28 48 95 4 51 48 95 4 2]", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-04:14:53:37 [ServerDaemon] run Line 685 INFO [Chapel] <<< str took 0.0017278194427490234 sec
2023-12-04:14:53:37 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after str command is 0% pct of max memory 14970345062
2023-12-04:14:53:37 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [], size = 0}
2023-12-04:14:53:37 [ServerDaemon] run Line 585 INFO [Chapel] >>> shutdown 
2023-12-04:14:53:37 [ServerDaemon] sendShutdownRequest Line 599 INFO [Chapel] <<< shutdown initiated by mohammad took 0.00057196617126464844 sec
2023-12-04:14:53:37 [ServerDaemon] run Line 731 INFO [Chapel] requests = 718 responseCount = 718 elapsed sec = 10
