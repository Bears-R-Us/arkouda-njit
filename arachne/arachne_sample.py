"""Sample Arachne Script

This script provides an example on how a graph is built in Arachne from two Arkouda arrays and then
analyzed using Arachne functions. The graphs are randomly generated by using the ak.randint function
with the range of the vertex names being picked from 0..<n and the number of edges m. No special
distribution is used to generated the graph e.g. RMAT. 

The values of n and m are accepted from command line input. It requires Arkouda and Arachne to both
be pip installed in the environment. 

Assumes Arkouda server is running. It will shutdown the Arkouda server upon completion.

Sample usage: python3 arachne_simple_tests.py n51 5555 -n 5000 -m 20000

"""
import argparse
import time
import arkouda as ak
import arachne as ar
import networkx as nx

def create_parser():
    """Creates the command line parser for this script"""
    script_parser = argparse.ArgumentParser(
        description="Simple script showcasing all the functionality of Arachne on a random graph of\
                     size specified by the user."
    )
    script_parser.add_argument("hostname", help="Hostname of arkouda server")
    script_parser.add_argument("port", type=int, default=5555, help="Port of arkouda server")
    script_parser.add_argument("n", type=int, default=1000, help="Number of vertices for graph")
    script_parser.add_argument("m", type=int, default=2000, help="Number of edges for graph")

    return script_parser

if __name__ == "__main__":
    # Command line parser and extraction.
    parser = create_parser()
    args = parser.parse_args()

    # Connect to the Arkouda server.
    ak.verbose = False
    ak.connect(args.hostname, args.port)

    ### Build graph from randonmly generated source and destination arrays.
    # 1a. Use Arkouda's randint to generate the random edge arrays.
    # src = ak.randint(0, args.n, args.m)
    # dst = ak.randint(0, args.n, args.m)
    # wgt = ak.randint(0, args.n, args.m, dtype=ak.float64)
    src = ak.array([0,1,1,2,3,4,4,5,6,7,7,8,9,9,24])
    dst = ak.array([1,1,1,3,4,5,2,6,7,8,5,9,6,6,24])
    wgt = ak.array([1,1,1,1,1,1,1,1,1,1,1,1,1,1,10])

    print("Building undirected graph...")
    start = time.time()
    graph = ar.Graph()
    graph.add_edges_from(src, dst, wgt)
    end = time.time()
    print(f"Building undirected graph with {graph.n_vertices} vertices and {graph.n_edges} edges "
          f"took {end-start} seconds")
    print()

    ## Run breadth-first search on the input graph.
    start = time.time()
    graph_bfs_layers = ar.bfs_layers(graph, int(graph.edges()[0][6]))
    end = time.time()
    print(f"Running breadth-first search on graph took {end-start} seconds")
    print(graph_bfs_layers)

    graph_bfs_layers_2 = ar.bfs_layers(graph, int(graph.edges()[0][6]))
    print(graph_bfs_layers_2)

    ak.shutdown()
