

**********************************************************************************************
**********************************************************************************************
*                                                                                            *
*                          server listening on tcp://mdindoost:5555                          *
*                            arkouda server version = v2023.10.06                            *
*                              built with chapel version1.32.0                               *
*                                 memory limit = 14970345062                                 *
*                                  bytes of memory used = 0                                  *
*                                                                                            *
**********************************************************************************************
**********************************************************************************************


2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [], size = 0}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> connect 
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"connected to arkouda server tcp://*:5555", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< connect took 0.0010480880737304688 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after connect command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [], size = 0}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> getconfig []
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"{\"arkoudaVersion\":\"v2023.10.06\", \"chplVersion\":\"1.32.0\", \"ZMQVersion\":\"4.3.4\", \"HDF5Version\":\"1.12.2\", \"serverHostname\":\"mdindoost\", \"ServerPort\":5555, \"numLocales\":1, \"numPUs\":4, \"maxTaskPar\":4, \"physicalMemory\":16633716736, \"distributionType\":\"domain(1,int(64),one)\", \"LocaleConfigs\":[{\"id\":0, \"name\":\"mdindoost\", \"numPUs\":4, \"maxTaskPar\":4, \"physicalMemory\":16633716736}], \"authenticate\":false, \"logLevel\":\"INFO\", \"logChannel\":\"CONSOLE\", \"regexMaxCaptures\":20, \"byteorder\":\"little\", \"autoShutdown\":false, \"serverInfoNoSplash\":false}", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< getconfig took 0.0011060237884521484 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after getconfig command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 18, objType = VALUE, dtype = int64), (key = seg_string, val = False, objType = VALUE, dtype = bool)], size = 3}
2023-12-05:10:47:53 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:53 [ServerConfig] overMemLimit Line 315 INFO [Chapel] memory high watermark = 36 memory limit = 14970345062 projected pct memory used of 0%
2023-12-05:10:47:53 [ServerConfig] overMemLimit Line 315 INFO [Chapel] memory high watermark = 144 memory limit = 14970345062 projected pct memory used of 0%
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_1 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.00167083740234375 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = seg_string, val = False, objType = VALUE, dtype = bool), (key = size, val = 18, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 3}
2023-12-05:10:47:53 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_2 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0011379718780517578 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = seg_string, val = False, objType = VALUE, dtype = bool), (key = size, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = float64, objType = VALUE, dtype = str)], size = 3}
2023-12-05:10:47:53 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_3 float64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0011191368103027344 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_r7ETRAC_1", "id_r7ETRAC_2"], objType = LIST, dtype = str), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_1\\\", \\\"id_r7ETRAC_2\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-05:10:47:53 [ServerConfig] overMemLimit Line 315 INFO [Chapel] memory high watermark = 4194808 memory limit = 14970345062 projected pct memory used of 0%
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_5 int64 18 1 (18,) 8+created id_r7ETRAC_6 int64 18 1 (18,) 8+created id_r7ETRAC_7 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.032241106033325195 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_1, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_7, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_1\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_7\"}"]
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_8 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012509822845458984 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_7, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_2, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_2\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_7\"}"]
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_9 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.00121307373046875 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = mode, val = append, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_r7ETRAC_8", "id_r7ETRAC_9"], objType = LIST, dtype = str)], size = 4}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"append\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_8\\\", \\\"id_r7ETRAC_9\\\"]\"}"]
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_10 int64 36 1 (36,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0015130043029785156 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keynames, val = ["id_r7ETRAC_10"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_10\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-05:10:47:53 [ServerConfig] overMemLimit Line 315 INFO [Chapel] memory high watermark = 4195312 memory limit = 14970345062 projected pct memory used of 0%
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_12 int64 36 1 (36,) 8+created id_r7ETRAC_13 int64 7 1 (7,) 8+created id_r7ETRAC_14 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.015434026718139648 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_14, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_10, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_10\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_14\"}"]
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_15 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0016210079193115234 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stop, val = 7, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = start, val = 0, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_16 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0017011165618896484 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_r7ETRAC_12, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = valName, val = id_r7ETRAC_16, objType = VALUE, dtype = str), (key = size, val = 36, objType = VALUE, dtype = int64), (key = permute, val = True, objType = VALUE, dtype = bool), (key = segName, val = id_r7ETRAC_13, objType = VALUE, dtype = str)], size = 6}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_12\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_13\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_16\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"36\"}"]
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_17 int64 36 1 (36,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0020310878753662109 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_17, objType = PDARRAY, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = stop, val = 18, objType = VALUE, dtype = int64), (key = start, val = 0, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> [slice] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_17\"}", "{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"18\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_18 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< [slice] took 0.00804901123046875 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [slice] command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_17, objType = PDARRAY, dtype = int64), (key = start, val = 18, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = stop, val = 36, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> [slice] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_17\"}", "{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"18\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"36\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_19 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< [slice] took 0.011899948120117188 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [slice] command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = keynames, val = ["id_r7ETRAC_18"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = assumeSortedStr, val = True, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_18\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_21 int64 18 1 (18,) 8+created id_r7ETRAC_22 int64 7 1 (7,) 8+created id_r7ETRAC_23 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0033500194549560547 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_18, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_23, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_18\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_23\"}"]
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_24 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0016329288482666016 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = segments, val = id_r7ETRAC_22, objType = PDARRAY, dtype = int64), (key = size, val = 18, objType = VALUE, dtype = int64)], size = 2}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> countReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_22\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"18\"}"]
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_25 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< countReduction took 0.008563995361328125 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after countReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 7, objType = VALUE, dtype = int64)], size = 2}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}"]
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_26 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0016009807586669922 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = val, val = 0, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = array, val = id_r7ETRAC_26, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> set ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_26\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"val\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"0\"}"]
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"set id_r7ETRAC_26 to 0", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< set took 0.0091309547424316406 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after set command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_26, objType = PDARRAY, dtype = int64), (key = value, val = id_r7ETRAC_25, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_24, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray]=pdarray ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_26\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_24\"}", "{\"key\": \"value\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_25\"}"]
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"setPdarrayIndexToPdarrayMsg success", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray]=pdarray took 0.0022699832916259766 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray]=pdarray command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = func, val = cumsum, objType = VALUE, dtype = str), (key = array, val = id_r7ETRAC_26, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:53 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"cumsum\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_26\"}"]
2023-12-05:10:47:53 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_27 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:53 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc took 0.00162506103515625 sec
2023-12-05:10:47:53 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc command is 0% pct of max memory 14970345062
2023-12-05:10:47:53 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 1, objType = VALUE, dtype = int64), (key = seg_string, val = False, objType = VALUE, dtype = bool)], size = 3}
2023-12-05:10:47:53 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_28 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0015709400177001953 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = append, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = names, val = ["id_r7ETRAC_28", "id_r7ETRAC_27"], objType = LIST, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"append\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_28\\\", \\\"id_r7ETRAC_27\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_29 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0018930435180664062 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_27, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_27\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_27", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0013990402221679688 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = AkArrayWeight, val = id_r7ETRAC_3, objType = PDARRAY, dtype = float64), (key = AkArraySrc, val = id_r7ETRAC_18, objType = PDARRAY, dtype = int64), (key = Directed, val = True, objType = VALUE, dtype = bool), (key = NumVertices, val = 7, objType = VALUE, dtype = int64), (key = AkArrayVmap, val = id_r7ETRAC_15, objType = PDARRAY, dtype = int64), (key = AkArrayDst, val = id_r7ETRAC_19, objType = PDARRAY, dtype = int64), (key = Weighted, val = False, objType = VALUE, dtype = bool), (key = NumEdges, val = 18, objType = VALUE, dtype = int64), (key = AkArraySeg, val = id_r7ETRAC_29, objType = PDARRAY, dtype = int64)], size = 9}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> addEdgesFrom ["{\"key\": \"AkArraySrc\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_18\"}", "{\"key\": \"AkArrayDst\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_19\"}", "{\"key\": \"AkArraySeg\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_29\"}", "{\"key\": \"AkArrayWeight\", \"objType\": \"PDARRAY\", \"dtype\": \"float64\", \"val\": \"id_r7ETRAC_3\"}", "{\"key\": \"AkArrayVmap\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_15\"}", "{\"key\": \"Directed\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"Weighted\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"NumVertices\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}", "{\"key\": \"NumEdges\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"18\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"id_r7ETRAC_30", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< addEdgesFrom took 0.0021700859069824219 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after addEdgesFrom command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_9, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_9\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_9", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014219284057617188 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_8, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_8\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0013730525970458984 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_5, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_5\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_5", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0013749599456787109 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_6, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_6\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_6", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0013558864593505859 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_7, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_7\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_7", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0013258457183837891 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_17, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_17\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_17", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0013248920440673828 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_10, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_10\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_10", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014369487762451172 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_12, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_12\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_12", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016949176788330078 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_13, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_13\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_13", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014021396636962891 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_14, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_14\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_14", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015399456024169922 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_16, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_16\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_16", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015530586242675781 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_21, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_21\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_21", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014948844909667969 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_22, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_22\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_22", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010249614715576172 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_23, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_23\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_23", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00095295906066894531 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_24, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_24\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_24", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00097107887268066406 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_25, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_25\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_25", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010230541229248047 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_26, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_26\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_26", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00097393989562988281 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_28, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_28\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_28", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010180473327636719 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_18, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_18\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_18", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010170936584472656 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_19, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_19\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_19", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010380744934082031 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_29, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_29\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_29", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00099205970764160156 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_3, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_3\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_3", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00099682807922363281 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_15, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_15\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_15", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00095605850219726562 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_2, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_2\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_2", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00095605850219726562 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_1, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_1\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010051727294921875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 7, objType = VALUE, dtype = int64), (key = seg_string, val = False, objType = VALUE, dtype = bool)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_31 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0041639804840087891 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = seg_string, val = True, objType = VALUE, dtype = bool), (key = size, val = 49, objType = VALUE, dtype = int64), (key = dtype, val = uint8, objType = VALUE, dtype = str)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_33 int64 7 1 (7,) 8+created id_r7ETRAC_32 uint8 49 1 (49,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0012559890747070312 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_r7ETRAC_32, objType = PDARRAY, dtype = uint8), (key = offsets, val = id_r7ETRAC_33, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> segStr-assemble ["{\"key\": \"offsets\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_33\"}", "{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"uint8\", \"val\": \"id_r7ETRAC_32\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_34 str 7 1 (7,) 1+created bytes.size 49", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< segStr-assemble took 0.0012121200561523438 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segStr-assemble command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_33, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_33\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_33", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010550022125244141 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_32, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_32\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_32", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00098896026611328125 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 7, objType = VALUE, dtype = int64), (key = start, val = 0, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_35 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0012280941009521484 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = seg_string, val = False, objType = VALUE, dtype = bool), (key = size, val = 18, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_36 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0011270046234130859 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = seg_string, val = False, objType = VALUE, dtype = bool), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 18, objType = VALUE, dtype = int64)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_37 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0010979175567626953 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 54, objType = VALUE, dtype = int64), (key = seg_string, val = True, objType = VALUE, dtype = bool), (key = dtype, val = uint8, objType = VALUE, dtype = str)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_39 int64 18 1 (18,) 8+created id_r7ETRAC_38 uint8 54 1 (54,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0012409687042236328 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = offsets, val = id_r7ETRAC_39, objType = PDARRAY, dtype = int64), (key = values, val = id_r7ETRAC_38, objType = PDARRAY, dtype = uint8)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> segStr-assemble ["{\"key\": \"offsets\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_39\"}", "{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"uint8\", \"val\": \"id_r7ETRAC_38\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_40 str 18 1 (18,) 1+created bytes.size 54", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< segStr-assemble took 0.0012099742889404297 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segStr-assemble command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_39, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_39\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_39", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010640621185302734 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_38, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_38\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_38", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00097894668579101562 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stop, val = 18, objType = VALUE, dtype = int64), (key = start, val = 0, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"18\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_41 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0012040138244628906 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 1, objType = VALUE, dtype = int64), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["Strings"], objType = LIST, dtype = str), (key = keynames, val = ["id_r7ETRAC_34"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_34\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"Strings\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_44 int64 7 1 (7,) 8+created id_r7ETRAC_45 int64 1 1 (1,) 8+created id_r7ETRAC_46 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0023779869079589844 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = <U0, objType = VALUE, dtype = <class 'numpy.dtype[str_]'>), (key = subcmd, val = pdarrayIndex, objType = VALUE, dtype = str), (key = obj, val = id_r7ETRAC_34, objType = PDARRAY, dtype = <U0), (key = key, val = id_r7ETRAC_46, objType = PDARRAY, dtype = int64), (key = objType, val = Strings, objType = VALUE, dtype = str)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedIndex ["{\"key\": \"subcmd\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarrayIndex\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"Strings\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"<class 'numpy.dtype[str_]'>\", \"val\": \"<U0\"}", "{\"key\": \"obj\", \"objType\": \"PDARRAY\", \"dtype\": \"<U0\", \"val\": \"id_r7ETRAC_34\"}", "{\"key\": \"key\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_46\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_47 str 1 1 (1,) 1+created bytes.size 7", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedIndex took 0.0021090507507324219 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedIndex command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stop, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = start, val = 0, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_48 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0016620159149169922 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 7, objType = VALUE, dtype = int64), (key = valName, val = id_r7ETRAC_48, objType = VALUE, dtype = str), (key = permName, val = id_r7ETRAC_44, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = segName, val = id_r7ETRAC_45, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_44\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_45\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_48\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_49 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0019669532775878906 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_r7ETRAC_30, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> nodes ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_30\"}"]
2023-12-05:10:47:54 [GraphInfoMsg] nodesMsg Line 102 DEBUG [Chapel] Extracting nodes takes 8e-05
2023-12-05:10:47:54 [GraphInfoMsg] nodesMsg Line 103 DEBUG [Chapel] created id_r7ETRAC_50 int64 7 1 (7,) 8+ 
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_50 int64 7 1 (7,) 8+ ", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< nodes took 0.0020401477813720703 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after nodes command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = pda2, val = id_r7ETRAC_50, objType = PDARRAY, dtype = int64), (key = pda1, val = id_r7ETRAC_31, objType = PDARRAY, dtype = int64), (key = invert, val = False, objType = VALUE, dtype = bool)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> in1d ["{\"key\": \"pda1\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_31\"}", "{\"key\": \"pda2\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_50\"}", "{\"key\": \"invert\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_51 bool 7 1 (7,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< in1d took 0.0017669200897216797 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after in1d command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_51, objType = PDARRAY, dtype = bool), (key = array, val = id_r7ETRAC_31, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_31\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_51\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_52 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0017511844635009766 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_51, objType = PDARRAY, dtype = bool), (key = array, val = id_r7ETRAC_49, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_49\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_51\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_53 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0016961097717285156 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_49, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_49\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_49", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014979839324951172 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = names, val = ["id_r7ETRAC_50", "id_r7ETRAC_52"], objType = LIST, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_50\\\", \\\"id_r7ETRAC_52\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_54 int64 14 1 (14,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0019400119781494141 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stop, val = 7, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = start, val = 0, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_55 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0016810894012451172 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 14, objType = VALUE, dtype = int64), (key = start, val = 7, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"14\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_56 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0016589164733886719 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = names, val = ["id_r7ETRAC_55", "id_r7ETRAC_56"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_55\\\", \\\"id_r7ETRAC_56\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_57 int64 14 1 (14,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0019509792327880859 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_56, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_56\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_56", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00150299072265625 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_55, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_55\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_55", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014309883117675781 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_r7ETRAC_54"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_54\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_59 int64 14 1 (14,) 8+created id_r7ETRAC_60 int64 7 1 (7,) 8+created id_r7ETRAC_61 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.01585698127746582 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_61, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_54, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_54\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_61\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_62 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0016808509826660156 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_r7ETRAC_57, objType = PDARRAY, dtype = int64), (key = value, val = 7, objType = VALUE, dtype = int64), (key = op, val = <, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"<\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_57\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_63 bool 14 1 (14,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0017879009246826172 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_59, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_63, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_63\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_59\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_64 bool 14 1 (14,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0016739368438720703 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = sum, objType = VALUE, dtype = str), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = values, val = id_r7ETRAC_64, objType = PDARRAY, dtype = bool), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = segments, val = id_r7ETRAC_60, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_64\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_60\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"sum\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_65 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.001811981201171875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_64, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_64\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_64", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010759830474853516 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_63, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_63\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_63", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010349750518798828 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_r7ETRAC_65, objType = PDARRAY, dtype = int64), (key = op, val = >, objType = VALUE, dtype = str), (key = value, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_65\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_66 bool 7 1 (7,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0012531280517578125 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_66, objType = PDARRAY, dtype = bool), (key = op, val = any, objType = VALUE, dtype = str)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> reduction ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"any\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_66\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"bool False", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< reduction took 0.0010499954223632812 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after reduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_66, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_66\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_66", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00098395347595214844 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_59, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_57, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_57\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_59\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_67 int64 14 1 (14,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0011620521545410156 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = min, objType = VALUE, dtype = str), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = values, val = id_r7ETRAC_67, objType = PDARRAY, dtype = int64), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = segments, val = id_r7ETRAC_60, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_67\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_60\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"min\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_68 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0015399456024169922 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_67, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_67\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_67", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011060237884521484 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_r7ETRAC_68, objType = PDARRAY, dtype = int64), (key = value, val = 7, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = >=, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_68\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_69 bool 7 1 (7,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0013129711151123047 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = b, val = id_r7ETRAC_68, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = func, val = where, objType = VALUE, dtype = str), (key = scalar, val = -1, objType = VALUE, dtype = str), (key = condition, val = id_r7ETRAC_69, objType = PDARRAY, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc3sv ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"where\"}", "{\"key\": \"condition\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_69\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"scalar\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"-1\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_68\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_70 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc3sv took 0.0014410018920898438 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc3sv command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_69, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_69\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_69", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.000988006591796875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_68, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_68\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_68", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010030269622802734 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 14, objType = VALUE, dtype = int64), (key = valName, val = id_r7ETRAC_70, objType = VALUE, dtype = str), (key = permName, val = id_r7ETRAC_59, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = segName, val = id_r7ETRAC_60, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_59\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_60\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_70\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"14\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_71 int64 14 1 (14,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0014798641204833984 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = value, val = 7, objType = VALUE, dtype = int64), (key = a, val = id_r7ETRAC_57, objType = PDARRAY, dtype = int64), (key = op, val = >=, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_57\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_72 bool 14 1 (14,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0012950897216796875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_72, objType = PDARRAY, dtype = bool), (key = array, val = id_r7ETRAC_71, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_71\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_72\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_73 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012679100036621094 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_72, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_72\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_72", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010249614715576172 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_57, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_57\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_57", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010328292846679688 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_54, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_54\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_54", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010330677032470703 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_62, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_62\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_62", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010359287261962891 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_59, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_59\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_59", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001026153564453125 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_60, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_60\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_60", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010330677032470703 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_61, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_61\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_61", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010459423065185547 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_65, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_65\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_65", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010750293731689453 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_70, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_70\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_70", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010709762573242188 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_71, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_71\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_71", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00099611282348632812 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_52, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_52\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_52", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010290145874023438 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = keynames, val = ["id_r7ETRAC_73", "id_r7ETRAC_53"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_73\\\", \\\"id_r7ETRAC_53\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_75 int64 7 1 (7,) 8+created id_r7ETRAC_76 int64 7 1 (7,) 8+created id_r7ETRAC_77 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0019080638885498047 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_77, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_73, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_73\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_77\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_78 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012919902801513672 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_77, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_53, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_53\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_77\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_79 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.00121307373046875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = Arrays, val = id_r7ETRAC_78 id_r7ETRAC_79 id_r7ETRAC_47, objType = VALUE, dtype = str), (key = GraphName, val = id_r7ETRAC_30, objType = VALUE, dtype = str)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> addNodeLabels ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_30\"}", "{\"key\": \"Arrays\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_78 id_r7ETRAC_79 id_r7ETRAC_47\"}"]
2023-12-05:10:47:54 [DipSLLPropertyGraphMsg] addNodeLabelsMsg Line 107 DEBUG [Chapel] DipSLLaddNodeLabels took 1.3e-05 sec 
2023-12-05:10:47:54 [DipSLLPropertyGraphMsg] addNodeLabelsMsg Line 108 DEBUG [Chapel] labels added
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"labels added", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< addNodeLabels took 0.0014369487762451172 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after addNodeLabels command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_44, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_44\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_44", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010249614715576172 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_45, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_45\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_45", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010049343109130859 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_46, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_46\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_46", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00099802017211914062 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_48, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_48\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_48", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001007080078125 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_47, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_47\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_47", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010530948638916016 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_50, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_50\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_50", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010759830474853516 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_51, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_51\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_51", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00102996826171875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_53, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_53\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_53", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010440349578857422 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_73, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_73\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_73", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010731220245361328 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_79, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_79\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_79", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011970996856689453 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_78, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_78\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_78", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010640621185302734 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_75, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_75\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_75", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00099396705627441406 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_76, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_76\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_76", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010149478912353516 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_77, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_77\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_77", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010459423065185547 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_r7ETRAC_40"], objType = LIST, dtype = str), (key = keytypes, val = ["Strings"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_40\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"Strings\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_82 int64 18 1 (18,) 8+created id_r7ETRAC_83 int64 1 1 (1,) 8+created id_r7ETRAC_84 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0021760463714599609 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = key, val = id_r7ETRAC_84, objType = PDARRAY, dtype = int64), (key = dtype, val = <U0, objType = VALUE, dtype = <class 'numpy.dtype[str_]'>), (key = subcmd, val = pdarrayIndex, objType = VALUE, dtype = str), (key = obj, val = id_r7ETRAC_40, objType = PDARRAY, dtype = <U0), (key = objType, val = Strings, objType = VALUE, dtype = str)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedIndex ["{\"key\": \"subcmd\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarrayIndex\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"Strings\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"<class 'numpy.dtype[str_]'>\", \"val\": \"<U0\"}", "{\"key\": \"obj\", \"objType\": \"PDARRAY\", \"dtype\": \"<U0\", \"val\": \"id_r7ETRAC_40\"}", "{\"key\": \"key\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_84\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_85 str 1 1 (1,) 1+created bytes.size 3", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedIndex took 0.0016400814056396484 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedIndex command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = stop, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_86 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0012650489807128906 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_r7ETRAC_82, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = size, val = 18, objType = VALUE, dtype = int64), (key = valName, val = id_r7ETRAC_86, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool), (key = segName, val = id_r7ETRAC_83, objType = VALUE, dtype = str)], size = 6}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_82\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_83\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_86\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"18\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_87 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0016160011291503906 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_r7ETRAC_30, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> nodes ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_30\"}"]
2023-12-05:10:47:54 [GraphInfoMsg] nodesMsg Line 102 DEBUG [Chapel] Extracting nodes takes 8.4e-05
2023-12-05:10:47:54 [GraphInfoMsg] nodesMsg Line 103 DEBUG [Chapel] created id_r7ETRAC_88 int64 7 1 (7,) 8+ 
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_88 int64 7 1 (7,) 8+ ", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< nodes took 0.0013940334320068359 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after nodes command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = names, val = ["id_r7ETRAC_88", "id_r7ETRAC_36"], objType = LIST, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_88\\\", \\\"id_r7ETRAC_36\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_89 int64 25 1 (25,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0016310214996337891 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 7, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_90 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0013589859008789062 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 7, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 25, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"25\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_91 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0013129711151123047 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = mode, val = interleave, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_r7ETRAC_90", "id_r7ETRAC_91"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_90\\\", \\\"id_r7ETRAC_91\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_92 int64 25 1 (25,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0016229152679443359 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_91, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_91\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_91", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001071929931640625 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_90, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_90\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_90", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010509490966796875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keynames, val = ["id_r7ETRAC_89"], objType = LIST, dtype = str), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_89\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_94 int64 25 1 (25,) 8+created id_r7ETRAC_95 int64 7 1 (7,) 8+created id_r7ETRAC_96 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.015646934509277344 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_89, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_96, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_89\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_96\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_97 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0013420581817626953 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_r7ETRAC_92, objType = PDARRAY, dtype = int64), (key = op, val = <, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = value, val = 7, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"<\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_92\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_98 bool 25 1 (25,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0013589859008789062 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_94, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_98, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_98\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_94\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_99 bool 25 1 (25,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0014159679412841797 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_r7ETRAC_99, objType = PDARRAY, dtype = bool), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = op, val = sum, objType = VALUE, dtype = str), (key = segments, val = id_r7ETRAC_95, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_99\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_95\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"sum\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_100 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0020320415496826172 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_99, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_99\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_99", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015189647674560547 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_98, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_98\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_98", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015180110931396484 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_r7ETRAC_100, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = >, objType = VALUE, dtype = str), (key = value, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_100\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_101 bool 7 1 (7,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0099489688873291016 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = any, objType = VALUE, dtype = str), (key = array, val = id_r7ETRAC_101, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> reduction ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"any\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_101\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"bool False", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< reduction took 0.0016369819641113281 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after reduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_101, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_101\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_101", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016520023345947266 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_92, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_94, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_92\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_94\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_102 int64 25 1 (25,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018179416656494141 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_r7ETRAC_102, objType = PDARRAY, dtype = int64), (key = op, val = min, objType = VALUE, dtype = str), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = segments, val = id_r7ETRAC_95, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_102\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_95\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"min\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_103 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0021169185638427734 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_102, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_102\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_102", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016651153564453125 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = value, val = 7, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = >=, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_103, objType = PDARRAY, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_103\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_104 bool 7 1 (7,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0031800270080566406 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = b, val = id_r7ETRAC_103, objType = PDARRAY, dtype = int64), (key = scalar, val = -1, objType = VALUE, dtype = str), (key = func, val = where, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = condition, val = id_r7ETRAC_104, objType = PDARRAY, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc3sv ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"where\"}", "{\"key\": \"condition\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_104\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"scalar\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"-1\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_103\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_105 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc3sv took 0.0020771026611328125 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc3sv command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_104, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_104\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_104", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016210079193115234 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_103, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_103\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_103", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016129016876220703 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_r7ETRAC_94, objType = VALUE, dtype = str), (key = size, val = 25, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = valName, val = id_r7ETRAC_105, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool), (key = segName, val = id_r7ETRAC_95, objType = VALUE, dtype = str)], size = 6}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_94\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_95\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_105\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"25\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_106 int64 25 1 (25,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0021190643310546875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_r7ETRAC_92, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = >=, objType = VALUE, dtype = str), (key = value, val = 7, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_92\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_107 bool 25 1 (25,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0019059181213378906 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_106, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_107, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_106\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_107\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_108 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0058650970458984375 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_107, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_107\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_107", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016620159149169922 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_92, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_92\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_92", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016038417816162109 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_89, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_89\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_89", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016469955444335938 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_97, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_97\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_97", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016150474548339844 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_94, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_94\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_94", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015971660614013672 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_95, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_95\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_95", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015850067138671875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_96, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_96\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_96", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015201568603515625 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_100, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_100\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_100", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015649795532226562 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_105, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_105\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_105", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015249252319335938 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_106, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_106\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_106", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015909671783447266 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = names, val = ["id_r7ETRAC_88", "id_r7ETRAC_37"], objType = LIST, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_88\\\", \\\"id_r7ETRAC_37\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_109 int64 25 1 (25,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0066809654235839844 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 7, objType = VALUE, dtype = int64), (key = start, val = 0, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_110 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0017290115356445312 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stop, val = 25, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = start, val = 7, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"25\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_111 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0017130374908447266 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = names, val = ["id_r7ETRAC_110", "id_r7ETRAC_111"], objType = LIST, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_110\\\", \\\"id_r7ETRAC_111\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_112 int64 25 1 (25,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0020298957824707031 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_111, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_111\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_111", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015730857849121094 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_110, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_110\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_110", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016520023345947266 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_r7ETRAC_109"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_109\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_114 int64 25 1 (25,) 8+created id_r7ETRAC_115 int64 7 1 (7,) 8+created id_r7ETRAC_116 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.015930891036987305 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_109, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_116, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_109\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_116\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_117 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0017600059509277344 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = <, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_112, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = value, val = 7, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"<\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_112\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_118 bool 25 1 (25,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.001750946044921875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_118, objType = PDARRAY, dtype = bool), (key = idx, val = id_r7ETRAC_114, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_118\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_114\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_119 bool 25 1 (25,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0016009807586669922 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_r7ETRAC_119, objType = PDARRAY, dtype = bool), (key = op, val = sum, objType = VALUE, dtype = str), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = segments, val = id_r7ETRAC_115, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_119\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_115\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"sum\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_120 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.00191497802734375 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_119, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_119\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_119", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014948844909667969 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_118, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_118\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_118", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014810562133789062 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_120, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = value, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_120\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_121 bool 7 1 (7,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0016939640045166016 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = any, objType = VALUE, dtype = str), (key = array, val = id_r7ETRAC_121, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> reduction ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"any\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_121\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"bool False", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< reduction took 0.0014500617980957031 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after reduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_121, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_121\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_121", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014619827270507812 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_112, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_114, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_112\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_114\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_122 int64 25 1 (25,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0016129016876220703 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_r7ETRAC_122, objType = PDARRAY, dtype = int64), (key = op, val = min, objType = VALUE, dtype = str), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = segments, val = id_r7ETRAC_115, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_122\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_115\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"min\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_123 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0019929409027099609 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_122, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_122\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_122", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015430450439453125 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >=, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_123, objType = PDARRAY, dtype = int64), (key = value, val = 7, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_123\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_124 bool 7 1 (7,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.00177001953125 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = b, val = id_r7ETRAC_123, objType = PDARRAY, dtype = int64), (key = func, val = where, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = scalar, val = -1, objType = VALUE, dtype = str), (key = condition, val = id_r7ETRAC_124, objType = PDARRAY, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc3sv ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"where\"}", "{\"key\": \"condition\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_124\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"scalar\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"-1\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_123\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_125 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc3sv took 0.0019640922546386719 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc3sv command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_124, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_124\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_124", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015881061553955078 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_123, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_123\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_123", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015680789947509766 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_r7ETRAC_114, objType = VALUE, dtype = str), (key = size, val = 25, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = valName, val = id_r7ETRAC_125, objType = VALUE, dtype = str), (key = segName, val = id_r7ETRAC_115, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_114\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_115\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_125\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"25\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_126 int64 25 1 (25,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0020558834075927734 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >=, objType = VALUE, dtype = str), (key = value, val = 7, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_112, objType = PDARRAY, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_112\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_127 bool 25 1 (25,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0018379688262939453 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_126, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_127, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_126\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_127\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_128 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018019676208496094 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_127, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_127\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_127", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015618801116943359 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_112, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_112\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_112", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015749931335449219 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_109, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_109\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_109", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014979839324951172 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_117, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_117\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_117", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015490055084228516 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_114, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_114\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_114", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015299320220947266 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_115, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_115\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_115", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015280246734619141 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_116, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_116\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_116", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015280246734619141 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_120, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_120\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_120", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015130043029785156 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_125, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_125\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_125", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015320777893066406 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_126, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_126\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_126", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016648769378662109 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_r7ETRAC_30, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> edges ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_30\"}"]
2023-12-05:10:47:54 [GraphInfoMsg] edgesMsg Line 65 DEBUG [Chapel] Extracting edges takes 0.000149
2023-12-05:10:47:54 [GraphInfoMsg] edgesMsg Line 66 DEBUG [Chapel] created id_r7ETRAC_129 int64 18 1 (18,) 8+ created id_r7ETRAC_130 int64 18 1 (18,) 8
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_129 int64 18 1 (18,) 8+ created id_r7ETRAC_130 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< edges took 0.0021700859069824219 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after edges command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_r7ETRAC_108", "id_r7ETRAC_128"], objType = LIST, dtype = str), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool), (key = nstr, val = 2, objType = VALUE, dtype = int64)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_108\\\", \\\"id_r7ETRAC_128\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_132 int64 18 1 (18,) 8+created id_r7ETRAC_133 int64 18 1 (18,) 8+created id_r7ETRAC_134 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.032263994216918945 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_108, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_134, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_108\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_134\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_135 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.001667022705078125 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_128, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_134, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_128\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_134\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_136 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0016140937805175781 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = keynames, val = ["id_r7ETRAC_129", "id_r7ETRAC_130"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_129\\\", \\\"id_r7ETRAC_130\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_138 int64 18 1 (18,) 8+created id_r7ETRAC_139 int64 18 1 (18,) 8+created id_r7ETRAC_140 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0018069744110107422 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_129, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_140, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_129\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_140\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_141 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0011429786682128906 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_130, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_140, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_130\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_140\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_142 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0010890960693359375 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = bool, objType = VALUE, dtype = str), (key = size, val = 18, objType = VALUE, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"bool\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"18\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_143 bool 18 1 (18,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0011019706726074219 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = val, val = True, objType = VALUE, dtype = str), (key = dtype, val = bool, objType = VALUE, dtype = str), (key = array, val = id_r7ETRAC_143, objType = PDARRAY, dtype = bool)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> set ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_143\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"bool\"}", "{\"key\": \"val\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"True\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"set id_r7ETRAC_143 to true", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< set took 0.0010390281677246094 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after set command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = bool, objType = VALUE, dtype = str), (key = size, val = 18, objType = VALUE, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"bool\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"18\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_144 bool 18 1 (18,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0011141300201416016 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_r7ETRAC_143", "id_r7ETRAC_144"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_143\\\", \\\"id_r7ETRAC_144\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_145 bool 36 1 (36,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0010919570922851562 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_144, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_144\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_144", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011010169982910156 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_143, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_143\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_143", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00098896026611328125 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = names, val = ["id_r7ETRAC_135", "id_r7ETRAC_141"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_135\\\", \\\"id_r7ETRAC_141\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_146 int64 36 1 (36,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.00164794921875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = names, val = ["id_r7ETRAC_136", "id_r7ETRAC_142"], objType = LIST, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_136\\\", \\\"id_r7ETRAC_142\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_147 int64 36 1 (36,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0016050338745117188 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_r7ETRAC_146", "id_r7ETRAC_147"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_146\\\", \\\"id_r7ETRAC_147\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_149 int64 36 1 (36,) 8+created id_r7ETRAC_150 int64 18 1 (18,) 8+created id_r7ETRAC_151 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.02812504768371582 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_151, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_146, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_146\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_151\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_152 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0013298988342285156 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_151, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_147, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_147\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_151\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_153 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0013039112091064453 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 36, objType = VALUE, dtype = int64), (key = segments, val = id_r7ETRAC_150, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> countReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_150\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"36\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_154 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< countReduction took 0.0012071132659912109 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after countReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_r7ETRAC_154, objType = PDARRAY, dtype = int64), (key = op, val = ==, objType = VALUE, dtype = str), (key = value, val = 2, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"==\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_154\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_155 bool 18 1 (18,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0017690658569335938 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = valName, val = id_r7ETRAC_155, objType = VALUE, dtype = str), (key = size, val = 36, objType = VALUE, dtype = int64), (key = permName, val = id_r7ETRAC_149, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = segName, val = id_r7ETRAC_150, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_149\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_150\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_155\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"36\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_156 bool 36 1 (36,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0019910335540771484 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_155, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_155\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_155", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014078617095947266 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_145, objType = PDARRAY, dtype = bool), (key = array, val = id_r7ETRAC_156, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_156\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_145\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_157 bool 18 1 (18,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0016629695892333984 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = valName, val = id_r7ETRAC_157, objType = VALUE, dtype = str), (key = permName, val = id_r7ETRAC_132, objType = VALUE, dtype = str), (key = size, val = 18, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = segName, val = id_r7ETRAC_133, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_132\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_133\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_157\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"18\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_158 bool 18 1 (18,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0019280910491943359 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_157, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_157\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_157", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015010833740234375 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_132, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_132\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_132", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014910697937011719 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_133, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_133\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_133", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015089511871337891 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_134, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_134\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_134", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015079975128173828 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_136, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_136\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_136", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014920234680175781 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_135, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_135\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_135", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00150299072265625 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_138, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_138\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_138", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014829635620117188 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_139, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_139\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_139", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001071929931640625 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_140, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_140\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_140", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010418891906738281 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_142, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_142\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_142", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010280609130859375 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_141, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_141\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_141", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010700225830078125 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_145, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_145\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_145", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010199546813964844 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_147, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_147\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_147", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00102996826171875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_146, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_146\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_146", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010399818420410156 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_149, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_149\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_149", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010149478912353516 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_150, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_150\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_150", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001071929931640625 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_151, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_151\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_151", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010759830474853516 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_153, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_153\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_153", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010669231414794922 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_152, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_152\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_152", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010690689086914062 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_154, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_154\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_154", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010850429534912109 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_156, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_156\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_156", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010569095611572266 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_158, objType = PDARRAY, dtype = bool), (key = array, val = id_r7ETRAC_108, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_108\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_158\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_159 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0013101100921630859 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_108, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_108\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_108", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010399818420410156 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_128, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_158, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_128\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_158\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_160 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012679100036621094 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_128, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_128\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_128", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010609626770019531 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_158, objType = PDARRAY, dtype = bool), (key = array, val = id_r7ETRAC_87, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_87\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_158\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_161 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012459754943847656 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_87, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_87\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_87", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001049041748046875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 3, objType = VALUE, dtype = int64), (key = keytypes, val = ["pdarray", "pdarray", "pdarray"], objType = LIST, dtype = str), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_r7ETRAC_159", "id_r7ETRAC_160", "id_r7ETRAC_161"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"3\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_159\\\", \\\"id_r7ETRAC_160\\\", \\\"id_r7ETRAC_161\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_163 int64 18 1 (18,) 8+created id_r7ETRAC_164 int64 18 1 (18,) 8+created id_r7ETRAC_165 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.028048038482666016 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_165, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_159, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_159\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_165\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_166 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0013380050659179688 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_165, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_160, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_160\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_165\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_167 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012340545654296875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_161, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_165, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_161\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_165\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_168 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012381076812744141 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_r7ETRAC_129", "id_r7ETRAC_166"], objType = LIST, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_129\\\", \\\"id_r7ETRAC_166\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_169 int64 36 1 (36,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0015130043029785156 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_r7ETRAC_130", "id_r7ETRAC_167"], objType = LIST, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_130\\\", \\\"id_r7ETRAC_167\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_170 int64 36 1 (36,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0015959739685058594 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stop, val = 18, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = start, val = 0, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"18\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_171 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0012559890747070312 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stop, val = 36, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = start, val = 18, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"18\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"36\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_172 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0011930465698242188 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = names, val = ["id_r7ETRAC_171", "id_r7ETRAC_172"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_171\\\", \\\"id_r7ETRAC_172\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_173 int64 36 1 (36,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0014920234680175781 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_172, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_172\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_172", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010728836059570312 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_171, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_171\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_171", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00099301338195800781 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_r7ETRAC_169", "id_r7ETRAC_170"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_169\\\", \\\"id_r7ETRAC_170\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_175 int64 36 1 (36,) 8+created id_r7ETRAC_176 int64 18 1 (18,) 8+created id_r7ETRAC_177 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.027749061584472656 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_169, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_177, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_169\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_177\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_178 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012609958648681641 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_170, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_177, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_170\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_177\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_179 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012280941009521484 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = <, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_173, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = value, val = 18, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"<\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_173\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"18\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_180 bool 36 1 (36,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0012910366058349609 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_180, objType = PDARRAY, dtype = bool), (key = idx, val = id_r7ETRAC_175, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_180\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_175\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_181 bool 36 1 (36,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012199878692626953 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_r7ETRAC_181, objType = PDARRAY, dtype = bool), (key = op, val = sum, objType = VALUE, dtype = str), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = segments, val = id_r7ETRAC_176, objType = PDARRAY, dtype = int64), (key = skip_nan, val = True, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_181\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_176\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"sum\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_182 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0029840469360351562 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_181, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_181\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_181", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010340213775634766 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_180, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_180\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_180", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00099301338195800781 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_182, objType = PDARRAY, dtype = int64), (key = value, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_182\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_183 bool 18 1 (18,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0012569427490234375 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = any, objType = VALUE, dtype = str), (key = array, val = id_r7ETRAC_183, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> reduction ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"any\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_183\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"bool False", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< reduction took 0.0010499954223632812 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after reduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_183, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_183\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_183", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001049041748046875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_173, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_175, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_173\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_175\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_184 int64 36 1 (36,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012099742889404297 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_r7ETRAC_184, objType = PDARRAY, dtype = int64), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = op, val = min, objType = VALUE, dtype = str), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = segments, val = id_r7ETRAC_176, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_184\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_176\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"min\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_185 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0014770030975341797 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_184, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_184\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_184", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001071929931640625 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >=, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_185, objType = PDARRAY, dtype = int64), (key = value, val = 18, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_185\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"18\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_186 bool 18 1 (18,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0013179779052734375 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = func, val = where, objType = VALUE, dtype = str), (key = b, val = id_r7ETRAC_185, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = scalar, val = -1, objType = VALUE, dtype = str), (key = condition, val = id_r7ETRAC_186, objType = PDARRAY, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc3sv ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"where\"}", "{\"key\": \"condition\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_186\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"scalar\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"-1\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_185\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_187 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc3sv took 0.0015211105346679688 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc3sv command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_186, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_186\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_186", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010888576507568359 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_185, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_185\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_185", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010459423065185547 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = valName, val = id_r7ETRAC_187, objType = VALUE, dtype = str), (key = permName, val = id_r7ETRAC_175, objType = VALUE, dtype = str), (key = size, val = 36, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = segName, val = id_r7ETRAC_176, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_175\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_176\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_187\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"36\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_188 int64 36 1 (36,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0015718936920166016 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >=, objType = VALUE, dtype = str), (key = value, val = 18, objType = VALUE, dtype = int64), (key = a, val = id_r7ETRAC_173, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_173\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"18\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_189 bool 36 1 (36,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0013558864593505859 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_188, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_189, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_188\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_189\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_190 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.011507987976074219 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_189, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_189\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_189", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010809898376464844 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_173, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_173\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_173", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010130405426025391 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_170, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_170\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_170", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010409355163574219 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_169, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_169\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_169", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010080337524414062 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_179, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_179\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_179", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010750293731689453 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_178, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_178\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_178", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010468959808349609 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_175, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_175\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_175", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001068115234375 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_176, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_176\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_176", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001071929931640625 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_177, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_177\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_177", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010728836059570312 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_182, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_182\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_182", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010230541229248047 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_187, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_187\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_187", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010430812835693359 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_188, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_188\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_188", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011460781097412109 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_r7ETRAC_30, objType = VALUE, dtype = str), (key = Arrays, val = id_r7ETRAC_190 id_r7ETRAC_168 id_r7ETRAC_85, objType = VALUE, dtype = str)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> addEdgeRelationships ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_30\"}", "{\"key\": \"Arrays\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_190 id_r7ETRAC_168 id_r7ETRAC_85\"}"]
2023-12-05:10:47:54 [DipSLLPropertyGraphMsg] addEdgeRelationshipsMsg Line 368 DEBUG [Chapel] DipSLLaddEdgeRelationships took 0.000256 sec
2023-12-05:10:47:54 [DipSLLPropertyGraphMsg] addEdgeRelationshipsMsg Line 369 DEBUG [Chapel] edge relationships added
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"edge relationships added", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< addEdgeRelationships took 0.0028359889984130859 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after addEdgeRelationships command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_82, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_82\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_82", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010359287261962891 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_83, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_83\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_83", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010120868682861328 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_84, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_84\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_84", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00097703933715820312 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_86, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_86\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_86", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010230541229248047 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_85, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_85\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_85", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010230541229248047 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_88, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_88\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_88", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010499954223632812 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_130, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_130\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_130", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001007080078125 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_129, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_129\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_129", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010349750518798828 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_158, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_158\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_158", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010540485382080078 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_161, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_161\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_161", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010230541229248047 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_160, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_160\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_160", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001010894775390625 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_159, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_159\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_159", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010449886322021484 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_168, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_168\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_168", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010640621185302734 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_167, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_167\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_167", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011830329895019531 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_166, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_166\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_166", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011670589447021484 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_163, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_163\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_163", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010979175567626953 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_164, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_164\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_164", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011310577392578125 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_165, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_165\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_165", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012180805206298828 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_190, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_190\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_190", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010731220245361328 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 4, objType = VALUE, dtype = int64), (key = seg_string, val = False, objType = VALUE, dtype = bool)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_191 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0012319087982177734 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 4, objType = VALUE, dtype = int64), (key = seg_string, val = False, objType = VALUE, dtype = bool), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_192 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0021100044250488281 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = float64, objType = VALUE, dtype = str), (key = seg_string, val = False, objType = VALUE, dtype = bool), (key = size, val = 1, objType = VALUE, dtype = int64)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_193 float64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0016539096832275391 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_r7ETRAC_191", "id_r7ETRAC_192"], objType = LIST, dtype = str), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_191\\\", \\\"id_r7ETRAC_192\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_195 int64 4 1 (4,) 8+created id_r7ETRAC_196 int64 4 1 (4,) 8+created id_r7ETRAC_197 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.031172037124633789 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_191, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_197, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_191\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_197\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_198 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.00156402587890625 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_192, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_197, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_192\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_197\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_199 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0015580654144287109 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = mode, val = append, objType = VALUE, dtype = str), (key = names, val = ["id_r7ETRAC_198", "id_r7ETRAC_199"], objType = LIST, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"append\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_198\\\", \\\"id_r7ETRAC_199\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_200 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0032269954681396484 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keynames, val = ["id_r7ETRAC_200"], objType = LIST, dtype = str), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_200\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_202 int64 8 1 (8,) 8+created id_r7ETRAC_203 int64 4 1 (4,) 8+created id_r7ETRAC_204 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.017823934555053711 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_200, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_204, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_200\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_204\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_205 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.003192901611328125 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_206 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0034329891204833984 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_r7ETRAC_202, objType = VALUE, dtype = str), (key = valName, val = id_r7ETRAC_206, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = size, val = 8, objType = VALUE, dtype = int64), (key = permute, val = True, objType = VALUE, dtype = bool), (key = segName, val = id_r7ETRAC_203, objType = VALUE, dtype = str)], size = 6}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_202\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_203\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_206\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_207 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0032429695129394531 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = stop, val = 4, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = array, val = id_r7ETRAC_207, objType = PDARRAY, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [slice] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_207\"}", "{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_208 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [slice] took 0.0021610260009765625 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [slice] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 4, objType = VALUE, dtype = int64), (key = array, val = id_r7ETRAC_207, objType = PDARRAY, dtype = int64), (key = stop, val = 8, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [slice] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_207\"}", "{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_209 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [slice] took 0.0040850639343261719 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [slice] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = keynames, val = ["id_r7ETRAC_208"], objType = LIST, dtype = str), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = True, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_208\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_211 int64 4 1 (4,) 8+created id_r7ETRAC_212 int64 3 1 (3,) 8+created id_r7ETRAC_213 int64 3 1 (3,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.00421905517578125 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_208, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_213, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_208\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_213\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_214 int64 3 1 (3,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0022990703582763672 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 4, objType = VALUE, dtype = int64), (key = segments, val = id_r7ETRAC_212, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> countReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_212\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_215 int64 3 1 (3,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< countReduction took 0.0024819374084472656 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after countReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 4, objType = VALUE, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_216 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.002655029296875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = val, val = 0, objType = VALUE, dtype = str), (key = array, val = id_r7ETRAC_216, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> set ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_216\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"val\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"0\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"set id_r7ETRAC_216 to 0", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< set took 0.0022790431976318359 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after set command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = value, val = id_r7ETRAC_215, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_216, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_214, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray]=pdarray ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_216\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_214\"}", "{\"key\": \"value\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_215\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"setPdarrayIndexToPdarrayMsg success", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray]=pdarray took 0.002079010009765625 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray]=pdarray command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = func, val = cumsum, objType = VALUE, dtype = str), (key = array, val = id_r7ETRAC_216, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"cumsum\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_216\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_217 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc took 0.0023860931396484375 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = seg_string, val = False, objType = VALUE, dtype = bool), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 1, objType = VALUE, dtype = int64)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_218 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0026021003723144531 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = mode, val = append, objType = VALUE, dtype = str), (key = names, val = ["id_r7ETRAC_218", "id_r7ETRAC_217"], objType = LIST, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"append\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_218\\\", \\\"id_r7ETRAC_217\\\"]\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_219 int64 5 1 (5,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0021440982818603516 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_217, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_217\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_217", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0028929710388183594 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = AkArraySrc, val = id_r7ETRAC_208, objType = PDARRAY, dtype = int64), (key = AkArrayWeight, val = id_r7ETRAC_193, objType = PDARRAY, dtype = float64), (key = NumVertices, val = 4, objType = VALUE, dtype = int64), (key = Directed, val = True, objType = VALUE, dtype = bool), (key = AkArrayVmap, val = id_r7ETRAC_205, objType = PDARRAY, dtype = int64), (key = AkArrayDst, val = id_r7ETRAC_209, objType = PDARRAY, dtype = int64), (key = Weighted, val = False, objType = VALUE, dtype = bool), (key = NumEdges, val = 4, objType = VALUE, dtype = int64), (key = AkArraySeg, val = id_r7ETRAC_219, objType = PDARRAY, dtype = int64)], size = 9}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> addEdgesFrom ["{\"key\": \"AkArraySrc\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_208\"}", "{\"key\": \"AkArrayDst\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_209\"}", "{\"key\": \"AkArraySeg\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_219\"}", "{\"key\": \"AkArrayWeight\", \"objType\": \"PDARRAY\", \"dtype\": \"float64\", \"val\": \"id_r7ETRAC_193\"}", "{\"key\": \"AkArrayVmap\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_205\"}", "{\"key\": \"Directed\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"Weighted\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"NumVertices\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"NumEdges\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"id_r7ETRAC_220", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< addEdgesFrom took 0.0029370784759521484 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after addEdgesFrom command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_199, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_199\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_199", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0018069744110107422 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_198, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_198\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_198", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0018820762634277344 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_195, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_195\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_195", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0017349720001220703 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_196, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_196\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_196", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015931129455566406 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_197, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_197\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_197", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00150299072265625 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_207, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_207\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_207", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0018639564514160156 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_200, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_200\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_200", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0019829273223876953 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_202, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_202\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_202", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0018720626831054688 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_203, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_203\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_203", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0018110275268554688 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_204, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_204\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_204", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0017659664154052734 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_206, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_206\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_206", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011708736419677734 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_211, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_211\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_211", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010769367218017578 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_212, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_212\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_212", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011379718780517578 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_213, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_213\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_213", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010609626770019531 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_214, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_214\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_214", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0013520717620849609 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_215, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_215\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_215", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014379024505615234 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_216, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_216\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_216", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015320777893066406 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_218, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_218\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_218", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012569427490234375 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_208, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_208\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_208", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012478828430175781 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_209, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_209\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_209", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012590885162353516 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_219, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_219\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_219", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00096392631530761719 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_193, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_193\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_193", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010190010070800781 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_205, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_205\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_205", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010650157928466797 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = seg_string, val = False, objType = VALUE, dtype = bool), (key = size, val = 4, objType = VALUE, dtype = int64)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_221 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0047271251678466797 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = uint8, objType = VALUE, dtype = str), (key = size, val = 28, objType = VALUE, dtype = int64), (key = seg_string, val = True, objType = VALUE, dtype = bool)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_223 int64 4 1 (4,) 8+created id_r7ETRAC_222 uint8 28 1 (28,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0015099048614501953 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_r7ETRAC_222, objType = PDARRAY, dtype = uint8), (key = offsets, val = id_r7ETRAC_223, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> segStr-assemble ["{\"key\": \"offsets\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_223\"}", "{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"uint8\", \"val\": \"id_r7ETRAC_222\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_224 str 4 1 (4,) 1+created bytes.size 28", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< segStr-assemble took 0.0013759136199951172 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segStr-assemble command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_223, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_223\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_223", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00102996826171875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_222, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_222\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_222", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00099492073059082031 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stride, val = 1, objType = VALUE, dtype = int64), (key = start, val = 0, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_225 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0011820793151855469 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_31, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_31\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_31", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010941028594970703 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_34, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_34\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_34", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00066709518432617188 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_35, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_35\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_35", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00066208839416503906 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 4, objType = VALUE, dtype = int64), (key = seg_string, val = False, objType = VALUE, dtype = bool)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_226 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0011179447174072266 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = seg_string, val = False, objType = VALUE, dtype = bool)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_227 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0012798309326171875 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = seg_string, val = True, objType = VALUE, dtype = bool), (key = size, val = 12, objType = VALUE, dtype = int64), (key = dtype, val = uint8, objType = VALUE, dtype = str)], size = 3}
2023-12-05:10:47:54 [ServerDaemon] run Line 588 INFO [Chapel] >>> array [binary data]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_229 int64 4 1 (4,) 8+created id_r7ETRAC_228 uint8 12 1 (12,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< array took 0.0013740062713623047 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after array command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = offsets, val = id_r7ETRAC_229, objType = PDARRAY, dtype = int64), (key = values, val = id_r7ETRAC_228, objType = PDARRAY, dtype = uint8)], size = 2}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> segStr-assemble ["{\"key\": \"offsets\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_229\"}", "{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"uint8\", \"val\": \"id_r7ETRAC_228\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_230 str 4 1 (4,) 1+created bytes.size 12", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< segStr-assemble took 0.0017459392547607422 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segStr-assemble command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_229, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_229\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_229", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015079975128173828 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:54 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_228, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:54 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_228\"}"]
2023-12-05:10:47:54 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_228", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:54 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016639232635498047 sec
2023-12-05:10:47:54 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stride, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = start, val = 0, objType = VALUE, dtype = int64), (key = stop, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_231 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0018949508666992188 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_36, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_36\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_36", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0017850399017333984 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_37, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_37\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_37", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016300678253173828 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_40, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_40\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_40", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016720294952392578 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_41, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_41\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_41", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00098395347595214844 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_r7ETRAC_224"], objType = LIST, dtype = str), (key = keytypes, val = ["Strings"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool), (key = nstr, val = 1, objType = VALUE, dtype = int64)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_224\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"Strings\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_234 int64 4 1 (4,) 8+created id_r7ETRAC_235 int64 1 1 (1,) 8+created id_r7ETRAC_236 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0016400814056396484 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = key, val = id_r7ETRAC_236, objType = PDARRAY, dtype = int64), (key = subcmd, val = pdarrayIndex, objType = VALUE, dtype = str), (key = dtype, val = <U0, objType = VALUE, dtype = <class 'numpy.dtype[str_]'>), (key = objType, val = Strings, objType = VALUE, dtype = str), (key = obj, val = id_r7ETRAC_224, objType = PDARRAY, dtype = <U0)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedIndex ["{\"key\": \"subcmd\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarrayIndex\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"Strings\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"<class 'numpy.dtype[str_]'>\", \"val\": \"<U0\"}", "{\"key\": \"obj\", \"objType\": \"PDARRAY\", \"dtype\": \"<U0\", \"val\": \"id_r7ETRAC_224\"}", "{\"key\": \"key\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_236\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_237 str 1 1 (1,) 1+created bytes.size 7", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedIndex took 0.0027139186859130859 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedIndex command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = start, val = 0, objType = VALUE, dtype = int64), (key = stop, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_238 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0026679039001464844 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_r7ETRAC_234, objType = VALUE, dtype = str), (key = size, val = 4, objType = VALUE, dtype = int64), (key = valName, val = id_r7ETRAC_238, objType = VALUE, dtype = str), (key = segName, val = id_r7ETRAC_235, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_234\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_235\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_238\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_239 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.005413055419921875 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_r7ETRAC_220, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> nodes ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_220\"}"]
2023-12-05:10:47:55 [GraphInfoMsg] nodesMsg Line 102 DEBUG [Chapel] Extracting nodes takes 0.000103
2023-12-05:10:47:55 [GraphInfoMsg] nodesMsg Line 103 DEBUG [Chapel] created id_r7ETRAC_240 int64 4 1 (4,) 8+ 
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_240 int64 4 1 (4,) 8+ ", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< nodes took 0.0015749931335449219 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after nodes command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = pda1, val = id_r7ETRAC_221, objType = PDARRAY, dtype = int64), (key = pda2, val = id_r7ETRAC_240, objType = PDARRAY, dtype = int64), (key = invert, val = False, objType = VALUE, dtype = bool)], size = 3}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> in1d ["{\"key\": \"pda1\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_221\"}", "{\"key\": \"pda2\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_240\"}", "{\"key\": \"invert\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_241 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< in1d took 0.0020020008087158203 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after in1d command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_221, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_241, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_221\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_241\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_242 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.011449098587036133 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_239, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_241, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_239\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_241\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_243 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0020279884338378906 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_239, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_239\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_239", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0018389225006103516 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = names, val = ["id_r7ETRAC_240", "id_r7ETRAC_242"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_240\\\", \\\"id_r7ETRAC_242\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_244 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0099570751190185547 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = stop, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_245 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0020160675048828125 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 4, objType = VALUE, dtype = int64), (key = stop, val = 8, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_246 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0024471282958984375 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_r7ETRAC_245", "id_r7ETRAC_246"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_245\\\", \\\"id_r7ETRAC_246\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_247 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0024349689483642578 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_246, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_246\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_246", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0019431114196777344 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_245, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_245\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_245", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0017991065979003906 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = keynames, val = ["id_r7ETRAC_244"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_244\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_249 int64 8 1 (8,) 8+created id_r7ETRAC_250 int64 4 1 (4,) 8+created id_r7ETRAC_251 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.022240877151489258 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_244, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_251, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_244\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_251\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_252 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018770694732666016 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = <, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_247, objType = PDARRAY, dtype = int64), (key = value, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"<\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_247\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_253 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0018780231475830078 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_253, objType = PDARRAY, dtype = bool), (key = idx, val = id_r7ETRAC_249, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_253\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_249\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_254 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0017850399017333984 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_r7ETRAC_254, objType = PDARRAY, dtype = bool), (key = op, val = sum, objType = VALUE, dtype = str), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = segments, val = id_r7ETRAC_250, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_254\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_250\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"sum\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_255 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0020189285278320312 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_254, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_254\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_254", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016078948974609375 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_253, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_253\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_253", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015940666198730469 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_255, objType = PDARRAY, dtype = int64), (key = value, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_255\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_256 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0019199848175048828 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_256, objType = PDARRAY, dtype = bool), (key = op, val = any, objType = VALUE, dtype = str)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> reduction ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"any\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_256\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"bool False", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< reduction took 0.0015840530395507812 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after reduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_256, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_256\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_256", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016031265258789062 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_247, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_249, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_247\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_249\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_257 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.012949943542480469 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_r7ETRAC_257, objType = PDARRAY, dtype = int64), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = op, val = min, objType = VALUE, dtype = str), (key = segments, val = id_r7ETRAC_250, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_257\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_250\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"min\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_258 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0022051334381103516 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_257, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_257\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_257", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016279220581054688 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >=, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_258, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = value, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_258\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_259 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0022690296173095703 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = func, val = where, objType = VALUE, dtype = str), (key = b, val = id_r7ETRAC_258, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = scalar, val = -1, objType = VALUE, dtype = str), (key = condition, val = id_r7ETRAC_259, objType = PDARRAY, dtype = bool)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc3sv ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"where\"}", "{\"key\": \"condition\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_259\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"scalar\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"-1\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_258\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_260 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc3sv took 0.0019879341125488281 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc3sv command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_259, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_259\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_259", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015940666198730469 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_258, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_258\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_258", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015540122985839844 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_r7ETRAC_249, objType = VALUE, dtype = str), (key = size, val = 8, objType = VALUE, dtype = int64), (key = valName, val = id_r7ETRAC_260, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = segName, val = id_r7ETRAC_250, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_249\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_250\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_260\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_261 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0035839080810546875 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_r7ETRAC_247, objType = PDARRAY, dtype = int64), (key = op, val = >=, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = value, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_247\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_262 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0019159317016601562 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_261, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_262, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_261\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_262\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_263 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0019059181213378906 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_262, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_262\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_262", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016179084777832031 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_247, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_247\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_247", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016369819641113281 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_244, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_244\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_244", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016729831695556641 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_252, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_252\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_252", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001708984375 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_249, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_249\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_249", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016880035400390625 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_250, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_250\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_250", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016109943389892578 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_251, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_251\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_251", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016598701477050781 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_255, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_255\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_255", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015490055084228516 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_260, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_260\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_260", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016269683837890625 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_261, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_261\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_261", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016160011291503906 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_242, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_242\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_242", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015909671783447266 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = keynames, val = ["id_r7ETRAC_263", "id_r7ETRAC_243"], objType = LIST, dtype = str)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_263\\\", \\\"id_r7ETRAC_243\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_265 int64 4 1 (4,) 8+created id_r7ETRAC_266 int64 4 1 (4,) 8+created id_r7ETRAC_267 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0027279853820800781 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_263, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_267, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_263\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_267\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_268 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018329620361328125 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_243, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_267, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_243\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_267\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_269 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0018818378448486328 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_r7ETRAC_220, objType = VALUE, dtype = str), (key = Arrays, val = id_r7ETRAC_268 id_r7ETRAC_269 id_r7ETRAC_237, objType = VALUE, dtype = str)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> addNodeLabels ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_220\"}", "{\"key\": \"Arrays\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_268 id_r7ETRAC_269 id_r7ETRAC_237\"}"]
2023-12-05:10:47:55 [DipSLLPropertyGraphMsg] addNodeLabelsMsg Line 107 DEBUG [Chapel] DipSLLaddNodeLabels took 1.6e-05 sec 
2023-12-05:10:47:55 [DipSLLPropertyGraphMsg] addNodeLabelsMsg Line 108 DEBUG [Chapel] labels added
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"labels added", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< addNodeLabels took 0.0098059177398681641 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after addNodeLabels command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_234, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_234\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_234", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014941692352294922 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_235, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_235\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_235", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015079975128173828 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_236, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_236\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_236", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015289783477783203 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_238, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_238\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_238", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015230178833007812 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_237, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_237\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_237", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016460418701171875 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_240, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_240\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_240", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015120506286621094 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_241, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_241\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_241", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014278888702392578 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_243, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_243\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_243", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015320777893066406 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_263, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_263\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_263", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014848709106445312 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_269, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_269\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_269", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015108585357666016 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_268, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_268\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_268", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014870166778564453 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_265, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_265\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_265", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015919208526611328 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_266, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_266\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_266", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015270709991455078 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_267, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_267\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_267", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015590190887451172 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_r7ETRAC_230"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool), (key = keytypes, val = ["Strings"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_230\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"Strings\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_272 int64 4 1 (4,) 8+created id_r7ETRAC_273 int64 1 1 (1,) 8+created id_r7ETRAC_274 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0043189525604248047 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = subcmd, val = pdarrayIndex, objType = VALUE, dtype = str), (key = obj, val = id_r7ETRAC_230, objType = PDARRAY, dtype = <U0), (key = key, val = id_r7ETRAC_274, objType = PDARRAY, dtype = int64), (key = dtype, val = <U0, objType = VALUE, dtype = <class 'numpy.dtype[str_]'>), (key = objType, val = Strings, objType = VALUE, dtype = str)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedIndex ["{\"key\": \"subcmd\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarrayIndex\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"Strings\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"<class 'numpy.dtype[str_]'>\", \"val\": \"<U0\"}", "{\"key\": \"obj\", \"objType\": \"PDARRAY\", \"dtype\": \"<U0\", \"val\": \"id_r7ETRAC_230\"}", "{\"key\": \"key\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_274\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_275 str 1 1 (1,) 1+created bytes.size 3", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedIndex took 0.0020279884338378906 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedIndex command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 1, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_276 int64 1 1 (1,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0054268836975097656 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_r7ETRAC_272, objType = VALUE, dtype = str), (key = valName, val = id_r7ETRAC_276, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = size, val = 4, objType = VALUE, dtype = int64), (key = permute, val = True, objType = VALUE, dtype = bool), (key = segName, val = id_r7ETRAC_273, objType = VALUE, dtype = str)], size = 6}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_272\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_273\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_276\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_277 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0021388530731201172 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_r7ETRAC_220, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> nodes ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_220\"}"]
2023-12-05:10:47:55 [GraphInfoMsg] nodesMsg Line 102 DEBUG [Chapel] Extracting nodes takes 7.2e-05
2023-12-05:10:47:55 [GraphInfoMsg] nodesMsg Line 103 DEBUG [Chapel] created id_r7ETRAC_278 int64 4 1 (4,) 8+ 
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_278 int64 4 1 (4,) 8+ ", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< nodes took 0.0020639896392822266 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after nodes command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = names, val = ["id_r7ETRAC_278", "id_r7ETRAC_226"], objType = LIST, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_278\\\", \\\"id_r7ETRAC_226\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_279 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0021159648895263672 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = stop, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_280 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0018579959869384766 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stop, val = 8, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_281 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0017518997192382812 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_r7ETRAC_280", "id_r7ETRAC_281"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_280\\\", \\\"id_r7ETRAC_281\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_282 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0020220279693603516 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_281, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_281\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_281", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014650821685791016 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_280, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_280\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_280", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014481544494628906 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = keynames, val = ["id_r7ETRAC_279"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_279\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_284 int64 8 1 (8,) 8+created id_r7ETRAC_285 int64 4 1 (4,) 8+created id_r7ETRAC_286 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0160369873046875 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_279, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_286, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_279\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_286\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_287 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0017669200897216797 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = value, val = 4, objType = VALUE, dtype = int64), (key = op, val = <, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_282, objType = PDARRAY, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"<\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_282\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_288 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0017821788787841797 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_288, objType = PDARRAY, dtype = bool), (key = idx, val = id_r7ETRAC_284, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_288\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_284\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_289 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0017240047454833984 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_r7ETRAC_289, objType = PDARRAY, dtype = bool), (key = op, val = sum, objType = VALUE, dtype = str), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = segments, val = id_r7ETRAC_285, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_289\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_285\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"sum\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_290 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0021140575408935547 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_289, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_289\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_289", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0013830661773681641 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_288, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_288\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_288", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00090909004211425781 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_290, objType = PDARRAY, dtype = int64), (key = value, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_290\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_291 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0010459423065185547 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = any, objType = VALUE, dtype = str), (key = array, val = id_r7ETRAC_291, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> reduction ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"any\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_291\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"bool False", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< reduction took 0.00087499618530273438 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after reduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_291, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_291\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_291", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00079393386840820312 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_282, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_284, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_282\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_284\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_292 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0011439323425292969 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = values, val = id_r7ETRAC_292, objType = PDARRAY, dtype = int64), (key = op, val = min, objType = VALUE, dtype = str), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = segments, val = id_r7ETRAC_285, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_292\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_285\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"min\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_293 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0012490749359130859 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_292, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_292\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_292", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00092601776123046875 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = >=, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_293, objType = PDARRAY, dtype = int64), (key = value, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_293\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_294 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0011310577392578125 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = func, val = where, objType = VALUE, dtype = str), (key = condition, val = id_r7ETRAC_294, objType = PDARRAY, dtype = bool), (key = b, val = id_r7ETRAC_293, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = scalar, val = -1, objType = VALUE, dtype = str)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc3sv ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"where\"}", "{\"key\": \"condition\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_294\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"scalar\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"-1\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_293\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_295 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc3sv took 0.00099706649780273438 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc3sv command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_294, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_294\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_294", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00097298622131347656 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_293, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_293\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_293", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010330677032470703 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = permName, val = id_r7ETRAC_284, objType = VALUE, dtype = str), (key = size, val = 8, objType = VALUE, dtype = int64), (key = valName, val = id_r7ETRAC_295, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool), (key = segName, val = id_r7ETRAC_285, objType = VALUE, dtype = str)], size = 6}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_284\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_285\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_295\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_296 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0012731552124023438 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >=, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_282, objType = PDARRAY, dtype = int64), (key = value, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_282\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_297 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.00098395347595214844 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_296, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_297, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_296\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_297\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_298 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0010008811950683594 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_297, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_297\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_297", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010259151458740234 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_282, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_282\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_282", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00096201896667480469 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_279, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_279\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_279", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.000782012939453125 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_287, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_287\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_287", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00082302093505859375 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_284, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_284\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_284", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00091099739074707031 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_285, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_285\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_285", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.000885009765625 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_286, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_286\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_286", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00099802017211914062 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_290, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_290\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_290", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010519027709960938 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_295, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_295\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_295", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00089788436889648438 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_296, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_296\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_296", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00081586837768554688 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = mode, val = interleave, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = names, val = ["id_r7ETRAC_278", "id_r7ETRAC_227"], objType = LIST, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_278\\\", \\\"id_r7ETRAC_227\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_299 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0012509822845458984 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = stop, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stride, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_300 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.00097894668579101562 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = stop, val = 8, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_301 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0012969970703125 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = mode, val = interleave, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_r7ETRAC_300", "id_r7ETRAC_301"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_300\\\", \\\"id_r7ETRAC_301\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_302 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0013649463653564453 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_301, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_301\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_301", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00093603134155273438 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_300, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_300\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_300", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00096893310546875 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keynames, val = ["id_r7ETRAC_299"], objType = LIST, dtype = str), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_299\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_304 int64 8 1 (8,) 8+created id_r7ETRAC_305 int64 4 1 (4,) 8+created id_r7ETRAC_306 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.014943838119506836 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_299, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_306, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_299\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_306\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_307 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0011179447174072266 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = <, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_302, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = value, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"<\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_302\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_308 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0010001659393310547 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_308, objType = PDARRAY, dtype = bool), (key = idx, val = id_r7ETRAC_304, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_308\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_304\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_309 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0011219978332519531 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_r7ETRAC_309, objType = PDARRAY, dtype = bool), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = op, val = sum, objType = VALUE, dtype = str), (key = segments, val = id_r7ETRAC_305, objType = PDARRAY, dtype = int64), (key = ddof, val = 1, objType = VALUE, dtype = int64)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_309\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_305\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"sum\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_310 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0010600090026855469 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_309, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_309\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_309", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00074100494384765625 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_308, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_308\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_308", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010049343109130859 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = >, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_310, objType = PDARRAY, dtype = int64), (key = value, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_310\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_311 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0011601448059082031 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = any, objType = VALUE, dtype = str), (key = array, val = id_r7ETRAC_311, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> reduction ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"any\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_311\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"bool False", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< reduction took 0.00094485282897949219 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after reduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_311, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_311\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_311", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010449886322021484 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_302, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_304, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_302\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_304\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_312 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.00095701217651367188 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_r7ETRAC_312, objType = PDARRAY, dtype = int64), (key = op, val = min, objType = VALUE, dtype = str), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = segments, val = id_r7ETRAC_305, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_312\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_305\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"min\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_313 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0012760162353515625 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_312, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_312\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_312", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00097894668579101562 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >=, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_313, objType = PDARRAY, dtype = int64), (key = value, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_313\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_314 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0011708736419677734 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = func, val = where, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = b, val = id_r7ETRAC_313, objType = PDARRAY, dtype = int64), (key = scalar, val = -1, objType = VALUE, dtype = str), (key = condition, val = id_r7ETRAC_314, objType = PDARRAY, dtype = bool)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc3sv ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"where\"}", "{\"key\": \"condition\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_314\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"scalar\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"-1\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_313\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_315 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc3sv took 0.0010349750518798828 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc3sv command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_314, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_314\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_314", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00074005126953125 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_313, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_313\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_313", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00099205970764160156 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_r7ETRAC_304, objType = VALUE, dtype = str), (key = size, val = 8, objType = VALUE, dtype = int64), (key = valName, val = id_r7ETRAC_315, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = segName, val = id_r7ETRAC_305, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_304\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_305\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_315\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_316 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0013639926910400391 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >=, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_302, objType = PDARRAY, dtype = int64), (key = value, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_302\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_317 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0011219978332519531 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_316, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_317, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_316\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_317\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_318 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.000946044921875 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_317, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_317\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_317", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00074505805969238281 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_302, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_302\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_302", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00092005729675292969 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_299, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_299\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_299", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00093007087707519531 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_307, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_307\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_307", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00091600418090820312 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_304, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_304\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_304", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.000885009765625 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_305, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_305\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_305", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00094294548034667969 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_306, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_306\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_306", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0008640289306640625 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_310, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_310\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_310", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00086903572082519531 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_315, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_315\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_315", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00085806846618652344 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_316, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_316\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_316", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00093197822570800781 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_r7ETRAC_220, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> edges ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_220\"}"]
2023-12-05:10:47:55 [GraphInfoMsg] edgesMsg Line 65 DEBUG [Chapel] Extracting edges takes 0.000131
2023-12-05:10:47:55 [GraphInfoMsg] edgesMsg Line 66 DEBUG [Chapel] created id_r7ETRAC_319 int64 4 1 (4,) 8+ created id_r7ETRAC_320 int64 4 1 (4,) 8
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_319 int64 4 1 (4,) 8+ created id_r7ETRAC_320 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< edges took 0.0012249946594238281 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after edges command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_r7ETRAC_298", "id_r7ETRAC_318"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_298\\\", \\\"id_r7ETRAC_318\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_322 int64 4 1 (4,) 8+created id_r7ETRAC_323 int64 4 1 (4,) 8+created id_r7ETRAC_324 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.027424097061157227 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_298, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_324, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_298\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_324\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_325 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.000926971435546875 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_318, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_324, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_318\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_324\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_326 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.000946044921875 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keynames, val = ["id_r7ETRAC_319", "id_r7ETRAC_320"], objType = LIST, dtype = str), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_319\\\", \\\"id_r7ETRAC_320\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_328 int64 4 1 (4,) 8+created id_r7ETRAC_329 int64 4 1 (4,) 8+created id_r7ETRAC_330 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0014739036560058594 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_319, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_330, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_319\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_330\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_331 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0011930465698242188 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_320, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_330, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_320\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_330\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_332 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0011510848999023438 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = bool, objType = VALUE, dtype = str), (key = size, val = 4, objType = VALUE, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"bool\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_333 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.00093698501586914062 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_333, objType = PDARRAY, dtype = bool), (key = val, val = True, objType = VALUE, dtype = str), (key = dtype, val = bool, objType = VALUE, dtype = str)], size = 3}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> set ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_333\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"bool\"}", "{\"key\": \"val\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"True\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"set id_r7ETRAC_333 to true", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< set took 0.0011420249938964844 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after set command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = bool, objType = VALUE, dtype = str), (key = size, val = 4, objType = VALUE, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"bool\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_334 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0011029243469238281 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = mode, val = interleave, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = names, val = ["id_r7ETRAC_333", "id_r7ETRAC_334"], objType = LIST, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_333\\\", \\\"id_r7ETRAC_334\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_335 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0013799667358398438 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_334, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_334\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_334", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00071191787719726562 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_333, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_333\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_333", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00089406967163085938 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = mode, val = interleave, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = names, val = ["id_r7ETRAC_325", "id_r7ETRAC_331"], objType = LIST, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_325\\\", \\\"id_r7ETRAC_331\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_336 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.001338958740234375 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = mode, val = interleave, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_r7ETRAC_326", "id_r7ETRAC_332"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_326\\\", \\\"id_r7ETRAC_332\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_337 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0014181137084960938 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_r7ETRAC_336", "id_r7ETRAC_337"], objType = LIST, dtype = str), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_336\\\", \\\"id_r7ETRAC_337\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_339 int64 8 1 (8,) 8+created id_r7ETRAC_340 int64 4 1 (4,) 8+created id_r7ETRAC_341 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.026782989501953125 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_336, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_341, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_336\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_341\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_342 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.00089001655578613281 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_341, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_337, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_337\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_341\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_343 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.00093698501586914062 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 8, objType = VALUE, dtype = int64), (key = segments, val = id_r7ETRAC_340, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> countReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_340\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_344 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< countReduction took 0.0010130405426025391 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after countReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = ==, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_344, objType = PDARRAY, dtype = int64), (key = value, val = 2, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"==\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_344\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_345 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0010089874267578125 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_r7ETRAC_339, objType = VALUE, dtype = str), (key = size, val = 8, objType = VALUE, dtype = int64), (key = valName, val = id_r7ETRAC_345, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = segName, val = id_r7ETRAC_340, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_339\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_340\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_345\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_346 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0017430782318115234 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_345, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_345\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_345", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00093507766723632812 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_335, objType = PDARRAY, dtype = bool), (key = array, val = id_r7ETRAC_346, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_346\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_335\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_347 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0010941028594970703 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_r7ETRAC_322, objType = VALUE, dtype = str), (key = valName, val = id_r7ETRAC_347, objType = VALUE, dtype = str), (key = size, val = 4, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = segName, val = id_r7ETRAC_323, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_322\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_323\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_347\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_348 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0011889934539794922 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_347, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_347\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_347", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00073599815368652344 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_322, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_322\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_322", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00071287155151367188 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_323, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_323\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_323", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00087785720825195312 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_324, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_324\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_324", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00089907646179199219 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_326, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_326\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_326", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00078105926513671875 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_325, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_325\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_325", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00091195106506347656 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_328, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_328\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_328", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00090909004211425781 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_329, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_329\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_329", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00076508522033691406 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_330, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_330\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_330", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00093698501586914062 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_332, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_332\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_332", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.000926971435546875 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_331, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_331\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_331", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00093889236450195312 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_335, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_335\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_335", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00078797340393066406 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_337, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_337\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_337", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0009479522705078125 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_336, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_336\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_336", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0008640289306640625 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_339, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_339\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_339", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00083994865417480469 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_340, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_340\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_340", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00093197822570800781 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_341, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_341\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_341", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00095701217651367188 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_343, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_343\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_343", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00078892707824707031 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_342, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_342\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_342", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00070500373840332031 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_344, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_344\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_344", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00087690353393554688 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_346, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_346\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_346", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.000946044921875 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_298, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_348, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_298\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_348\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_349 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0039029121398925781 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_298, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_298\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_298", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00089597702026367188 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_318, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_348, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_318\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_348\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_350 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012769699096679688 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_318, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_318\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_318", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010740756988525391 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_348, objType = PDARRAY, dtype = bool), (key = array, val = id_r7ETRAC_277, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_277\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_348\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_351 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012569427490234375 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_277, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_277\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_277", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.000904083251953125 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = nstr, val = 3, objType = VALUE, dtype = int64), (key = keytypes, val = ["pdarray", "pdarray", "pdarray"], objType = LIST, dtype = str), (key = keynames, val = ["id_r7ETRAC_349", "id_r7ETRAC_350", "id_r7ETRAC_351"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"3\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_349\\\", \\\"id_r7ETRAC_350\\\", \\\"id_r7ETRAC_351\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_353 int64 4 1 (4,) 8+created id_r7ETRAC_354 int64 4 1 (4,) 8+created id_r7ETRAC_355 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.048470020294189453 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_349, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_355, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_349\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_355\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_356 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0016338825225830078 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_350, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_355, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_350\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_355\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_357 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0016360282897949219 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_351, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_355, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_351\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_355\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_358 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0078210830688476562 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 2, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = names, val = ["id_r7ETRAC_319", "id_r7ETRAC_356"], objType = LIST, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_319\\\", \\\"id_r7ETRAC_356\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_359 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0019829273223876953 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = names, val = ["id_r7ETRAC_320", "id_r7ETRAC_357"], objType = LIST, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_320\\\", \\\"id_r7ETRAC_357\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_360 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0018560886383056641 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stop, val = 4, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = start, val = 0, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_361 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0016090869903564453 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = stop, val = 8, objType = VALUE, dtype = int64), (key = start, val = 4, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_362 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.0015308856964111328 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = mode, val = interleave, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_r7ETRAC_361", "id_r7ETRAC_362"], objType = LIST, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"interleave\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_361\\\", \\\"id_r7ETRAC_362\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_363 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< concatenate took 0.0018150806427001953 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_362, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_362\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_362", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012888908386230469 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_361, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_361\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_361", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012719631195068359 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keynames, val = ["id_r7ETRAC_359", "id_r7ETRAC_360"], objType = LIST, dtype = str), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_359\\\", \\\"id_r7ETRAC_360\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_365 int64 8 1 (8,) 8+created id_r7ETRAC_366 int64 4 1 (4,) 8+created id_r7ETRAC_367 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.028439998626708984 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_367, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_359, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_359\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_367\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_368 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.001277923583984375 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_367, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_360, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_360\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_367\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_369 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0014359951019287109 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_r7ETRAC_363, objType = PDARRAY, dtype = int64), (key = op, val = <, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = value, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"<\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_363\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_370 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0013229846954345703 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_370, objType = PDARRAY, dtype = bool), (key = idx, val = id_r7ETRAC_365, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_370\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_365\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_371 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0016260147094726562 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = values, val = id_r7ETRAC_371, objType = PDARRAY, dtype = bool), (key = op, val = sum, objType = VALUE, dtype = str), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = segments, val = id_r7ETRAC_366, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_371\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_366\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"sum\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_372 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0019700527191162109 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_371, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_371\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_371", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014719963073730469 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_370, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_370\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_370", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014870166778564453 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_372, objType = PDARRAY, dtype = int64), (key = op, val = >, objType = VALUE, dtype = str), (key = value, val = 1, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_372\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_373 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0017309188842773438 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_373, objType = PDARRAY, dtype = bool), (key = op, val = any, objType = VALUE, dtype = str)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> reduction ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"any\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_373\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"bool False", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< reduction took 0.0014801025390625 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after reduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_373, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_373\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_373", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00144195556640625 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_365, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_363, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_363\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_365\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_374 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0016560554504394531 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = skip_nan, val = True, objType = VALUE, dtype = bool), (key = op, val = min, objType = VALUE, dtype = str), (key = values, val = id_r7ETRAC_374, objType = PDARRAY, dtype = int64), (key = ddof, val = 1, objType = VALUE, dtype = int64), (key = segments, val = id_r7ETRAC_366, objType = PDARRAY, dtype = int64)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> segmentedReduction ["{\"key\": \"values\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_374\"}", "{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_366\"}", "{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"min\"}", "{\"key\": \"skip_nan\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"ddof\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_375 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< segmentedReduction took 0.0019290447235107422 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after segmentedReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_374, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_374\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_374", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00095510482788085938 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = >=, objType = VALUE, dtype = str), (key = a, val = id_r7ETRAC_375, objType = PDARRAY, dtype = int64), (key = value, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_375\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_376 bool 4 1 (4,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.00098109245300292969 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = func, val = where, objType = VALUE, dtype = str), (key = b, val = id_r7ETRAC_375, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = scalar, val = -1, objType = VALUE, dtype = str), (key = condition, val = id_r7ETRAC_376, objType = PDARRAY, dtype = bool)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> efunc3sv ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"where\"}", "{\"key\": \"condition\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_376\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"scalar\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"-1\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_375\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_377 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< efunc3sv took 0.0012600421905517578 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after efunc3sv command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_376, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_376\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_376", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0007839202880859375 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_375, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_375\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_375", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00090503692626953125 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = valName, val = id_r7ETRAC_377, objType = VALUE, dtype = str), (key = permName, val = id_r7ETRAC_365, objType = VALUE, dtype = str), (key = size, val = 8, objType = VALUE, dtype = int64), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = segName, val = id_r7ETRAC_366, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool)], size = 6}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_365\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_366\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_377\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"8\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_378 int64 8 1 (8,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< broadcast took 0.0014390945434570312 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = a, val = id_r7ETRAC_363, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = op, val = >=, objType = VALUE, dtype = str), (key = value, val = 4, objType = VALUE, dtype = int64)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvs ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \">=\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_363\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"value\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_379 bool 8 1 (8,) 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvs took 0.0012390613555908203 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvs command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_378, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_379, objType = PDARRAY, dtype = bool)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_378\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_r7ETRAC_379\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_380 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0010750293731689453 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_379, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_379\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_379", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00086903572082519531 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_363, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_363\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_363", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00082993507385253906 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_360, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_360\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_360", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00073599815368652344 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_359, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_359\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_359", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010309219360351562 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_369, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_369\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_369", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010230541229248047 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_368, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_368\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_368", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00079703330993652344 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_365, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_365\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_365", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00076508522033691406 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_366, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_366\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_366", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00099396705627441406 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_367, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_367\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_367", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0009899139404296875 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_372, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_372\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_372", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011320114135742188 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_377, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_377\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_377", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010240077972412109 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_378, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_378\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_378", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00073599815368652344 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_r7ETRAC_220, objType = VALUE, dtype = str), (key = Arrays, val = id_r7ETRAC_380 id_r7ETRAC_358 id_r7ETRAC_275, objType = VALUE, dtype = str)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> addEdgeRelationships ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_220\"}", "{\"key\": \"Arrays\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_380 id_r7ETRAC_358 id_r7ETRAC_275\"}"]
2023-12-05:10:47:55 [DipSLLPropertyGraphMsg] addEdgeRelationshipsMsg Line 368 DEBUG [Chapel] DipSLLaddEdgeRelationships took 4.1e-05 sec
2023-12-05:10:47:55 [DipSLLPropertyGraphMsg] addEdgeRelationshipsMsg Line 369 DEBUG [Chapel] edge relationships added
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"edge relationships added", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< addEdgeRelationships took 0.0013859272003173828 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after addEdgeRelationships command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_272, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_272\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_272", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00091004371643066406 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_273, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_273\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_273", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010068416595458984 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_274, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_274\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_274", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00099992752075195312 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_276, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_276\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_276", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00097703933715820312 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_275, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_275\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_275", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.000820159912109375 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_278, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_278\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_278", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00088191032409667969 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_320, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_320\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_320", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0009479522705078125 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_319, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_319\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_319", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00095605850219726562 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_348, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_348\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_348", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0009670257568359375 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_351, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_351\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_351", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00089406967163085938 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_350, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_350\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_350", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00086188316345214844 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_349, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_349\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_349", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00078105926513671875 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_358, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_358\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_358", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00087904930114746094 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_357, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_357\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_357", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00086808204650878906 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_356, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_356\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_356", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010390281677246094 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_353, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_353\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_353", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00089097023010253906 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_354, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_354\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_354", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010640621185302734 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_355, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_355\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_355", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00068497657775878906 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_380, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_380\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_380", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00064992904663085938 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_r7ETRAC_220, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> nodes ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_220\"}"]
2023-12-05:10:47:55 [GraphInfoMsg] nodesMsg Line 102 DEBUG [Chapel] Extracting nodes takes 5.3e-05
2023-12-05:10:47:55 [GraphInfoMsg] nodesMsg Line 103 DEBUG [Chapel] created id_r7ETRAC_381 int64 4 1 (4,) 8+ 
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_381 int64 4 1 (4,) 8+ ", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< nodes took 0.00084590911865234375 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after nodes command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = start, val = 0, objType = VALUE, dtype = int64), (key = stop, val = 4, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_382 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< arange took 0.00090694427490234375 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_r7ETRAC_220, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> edges ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_220\"}"]
2023-12-05:10:47:55 [GraphInfoMsg] edgesMsg Line 65 DEBUG [Chapel] Extracting edges takes 0.000121
2023-12-05:10:47:55 [GraphInfoMsg] edgesMsg Line 66 DEBUG [Chapel] created id_r7ETRAC_383 int64 4 1 (4,) 8+ created id_r7ETRAC_384 int64 4 1 (4,) 8
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_383 int64 4 1 (4,) 8+ created id_r7ETRAC_384 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< edges took 0.0010030269622802734 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after edges command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_383, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_383\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_383", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010340213775634766 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = keynames, val = ["id_r7ETRAC_384"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_384\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_386 int64 4 1 (4,) 8+created id_r7ETRAC_387 int64 4 1 (4,) 8+created id_r7ETRAC_388 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.015460968017578125 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_388, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_384, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_384\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_388\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_389 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012938976287841797 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 4, objType = VALUE, dtype = int64), (key = segments, val = id_r7ETRAC_387, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> countReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_387\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_390 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< countReduction took 0.0011200904846191406 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after countReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_386, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_386\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_386", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010590553283691406 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_387, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_387\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_387", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010399818420410156 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_388, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_388\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_388", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010309219360351562 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 4, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_391 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0011479854583740234 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_391, objType = PDARRAY, dtype = int64), (key = val, val = 0, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 3}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> set ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_391\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"val\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"0\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"set id_r7ETRAC_391 to 0", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< set took 0.0012280941009521484 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after set command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = value, val = id_r7ETRAC_390, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_389, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_391, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray]=pdarray ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_391\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_389\"}", "{\"key\": \"value\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_390\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"setPdarrayIndexToPdarrayMsg success", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray]=pdarray took 0.0012319087982177734 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray]=pdarray command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_384, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_384\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_384", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011360645294189453 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_389, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_389\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_389", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010809898376464844 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_390, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_390\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_390", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.00109100341796875 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_r7ETRAC_220, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> edges ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_220\"}"]
2023-12-05:10:47:55 [GraphInfoMsg] edgesMsg Line 65 DEBUG [Chapel] Extracting edges takes 0.000162
2023-12-05:10:47:55 [GraphInfoMsg] edgesMsg Line 66 DEBUG [Chapel] created id_r7ETRAC_392 int64 4 1 (4,) 8+ created id_r7ETRAC_393 int64 4 1 (4,) 8
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_392 int64 4 1 (4,) 8+ created id_r7ETRAC_393 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< edges took 0.0014820098876953125 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after edges command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_393, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_393\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_393", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010788440704345703 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = nstr, val = 1, objType = VALUE, dtype = int64), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_r7ETRAC_392"], objType = LIST, dtype = str), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = True, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_392\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_395 int64 4 1 (4,) 8+created id_r7ETRAC_396 int64 3 1 (3,) 8+created id_r7ETRAC_397 int64 3 1 (3,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0017919540405273438 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_392, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_397, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_392\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_397\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_398 int64 3 1 (3,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0012660026550292969 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 4, objType = VALUE, dtype = int64), (key = segments, val = id_r7ETRAC_396, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> countReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_396\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_399 int64 3 1 (3,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< countReduction took 0.0011069774627685547 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after countReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_395, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_395\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_395", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010709762573242188 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_396, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_396\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_396", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011529922485351562 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_397, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_397\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_397", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011649131774902344 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 4, objType = VALUE, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"4\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_400 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0012431144714355469 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = val, val = 0, objType = VALUE, dtype = str), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = array, val = id_r7ETRAC_400, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> set ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_400\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"val\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"0\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"set id_r7ETRAC_400 to 0", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< set took 0.0012218952178955078 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after set command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_400, objType = PDARRAY, dtype = int64), (key = value, val = id_r7ETRAC_399, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_398, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray]=pdarray ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_400\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_398\"}", "{\"key\": \"value\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_399\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"setPdarrayIndexToPdarrayMsg success", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray]=pdarray took 0.0012021064758300781 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray]=pdarray command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_392, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_392\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_392", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010499954223632812 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_398, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_398\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_398", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010790824890136719 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_399, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_399\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_399", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.001071929931640625 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = b, val = id_r7ETRAC_400, objType = PDARRAY, dtype = int64), (key = a, val = id_r7ETRAC_391, objType = PDARRAY, dtype = int64), (key = op, val = +, objType = VALUE, dtype = str)], size = 3}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvv ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"+\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_391\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_400\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_401 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvv took 0.00133514404296875 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvv command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = algoName, val = RadixSortLSD, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = name, val = id_r7ETRAC_401, objType = VALUE, dtype = str)], size = 3}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> argsort ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_401\"}", "{\"key\": \"algoName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"RadixSortLSD\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_402 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< argsort took 0.014632940292358398 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after argsort command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_r7ETRAC_402, objType = PDARRAY, dtype = int64), (key = array, val = id_r7ETRAC_382, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_382\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_402\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_403 int64 4 1 (4,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0013010501861572266 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_382, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_382\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_382", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0010659694671630859 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_r7ETRAC_30, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> edges ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_30\"}"]
2023-12-05:10:47:55 [GraphInfoMsg] edgesMsg Line 65 DEBUG [Chapel] Extracting edges takes 0.000153
2023-12-05:10:47:55 [GraphInfoMsg] edgesMsg Line 66 DEBUG [Chapel] created id_r7ETRAC_404 int64 18 1 (18,) 8+ created id_r7ETRAC_405 int64 18 1 (18,) 8
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_404 int64 18 1 (18,) 8+ created id_r7ETRAC_405 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< edges took 0.0014081001281738281 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after edges command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_404, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_404\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_404", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0012309551239013672 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_r7ETRAC_405"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_405\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_407 int64 18 1 (18,) 8+created id_r7ETRAC_408 int64 6 1 (6,) 8+created id_r7ETRAC_409 int64 6 1 (6,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.015733003616333008 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_405, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_409, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_405\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_409\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_410 int64 6 1 (6,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.001873016357421875 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = segments, val = id_r7ETRAC_408, objType = PDARRAY, dtype = int64), (key = size, val = 18, objType = VALUE, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> countReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_408\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"18\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_411 int64 6 1 (6,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< countReduction took 0.0015289783477783203 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after countReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_407, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_407\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_407", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014379024505615234 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_408, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_408\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_408", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014159679412841797 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_409, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_409\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_409", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014979839324951172 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 7, objType = VALUE, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_412 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0015859603881835938 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = val, val = 0, objType = VALUE, dtype = str), (key = array, val = id_r7ETRAC_412, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 3}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> set ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_412\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"val\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"0\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"set id_r7ETRAC_412 to 0", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< set took 0.0015139579772949219 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after set command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_412, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_410, objType = PDARRAY, dtype = int64), (key = value, val = id_r7ETRAC_411, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray]=pdarray ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_412\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_410\"}", "{\"key\": \"value\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_411\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"setPdarrayIndexToPdarrayMsg success", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray]=pdarray took 0.013813972473144531 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray]=pdarray command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_405, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_405\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_405", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014450550079345703 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_410, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_410\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_410", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014450550079345703 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_411, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_411\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_411", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014460086822509766 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = GraphName, val = id_r7ETRAC_30, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> edges ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_30\"}"]
2023-12-05:10:47:55 [GraphInfoMsg] edgesMsg Line 65 DEBUG [Chapel] Extracting edges takes 0.000144
2023-12-05:10:47:55 [GraphInfoMsg] edgesMsg Line 66 DEBUG [Chapel] created id_r7ETRAC_413 int64 18 1 (18,) 8+ created id_r7ETRAC_414 int64 18 1 (18,) 8
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_413 int64 18 1 (18,) 8+ created id_r7ETRAC_414 int64 18 1 (18,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< edges took 0.0021460056304931641 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after edges command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_414, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_414\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_414", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014681816101074219 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = keynames, val = ["id_r7ETRAC_413"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = assumeSortedStr, val = True, objType = VALUE, dtype = bool)], size = 5}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_r7ETRAC_413\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_416 int64 18 1 (18,) 8+created id_r7ETRAC_417 int64 7 1 (7,) 8+created id_r7ETRAC_418 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< unique took 0.0022070407867431641 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_413, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_418, objType = PDARRAY, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_413\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_418\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_419 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray] took 0.0045309066772460938 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = segments, val = id_r7ETRAC_417, objType = PDARRAY, dtype = int64), (key = size, val = 18, objType = VALUE, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> countReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_417\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"18\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_420 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< countReduction took 0.0014789104461669922 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after countReduction command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_416, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_416\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_416", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015249252319335938 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_417, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_417\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_417", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015358924865722656 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_418, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_418\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_418", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015289783477783203 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = dtype, val = int64, objType = VALUE, dtype = str), (key = size, val = 7, objType = VALUE, dtype = int64)], size = 2}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> create ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"7\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_421 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< create took 0.0016269683837890625 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after create command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = val, val = 0, objType = VALUE, dtype = str), (key = array, val = id_r7ETRAC_421, objType = PDARRAY, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 3}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> set ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_421\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"val\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"0\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"set id_r7ETRAC_421 to 0", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< set took 0.0031039714813232422 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after set command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_421, objType = PDARRAY, dtype = int64), (key = idx, val = id_r7ETRAC_419, objType = PDARRAY, dtype = int64), (key = value, val = id_r7ETRAC_420, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> [pdarray]=pdarray ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_421\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_419\"}", "{\"key\": \"value\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_420\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"setPdarrayIndexToPdarrayMsg success", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< [pdarray]=pdarray took 0.0016980171203613281 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after [pdarray]=pdarray command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_413, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_413\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_413", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014998912811279297 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_419, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_419\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_419", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0015709400177001953 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_420, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_420\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_420", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014030933380126953 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = op, val = +, objType = VALUE, dtype = str), (key = b, val = id_r7ETRAC_421, objType = PDARRAY, dtype = int64), (key = a, val = id_r7ETRAC_412, objType = PDARRAY, dtype = int64)], size = 3}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> binopvv ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"+\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_412\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_421\"}"]
2023-12-05:10:47:55 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_422 int64 7 1 (7,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:55 [ServerDaemon] run Line 685 INFO [Chapel] <<< binopvv took 0.0016429424285888672 sec
2023-12-05:10:47:55 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after binopvv command is 0% pct of max memory 14970345062
2023-12-05:10:47:55 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = MainGraphName, val = id_r7ETRAC_30, objType = VALUE, dtype = str), (key = GraphDegreeName, val = id_r7ETRAC_422, objType = VALUE, dtype = str), (key = SubGraphDegreeName, val = id_r7ETRAC_401, objType = VALUE, dtype = str), (key = Type, val = VF2, objType = VALUE, dtype = str), (key = SubGraphName, val = id_r7ETRAC_220, objType = VALUE, dtype = str), (key = SubGraphInternalVerticesSortedName, val = id_r7ETRAC_403, objType = VALUE, dtype = str)], size = 6}
2023-12-05:10:47:55 [ServerDaemon] run Line 585 INFO [Chapel] >>> subgraphIsomorphismVF2 ["{\"key\": \"MainGraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_30\"}", "{\"key\": \"SubGraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_220\"}", "{\"key\": \"GraphDegreeName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_422\"}", "{\"key\": \"SubGraphDegreeName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_401\"}", "{\"key\": \"SubGraphInternalVerticesSortedName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_403\"}", "{\"key\": \"Type\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"VF2\"}"]
$$$ graphEntryName = id_r7ETRAC_30
$$$ subgraphEntryName = id_r7ETRAC_220
$$$ typeN = VF2
$$$ subGraphDegreeName = id_r7ETRAC_401
$$$ subGraphInternalVerticesSortedName = id_r7ETRAC_403
$$$$$ graph_degree        = 6 5 3 4 7 2 9
$$$$$ subgraph_degree        = 2 3 2 1
$$$$$ degree sorted subgraph = 3 0 2 1
-----------------vf2 called-------------------

-----------------createInitialState called-------------------

-----------------dfs called-------------------

initialState pushed to stack(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1, core2 = -1 -1 -1 -1, mapping = {}, depth = 0, cost = 0.0, Tin1 = {}, Tout1 = {}, Tin2 = {}, Tout2 = {})
pop happened stack.size = 0


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 -1, core2 = -1 -1 -1 -1, mapping = {}, depth = 0, cost = 0.0, Tin1 = {}, Tout1 = {}, Tin2 = {}, Tout2 = {})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #7 to check = {(0, 0), (6, 0), (4, 0), (3, 0), (2, 0), (1, 0), (5, 0)}

-----------------isFeasible called for (0,0)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [0, 6, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
nPreds = 0 6 1 4 5 2 3
mPreds = 2 1 0
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 6 1 1 3 0 6 0 6 3 2 6
mSuccs = 1 3 2 0
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 0 n2 = 0 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------isFeasible called for (6,0)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [4, 2, 0, 5, 3, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
nPreds = 4 2 0 5 3 1 6
mPreds = 2 1 0
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 1 3 0 0 6 3 2 6 4 6 0 6 2 4 6 1
mSuccs = 1 3 2 0
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 0, 2, 5, 1, 3, 6]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 6 n2 = 0 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------isFeasible called for (4,0)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 0, 5, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
nPreds = 4 0 5 6 1 2 3
mPreds = 2 1 0
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 2 4 6 1 6 1 3 0 0 6 3 2 6 4 6 0
mSuccs = 1 3 2 0
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [4, 0, 5, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [4, 0, 5, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [4, 0, 5, 6, 1, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 4 n2 = 0 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------isFeasible called for (3,0)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 1, 4, 2, 0, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
nPreds = 6 1 4 2 0 5 3
mPreds = 2 1 0
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 2 4 6 1
mSuccs = 1 3 2 0
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 1, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [1, 6, 2, 4, 0, 3, 5]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 5, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 3 n2 = 0 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------isFeasible called for (2,0)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
nPreds = 3 4 0 5 6 1 2
mPreds = 2 1 0
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 2 4 6 1
mSuccs = 1 3 2 0
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 5, 0, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 2 n2 = 0 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------isFeasible called for (1,0)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 5, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
nPreds = 4 6 2 0 5 3 1
mPreds = 2 1 0
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 3 6 0 2 6 0 1 3 4 6 0 6 2 4 6 1
mSuccs = 1 3 2 0
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 5, 2, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
getPredecessors retrun preds = [4, 6, 0, 5, 2, 1, 3]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [6, 4, 0, 5, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [6, 4, 0, 5, 1, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 1 n2 = 0 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------isFeasible called for (5,0)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 5

-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = []
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
nPreds = 
mPreds = 2 1 0
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 4 0 1 3 2 6 4 1 4 6 0 0 6 3 2 6 6
mSuccs = 1 3 2 0
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 5

-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = []
-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
getPredecessors retrun preds = [2, 1, 0]
Feasibility returned False because of Rin
end of checking all current candidates

pop happened stack.size = 5


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 0 -1 -1 -1 -1 -1, core2 = 1 -1 -1 -1, mapping = {(1, 0)}, depth = 1, cost = 0.0, Tin1 = {4, 6}, Tout1 = {0, 6, 3}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(3, 1), (0, 1), (6, 1)}

-----------------isFeasible called for (3,1)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
nPreds = 6 1 4 0 5 2 3
mPreds = 0 2 1
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 2 4 6 1
mSuccs = 3 2 0 1
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [1, 6, 2, 4, 0, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 2, 5, 3]
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 3 n2 = 1 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------isFeasible called for (0,1)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
nPreds = 6 0 1 4 2 5 3
mPreds = 0 2 1
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 6 1 1 3 0 6 0 6 3 2 6
mSuccs = 3 2 0 1
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [0, 6, 1, 4, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 0 n2 = 1 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------isFeasible called for (6,1)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 2, 0, 5, 3, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
nPreds = 4 2 0 5 3 1 6
mPreds = 0 2 1
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 1 3 0 0 6 3 2 6 4 6 0 6 2 4 6 1
mSuccs = 3 2 0 1
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 2, 0, 5, 3, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 2, 0, 5, 3, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 2, 0, 5, 3, 1, 6]
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 6 n2 = 1 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
end of checking all current candidates

pop happened stack.size = 7


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 0 -1 -1 -1 -1 1, core2 = 1 6 -1 -1, mapping = {(6, 1), (1, 0)}, depth = 2, cost = 0.0, Tin1 = {5, 0, 4, 2, 3}, Tout1 = {0, 3}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #2 to check = {(3, 2), (0, 2)}

-----------------isFeasible called for (3,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [1, 6, 4, 0, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 1 6 4 0 2 5 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 1, 4, 2, 0, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 1, 4, 2, 0, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [6, 1, 4, 2, 0, 5, 3]
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 3 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent10
Feasibility returned False because of RsemanticFeasible
-----------------isFeasible called for (0,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [0, 6, 1, 4, 2, 3, 5]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 0 6 1 4 2 3 5
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 6 1 1 3 0 6 0 6 3 2 6
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 2, 5, 3]
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 0 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent10
Feasibility returned False because of RsemanticFeasible
end of checking all current candidates

pop happened stack.size = 6


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = 1 0 -1 -1 -1 -1 -1, core2 = 1 0 -1 -1, mapping = {(0, 1), (1, 0)}, depth = 2, cost = 0.0, Tin1 = {4, 6}, Tout1 = {4, 6, 3}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(3, 2), (4, 2), (6, 2)}

-----------------isFeasible called for (3,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 0, 4, 3, 1, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [1, 6, 2, 0, 4, 3, 5]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 1 6 2 0 4 3 5
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [0, 2, 4, 1, 3, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 5, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 3 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent10
Feasibility returned False because of RsemanticFeasible
-----------------isFeasible called for (4,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [0, 2, 4, 1, 3, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [4, 0, 5, 1, 6, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 0 5 1 6 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 2 4 6 1 6 1 3 0 0 3 6 2 6 4 6 0
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [4, 0, 5, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [0, 4, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [0, 4, 2, 1, 5, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [0, 4, 5, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [0, 4, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 5, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [0, 4, 5, 6, 1, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [0, 4, 5]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 4 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [0, 4, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------isFeasible called for (6,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [0, 4, 2, 1, 5, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [0, 4, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [0, 4, 2, 1, 5, 3, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 0 4 2 1 5 3 6
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 1 0 3 0 6 3 4 0 6 2 6 2 4 6 1 6
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [4, 2, 0, 5, 3, 1, 6]
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 5, 0, 3, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 6 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
end of checking all current candidates

pop happened stack.size = 7


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = 1 0 -1 -1 -1 -1 2, core2 = 1 0 6 -1, mapping = {(0, 1), (1, 0), (6, 2)}, depth = 3, cost = 0.0, Tin1 = {5, 4, 2, 3}, Tout1 = {4, 3}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #2 to check = {(4, 3), (3, 3)}

-----------------isFeasible called for (4,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 5, 3, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [4, 0, 5, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 0 5 6 1 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 2 4 6 1 6 1 3 0 0 6 3 2 6 4 6 0
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (3,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 1 4 0 5 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 6


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = 1 0 -1 -1 2 -1 -1, core2 = 1 0 4 -1, mapping = {(0, 1), (1, 0), (4, 2)}, depth = 3, cost = 0.0, Tin1 = {5, 6}, Tout1 = {6, 2, 3}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(2, 3), (3, 3), (6, 3)}

-----------------isFeasible called for (2,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 3 4 0 5 6 1 2
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (3,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 1 4 0 5 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (6,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 2 4 0 3 5 1 6
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 1 3 0 0 6 3 2 6 4 6 0 6 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 5


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 0 -1 1 -1 -1 -1, core2 = 1 3 -1 -1, mapping = {(3, 1), (1, 0)}, depth = 2, cost = 0.0, Tin1 = {4, 6}, Tout1 = {0, 6, 2}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(0, 2), (6, 2), (2, 2)}

-----------------isFeasible called for (0,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 5, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 0 1 4 2 5 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 6 1 1 3 0 6 0 6 3 2 6
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 5, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [0, 6, 1, 4, 2, 5, 3]
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 0 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent10
Feasibility returned False because of RsemanticFeasible
-----------------isFeasible called for (6,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 3, 5, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 3, 5, 0, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 2 4 3 5 0 1 6
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 1 3 0 0 6 3 2 6 4 6 0 6 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 6 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 3, 5, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------isFeasible called for (2,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 3 4 0 5 6 1 2
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 5, 0, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 2 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent10
Feasibility returned False because of RsemanticFeasible
end of checking all current candidates

pop happened stack.size = 5


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 0 -1 1 -1 -1 2, core2 = 1 3 6 -1, mapping = {(3, 1), (1, 0), (6, 2)}, depth = 3, cost = 0.0, Tin1 = {5, 0, 4, 2}, Tout1 = {0, 2}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #2 to check = {(0, 3), (2, 3)}

-----------------isFeasible called for (0,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 0 1 4 5 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 6 1 1 3 0 6 0 6 3 2 6
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (2,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 5, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
getPredecessors retrun preds = [4, 3, 1, 6, 2, 5, 0]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 3 1 6 2 5 0
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 4


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 -1 0 -1 -1 -1 -1, core2 = 2 -1 -1 -1, mapping = {(2, 0)}, depth = 1, cost = 0.0, Tin1 = {4, 3}, Tout1 = {6}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #1 to check = {(6, 1)}

-----------------isFeasible called for (6,1)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
nPreds = 2 4 0 3 5 1 6
mPreds = 0 2 1
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 1 3 0 0 6 3 2 6 4 6 0 6 2 4 6 1
mSuccs = 3 2 0 1
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 3, 5, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 3, 5, 0, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 3, 0, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [2, 4, 3, 0, 5, 1, 6]
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 6 n2 = 1 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
end of checking all current candidates

pop happened stack.size = 4


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 -1 0 -1 -1 -1 1, core2 = 2 6 -1 -1, mapping = {(2, 0), (6, 1)}, depth = 2, cost = 0.0, Tin1 = {5, 1, 0, 4, 3}, Tout1 = {1, 0, 3}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(3, 2), (0, 2), (1, 2)}

-----------------isFeasible called for (3,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 1, 4, 2, 0, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 1 4 2 0 5 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 6 4 3 6 0 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [0, 2, 4, 1, 3, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [1, 6, 0, 2, 4, 3, 5]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [6, 1, 4, 2, 0, 3, 5]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 1, 4, 2, 0, 5, 3]
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 3 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------isFeasible called for (0,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 0 1 4 5 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 6 1 1 3 0 6 0 6 3 2 6
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 5, 1, 2, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [0, 6, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 0 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent20
Feasibility returned False because of RsemanticFeasible
-----------------isFeasible called for (1,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 5, 2, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 4, 0, 5, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 4 0 5 1 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 3 6 0 2 6 0 1 3 4 0 6 6 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 4, 0, 5, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 3, 5, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 6, 2, 3, 5, 0, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 3, 4, 0, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [4, 6, 2, 3, 0, 5, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 1 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent20
Feasibility returned False because of RsemanticFeasible
end of checking all current candidates

pop happened stack.size = 4


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 -1 0 2 -1 -1 1, core2 = 2 6 3 -1, mapping = {(3, 2), (2, 0), (6, 1)}, depth = 3, cost = 0.0, Tin1 = {5, 1, 0, 4}, Tout1 = {1, 0}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #2 to check = {(0, 3), (1, 3)}

-----------------isFeasible called for (0,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 3, 4, 0, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 0 1 4 5 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 6 1 1 3 0 6 0 6 3 2 6
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (1,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 5, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 6 2 0 5 3 1
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 3 6 0 2 6 0 1 3 4 6 0 6 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 3


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 -1 -1 0 -1 -1 -1, core2 = 3 -1 -1 -1, mapping = {(3, 0)}, depth = 1, cost = 0.0, Tin1 = {1, 6}, Tout1 = {6, 2}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #2 to check = {(2, 1), (6, 1)}

-----------------isFeasible called for (2,1)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
nPreds = 3 4 0 5 6 1 2
mPreds = 0 2 1
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 2 4 6 1
mSuccs = 3 2 0 1
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 5, 0, 6, 1, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 2 n2 = 1 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------isFeasible called for (6,1)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
nPreds = 2 4 0 3 5 1 6
mPreds = 0 2 1
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 1 3 0 0 6 3 2 6 4 6 0 6 2 4 6 1
mSuccs = 3 2 0 1
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 3, 5, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 3, 5, 0, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 6 n2 = 1 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
end of checking all current candidates

pop happened stack.size = 4


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 -1 -1 0 -1 -1 1, core2 = 3 6 -1 -1, mapping = {(3, 0), (6, 1)}, depth = 2, cost = 0.0, Tin1 = {5, 1, 0, 4, 2}, Tout1 = {1, 0, 2}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(0, 2), (1, 2), (2, 2)}

-----------------isFeasible called for (0,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 5, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 0 1 4 2 5 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 1 6 1 3 0 6 6 0 3 2 6
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 3, 4, 0, 1, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [0, 6, 1, 4, 2, 3, 5]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [0, 2, 4, 1, 3, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [0, 6, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 2, 5, 3]
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 0 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent30
Feasibility returned False because of RsemanticFeasible
-----------------isFeasible called for (1,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 3, 5, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 6 2 0 3 5 1
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 3 6 0 2 6 0 1 3 4 6 0 6 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 3, 5, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
getPredecessors retrun preds = [4, 6, 0, 2, 5, 1, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 5, 1, 3]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 1 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------isFeasible called for (2,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 2, 0, 5]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 3 6 1 2 0 5
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 2, 0, 5]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 2, 0, 5]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 2 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent30
Feasibility returned False because of RsemanticFeasible
end of checking all current candidates

pop happened stack.size = 4


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 2 -1 0 -1 -1 1, core2 = 3 6 1 -1, mapping = {(3, 0), (6, 1), (1, 2)}, depth = 3, cost = 0.0, Tin1 = {5, 0, 4, 2}, Tout1 = {0, 2}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #2 to check = {(0, 3), (2, 3)}

-----------------isFeasible called for (0,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 0 1 4 5 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 6 1 1 3 0 6 0 6 3 2 6
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (2,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 3 4 0 5 6 1 2
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 3


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 -1 1 0 -1 -1 -1, core2 = 3 2 -1 -1, mapping = {(2, 1), (3, 0)}, depth = 2, cost = 0.0, Tin1 = {1, 4, 6}, Tout1 = {6}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #1 to check = {(6, 2)}

-----------------isFeasible called for (6,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 0, 5, 3, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 2 4 0 5 3 1 6
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 1 3 0 0 6 3 2 6 4 6 0 6 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 2, 0, 5, 1, 3, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 2, 0, 5, 3, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 0, 4, 1, 5, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 0, 4, 1, 5, 3, 6]
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 6 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
end of checking all current candidates

pop happened stack.size = 3


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 -1 1 0 -1 -1 2, core2 = 3 2 6 -1, mapping = {(2, 1), (3, 0), (6, 2)}, depth = 3, cost = 0.0, Tin1 = {5, 1, 0, 4}, Tout1 = {1, 0}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #2 to check = {(0, 3), (1, 3)}

-----------------isFeasible called for (0,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 5, 2, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [0, 6, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 0 6 1 4 5 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 6 1 1 3 0 6 0 6 3 2 6
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (1,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 5, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 6 2 0 5 3 1
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 3 6 0 2 6 0 1 3 4 6 0 6 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 2


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 -1 -1 -1 0 -1 -1, core2 = 4 -1 -1 -1, mapping = {(4, 0)}, depth = 1, cost = 0.0, Tin1 = {5, 0}, Tout1 = {1, 6, 2}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(2, 1), (1, 1), (6, 1)}

-----------------isFeasible called for (2,1)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 3, 4, 0, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 5, 0, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
nPreds = 3 4 5 0 6 1 2
mPreds = 0 2 1
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 2 4 6 1
mSuccs = 3 2 0 1
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
getPredecessors retrun preds = [4, 3, 1, 6, 2, 0, 5]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 2 n2 = 1 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------isFeasible called for (1,1)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 5, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 6, 2, 5, 0, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
nPreds = 4 6 2 5 0 3 1
mPreds = 0 2 1
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 3 6 0 2 6 0 1 3 4 6 0 6 2 4 6 1
mSuccs = 3 2 0 1
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 5, 3, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 6, 2, 5, 3, 0, 1]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 4, 5, 0, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 3, 5, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 1 n2 = 1 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------isFeasible called for (6,1)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
nPreds = 2 4 0 3 5 1 6
mPreds = 0 2 1
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 1 3 0 0 6 3 2 6 4 6 0 6 2 4 6 1
mSuccs = 3 2 0 1
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [4, 2, 0, 5, 3, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 6 n2 = 1 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
end of checking all current candidates

pop happened stack.size = 4


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 -1 -1 -1 0 -1 1, core2 = 4 6 -1 -1, mapping = {(4, 0), (6, 1)}, depth = 2, cost = 0.0, Tin1 = {5, 1, 0, 2, 3}, Tout1 = {1, 0, 2, 3}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #4 to check = {(3, 2), (0, 2), (1, 2), (2, 2)}

-----------------isFeasible called for (3,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 1 4 0 2 5 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 5, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 1, 4, 2, 5, 0, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 2, 5, 3]
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 3 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent40
Feasibility returned False because of RsemanticFeasible
-----------------isFeasible called for (0,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [0, 6, 1, 4, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 0 6 1 4 2 5 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 6 1 1 3 0 6 0 6 3 2 6
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [0, 6, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 2, 5, 3]
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 0 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------isFeasible called for (1,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 3, 5, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 6 2 0 3 5 1
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 3 0 0 3 1 2 6 4 6 0 6 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 6, 5, 2, 0, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 6, 5, 2, 0, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 6, 5, 2, 0, 3, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 1 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent40
Feasibility returned False because of RsemanticFeasible
-----------------isFeasible called for (2,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 5, 2, 0]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 3 6 1 5 2 0
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 5, 2, 0]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 5, 2, 0]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 5, 2, 0]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 2 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent40
Feasibility returned False because of RsemanticFeasible
end of checking all current candidates

pop happened stack.size = 4


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = 2 -1 -1 -1 0 -1 1, core2 = 4 6 0 -1, mapping = {(4, 0), (6, 1), (0, 2)}, depth = 3, cost = 0.0, Tin1 = {5, 1, 2, 3}, Tout1 = {1, 2, 3}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(2, 3), (1, 3), (3, 3)}

-----------------isFeasible called for (2,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 0, 3, 4, 1, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
getPredecessors retrun preds = [4, 3, 1, 6, 2, 0, 5]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 3 1 6 2 0 5
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 0 3 0 6 3 0 4 6 2 6 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (1,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 6, 5, 2, 0, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 6 5 2 0 3 1
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 3 6 0 2 6 1 3 0 4 6 0 6 4 6 2 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (3,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 5, 2, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [1, 6, 4, 0, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 1 6 4 0 5 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 2 6 6 0 1 3 0 4 6 3 6 0 2 4 1 6
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 3


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 1 -1 -1 0 -1 -1, core2 = 4 1 -1 -1, mapping = {(1, 1), (4, 0)}, depth = 2, cost = 0.0, Tin1 = {5, 0, 6}, Tout1 = {0, 6, 2, 3}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #4 to check = {(3, 2), (0, 2), (6, 2), (2, 2)}

-----------------isFeasible called for (3,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [1, 6, 4, 0, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 1 6 4 0 2 5 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 4 6 0 6 0 3 4 2 1 6
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [1, 6, 4, 2, 0, 5, 3]
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 3 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent40
Feasibility returned False because of RsemanticFeasible
-----------------isFeasible called for (0,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [0, 6, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 0 6 1 4 5 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 6 1 1 3 0 6 0 6 3 2 6
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [0, 6, 1, 4, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [0, 6, 1, 4, 5, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 0 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------isFeasible called for (6,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 0, 2, 5, 1, 3, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 0 2 5 1 3 6
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 1 3 0 0 6 3 2 6 4 6 0 6 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 0, 2, 5, 1, 3, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 2, 0, 5, 3, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 2, 0, 5, 3, 1, 6]
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 6 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent40
Feasibility returned False because of RsemanticFeasible
-----------------isFeasible called for (2,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 3 4 0 5 6 1 2
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 2, 0, 5]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 1, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
getPredecessors retrun preds = [4, 3, 1, 6, 2, 0, 5]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
getPredecessors retrun preds = [4, 3, 1, 6, 2, 0, 5]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 2 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent40
Feasibility returned False because of RsemanticFeasible
end of checking all current candidates

pop happened stack.size = 3


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = 2 1 -1 -1 0 -1 -1, core2 = 4 1 0 -1, mapping = {(1, 1), (4, 0), (0, 2)}, depth = 3, cost = 0.0, Tin1 = {5, 6}, Tout1 = {6, 2, 3}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(2, 3), (3, 3), (6, 3)}

-----------------isFeasible called for (2,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 3 4 0 5 6 1 2
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (3,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [1, 6, 4, 0, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 1 6 4 0 2 5 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (6,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 2 4 0 3 5 1 6
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 1 3 0 0 6 3 2 6 4 0 6 6 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 2


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 -1 1 -1 0 -1 -1, core2 = 4 2 -1 -1, mapping = {(2, 1), (4, 0)}, depth = 2, cost = 0.0, Tin1 = {5, 0, 3}, Tout1 = {1, 6}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #2 to check = {(1, 2), (6, 2)}

-----------------isFeasible called for (1,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 5, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 6 2 0 5 3 1
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 3 6 0 2 6 0 1 3 4 6 0 6 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 5, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 5, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 5, 3, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 1 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent40
Feasibility returned False because of RsemanticFeasible
-----------------isFeasible called for (6,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 2 4 0 3 5 1 6
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 1 3 0 0 6 3 2 6 4 6 0 6 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [2, 4, 0, 3, 5, 1, 6]
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 6 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent40
Feasibility returned False because of RsemanticFeasible
end of checking all current candidates

pop happened stack.size = 1


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 -1 -1 -1 -1 -1 0, core2 = 6 -1 -1 -1, mapping = {(6, 0)}, depth = 1, cost = 0.0, Tin1 = {5, 1, 0, 4, 2, 3}, Tout1 = {1, 0, 3}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(1, 1), (3, 1), (0, 1)}

-----------------isFeasible called for (1,1)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 5, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
nPreds = 4 6 2 0 5 3 1
mPreds = 0 2 1
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 3 6 0 2 6 0 1 3 4 6 0 6 2 4 6 1
mSuccs = 3 2 0 1
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
getPredecessors retrun preds = [4, 6, 0, 2, 5, 1, 3]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 5, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 5, 3, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 1 n2 = 1 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------isFeasible called for (3,1)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
nPreds = 6 1 4 0 2 5 3
mPreds = 0 2 1
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 2 4 6 1
mSuccs = 3 2 0 1
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [1, 6, 4, 0, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 1, 4, 2, 0, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 5, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 1, 4, 2, 5, 0, 3]
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 3 n2 = 1 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------isFeasible called for (0,1)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
nPreds = 6 0 1 4 2 5 3
mPreds = 0 2 1
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 6 1 1 3 0 6 0 6 3 2 6
mSuccs = 3 2 0 1
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [0, 6, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 2, 5, 3]
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 0 n2 = 1 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
end of checking all current candidates

pop happened stack.size = 3


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = 1 -1 -1 -1 -1 -1 0, core2 = 6 0 -1 -1, mapping = {(6, 0), (0, 1)}, depth = 2, cost = 0.0, Tin1 = {5, 1, 4, 2, 3}, Tout1 = {1, 4, 3}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(3, 2), (1, 2), (4, 2)}

-----------------isFeasible called for (3,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 1, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [1, 6, 2, 4, 0, 3, 5]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 1 6 2 4 0 3 5
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [1, 6, 4, 2, 0, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [1, 6, 2, 4, 0, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 5, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 3 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------isFeasible called for (1,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 3, 5, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 6 2 0 3 5 1
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 3 6 0 2 6 0 1 3 4 6 0 6 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 5, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 3, 5, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 5, 3, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 1 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------isFeasible called for (4,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [4, 0, 5, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 0 5 6 1 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 2 4 6 1 6 1 3 0 0 6 3 2 6 4 6 0
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [4, 0, 5, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [4, 0, 5, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [4, 0, 5, 6, 1, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 4 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
end of checking all current candidates

pop happened stack.size = 5


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = 1 -1 -1 -1 2 -1 0, core2 = 6 0 4 -1, mapping = {(6, 0), (0, 1), (4, 2)}, depth = 3, cost = 0.0, Tin1 = {5, 1, 2, 3}, Tout1 = {1, 2, 3}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(2, 3), (1, 3), (3, 3)}

-----------------isFeasible called for (2,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 5, 2, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [3, 4, 5, 0, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 3 4 5 0 6 1 2
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 3 1 0 2 6 0 3 6 4 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (1,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 3, 0, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [4, 6, 2, 3, 0, 5, 1]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 6 2 3 0 5 1
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 3 6 0 2 6 0 1 3 4 6 0 6 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (3,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 3, 4, 0, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [1, 6, 2, 3, 4, 0, 5]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 1 6 2 3 4 0 5
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 4 2 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 4


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = 1 2 -1 -1 -1 -1 0, core2 = 6 0 1 -1, mapping = {(6, 0), (0, 1), (1, 2)}, depth = 3, cost = 0.0, Tin1 = {5, 4, 2, 3}, Tout1 = {4, 3}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #2 to check = {(4, 3), (3, 3)}

-----------------isFeasible called for (4,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 5, 0, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 5 0 6 1 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 2 4 6 1 6 1 3 0 0 6 3 2 6 4 6 0
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (3,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 0, 2, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [1, 6, 4, 5, 0, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 1 6 4 5 0 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 3


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = 1 -1 -1 2 -1 -1 0, core2 = 6 0 3 -1, mapping = {(6, 0), (3, 2), (0, 1)}, depth = 3, cost = 0.0, Tin1 = {5, 1, 4, 2}, Tout1 = {1, 4, 2}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(2, 3), (4, 3), (1, 3)}

-----------------isFeasible called for (2,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 5, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 2, 5, 0]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 3 6 1 2 5 0
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (4,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 5, 0, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 5 0 6 1 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 2 4 6 1 6 1 3 0 0 6 3 2 6 4 6 0
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (1,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 6, 5, 2, 0, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 6 5 2 0 3 1
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 3 6 0 2 6 0 1 3 4 6 0 6 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 2


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 -1 -1 1 -1 -1 0, core2 = 6 3 -1 -1, mapping = {(6, 0), (3, 1)}, depth = 2, cost = 0.0, Tin1 = {5, 1, 0, 4, 2}, Tout1 = {1, 0, 2}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(0, 2), (1, 2), (2, 2)}

-----------------isFeasible called for (0,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 0 1 4 5 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 6 1 1 3 0 6 0 6 3 2 6
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 0, 2, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 0 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------isFeasible called for (1,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 6, 5, 2, 0, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 6 5 2 0 3 1
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 3 6 0 2 6 0 1 3 4 6 0 6 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [0, 4, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
getPredecessors retrun preds = [4, 6, 0, 2, 5, 1, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 6, 5, 2, 0, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 4, 0, 5, 1, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 1 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------isFeasible called for (2,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 5, 2, 0]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 3 6 1 5 2 0
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 5, 2, 0]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 5, 2, 0]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 5, 2, 0]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 2 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
end of checking all current candidates

pop happened stack.size = 4


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 -1 2 1 -1 -1 0, core2 = 6 3 2 -1, mapping = {(6, 0), (3, 1), (2, 2)}, depth = 3, cost = 0.0, Tin1 = {5, 1, 0, 4}, Tout1 = {1, 0}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #2 to check = {(0, 3), (1, 3)}

-----------------isFeasible called for (0,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 0 1 4 5 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 6 1 1 3 0 6 0 6 3 2 6
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (1,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 6, 5, 2, 0, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 6 5 2 0 3 1
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 3 6 0 2 6 0 1 3 4 6 0 6 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 3


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 2 -1 1 -1 -1 0, core2 = 6 3 1 -1, mapping = {(6, 0), (3, 1), (1, 2)}, depth = 3, cost = 0.0, Tin1 = {5, 0, 4, 2}, Tout1 = {0, 2}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #2 to check = {(0, 3), (2, 3)}

-----------------isFeasible called for (0,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 0 1 4 5 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 6 1 3 1 0 6 0 6 3 2 6
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (2,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 5, 2, 0]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 3 6 1 5 2 0
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 2


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = 2 -1 -1 1 -1 -1 0, core2 = 6 3 0 -1, mapping = {(6, 0), (3, 1), (0, 2)}, depth = 3, cost = 0.0, Tin1 = {5, 1, 4, 2}, Tout1 = {1, 4, 2}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(2, 3), (4, 3), (1, 3)}

-----------------isFeasible called for (2,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 5, 2, 0]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 3 6 1 5 2 0
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 4 6 2 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (4,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 5, 0, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 5 0 6 1 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 2 4 6 1 6 1 3 0 0 6 3 2 6 4 6 0
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (1,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 6, 5, 2, 0, 1, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 6 5 2 0 1 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 3 6 0 2 6 0 1 3 4 6 0 6 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 1


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 1 -1 -1 -1 -1 0, core2 = 6 1 -1 -1, mapping = {(6, 0), (1, 1)}, depth = 2, cost = 0.0, Tin1 = {5, 0, 4, 2, 3}, Tout1 = {0, 3}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #2 to check = {(3, 2), (0, 2)}

-----------------isFeasible called for (3,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 1, 4, 5, 2, 0, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 1 4 5 2 0 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 1, 4, 5, 0, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 1, 4, 5, 2, 0, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 1, 4, 5, 2, 0, 3]
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 3 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------isFeasible called for (0,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 5, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 2, 5, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 0 1 4 2 5 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 6 1 1 3 0 6 0 6 3 2 6
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 0 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
end of checking all current candidates

pop happened stack.size = 2


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = 2 1 -1 -1 -1 -1 0, core2 = 6 1 0 -1, mapping = {(6, 0), (1, 1), (0, 2)}, depth = 3, cost = 0.0, Tin1 = {5, 4, 2, 3}, Tout1 = {4, 3}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #2 to check = {(4, 3), (3, 3)}

-----------------isFeasible called for (4,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 5, 0, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 5 0 6 1 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 2 1 1 3 0 6 0 6 3 2 6 4 6 0
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (3,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 1, 4, 5, 2, 0, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 1 4 5 2 0 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 1


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = -1 1 -1 2 -1 -1 0, core2 = 6 1 3 -1, mapping = {(6, 0), (1, 1), (3, 2)}, depth = 3, cost = 0.0, Tin1 = {5, 0, 4, 2}, Tout1 = {0, 2}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #2 to check = {(0, 3), (2, 3)}

-----------------isFeasible called for (0,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 0

-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 0, 2, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 0, 1, 4, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 0 1 4 5 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 4 6 0 2 4 6 1 1 3 0 6 0 6 3 2 6
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (2,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 5, 2, 0]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 3 6 1 5 2 0
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 3 1 0 2 6 0 3 6 4 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 0


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = 0 -1 -1 -1 -1 -1 -1, core2 = 0 -1 -1 -1, mapping = {(0, 0)}, depth = 1, cost = 0.0, Tin1 = {1, 6}, Tout1 = {4, 6}, Tin2 = {2}, Tout2 = {1})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #2 to check = {(4, 1), (6, 1)}

-----------------isFeasible called for (4,1)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 0, 2, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 5, 0, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
nPreds = 4 5 0 6 1 2 3
mPreds = 0 2 1
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 2 4 6 1 6 1 3 0 0 6 3 2 6 4 6 0
mSuccs = 3 2 0 1
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 5, 0, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 5, 0, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 5, 0, 6, 1, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 4 n2 = 1 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------isFeasible called for (6,1)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 5, 2, 0, 3, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
nPreds = 4 5 2 0 3 1 6
mPreds = 0 2 1
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 1 3 0 0 6 3 2 6 4 6 0 6 2 4 6 1
mSuccs = 3 2 0 1
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 5, 2, 0, 3, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 5, 2, 0, 3, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 5, 2, 0, 3, 1, 6]
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [0, 2, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 6 n2 = 1 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 0, 2, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
end of checking all current candidates

pop happened stack.size = 1


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = 0 -1 -1 -1 -1 -1 1, core2 = 0 6 -1 -1, mapping = {(0, 0), (6, 1)}, depth = 2, cost = 0.0, Tin1 = {5, 1, 4, 2, 3}, Tout1 = {1, 4, 3}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(3, 2), (1, 2), (4, 2)}

-----------------isFeasible called for (3,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 1, 4, 5, 2, 0, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 1 4 5 2 0 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 4 6 2 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 0, 2, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 1, 4, 5, 0, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 0, 2, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 5, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 3 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent00
Feasibility returned False because of RsemanticFeasible
-----------------isFeasible called for (1,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 6, 5, 2, 0, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 6 5 2 0 3 1
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 3 0 0 3 1 2 6 4 6 0 6 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 6, 5, 2, 0, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 6, 5, 2, 0, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 6, 5, 2, 0, 3, 1]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 1 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------isFeasible called for (4,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 5, 0, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 5 0 6 1 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 2 4 6 1 6 1 3 0 0 6 3 2 6 4 6 0
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 5, 0, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 5, 0, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 5, 0, 6, 1, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 4 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent00
Feasibility returned False because of RsemanticFeasible
end of checking all current candidates

pop happened stack.size = 1


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = 0 2 -1 -1 -1 -1 1, core2 = 0 6 1 -1, mapping = {(0, 0), (6, 1), (1, 2)}, depth = 3, cost = 0.0, Tin1 = {5, 4, 2, 3}, Tout1 = {4, 3}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #2 to check = {(4, 3), (3, 3)}

-----------------isFeasible called for (4,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 4

-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 0, 2, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 5, 0, 6, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 5 0 6 1 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 2 4 6 1 6 1 3 0 0 6 3 2 6 4 6 0
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (3,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 0, 2, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [6, 1, 4, 5, 0, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 1 4 5 0 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 0


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = 0 -1 -1 -1 1 -1 -1, core2 = 0 4 -1 -1, mapping = {(0, 0), (4, 1)}, depth = 2, cost = 0.0, Tin1 = {5, 1, 6}, Tout1 = {1, 6, 2}, Tin2 = {2}, Tout2 = {2, 3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(1, 2), (6, 2), (2, 2)}

-----------------isFeasible called for (1,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 6, 5, 2, 0, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 6 5 2 0 3 1
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 3 6 0 2 6 0 1 3 4 6 0 6 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
getPredecessors retrun preds = [4, 6, 5, 2, 0, 1, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 0, 2, 5, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 4, 0, 5, 1, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [6, 4, 0, 5, 1, 2, 3]
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 1 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------isFeasible called for (6,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 5, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 2, 5, 0, 3, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 2 5 0 3 1 6
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 1 3 0 0 6 3 2 6 4 6 0 6 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 5, 2, 0, 3, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 5, 2, 0, 3, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 0, 2, 1, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 5, 0, 2, 1, 3, 6]
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 6 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

-----------------isFeasible PASSED ALL CHECKS-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------isFeasible called for (2,2)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 5, 2, 0]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 3 6 1 5 2 0
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 2 4 6 1
mSuccs = 0 1 3 2
-----------------Rin called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 5, 2, 0]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rout called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 5, 2, 0]
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------Rnew called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
getPredecessors retrun preds = [4, 3, 6, 1, 5, 2, 0]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
getPredecessors retrun preds = [1, 0, 2]
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
-----------------RsemanticFeasible called-------------------

-----------------for n1 = 2 n2 = 2 -------------------

-----------------nodesLabelCompatible called-------------------

-----------------edgesLabelCompatible called-------------------

Edge labels are Inconsistent00
Feasibility returned False because of RsemanticFeasible
end of checking all current candidates

pop happened stack.size = 1


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = 0 -1 -1 -1 1 -1 2, core2 = 0 4 6 -1, mapping = {(0, 0), (4, 1), (6, 2)}, depth = 3, cost = 0.0, Tin1 = {5, 1, 2, 3}, Tout1 = {1, 2, 3}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(2, 3), (1, 3), (3, 3)}

-----------------isFeasible called for (2,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 3 4 0 5 6 1 2
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (1,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 1

-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [0, 6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
getPredecessors retrun preds = [4, 6, 2, 0, 5, 3, 1]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 6 2 0 5 3 1
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 3 6 0 2 6 0 1 3 4 6 0 6 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (3,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 1 4 0 5 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

pop happened stack.size = 0


working state now is:(n1 = 7, n2 = 4, D1 = {0..6}, D2 = {0..3}, core1 = 0 2 -1 -1 1 -1 -1, core2 = 0 4 1 -1, mapping = {(0, 0), (4, 1), (1, 2)}, depth = 3, cost = 0.0, Tin1 = {5, 6}, Tout1 = {6, 2, 3}, Tin2 = {}, Tout2 = {3})
-----------------getCandidatePairsOpti called-------------------

candidatesOpti has: #3 to check = {(2, 3), (3, 3), (6, 3)}

-----------------isFeasible called for (2,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 2

-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 2, 0, 5, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
getPredecessors retrun preds = [3, 4, 0, 5, 6, 1, 2]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 3 4 0 5 6 1 2
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 1 3 0 0 6 3 2 6 4 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (3,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [6, 4]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 0, 5]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [2, 4, 0, 3, 5, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [3, 4]-------------------
getPredecessors retrun preds = [6, 1, 4, 0, 5, 2, 3]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 6 1 4 0 5 2 3
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 6 2 0 1 3 6 0 4 6 3 6 0 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
-----------------isFeasible called for (6,3)-------------------
-----------------Rpred called-------------------

-----------------getPredecessors called-------------------

-----------------for 6

-----------------getInNeighbors called-------------------
-----------------for 6-------------------
-----------------inNeighbors = [4, 5, 2, 0, 3, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [4, 6]-------------------
-----------------getInNeighbors called-------------------
-----------------for 4-------------------
-----------------inNeighbors = [4, 5, 0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [6, 0, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 5-------------------
-----------------inNeighbors = []-------------------
-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [6, 1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [4, 3]-------------------
getPredecessors retrun preds = [4, 5, 2, 0, 3, 1, 6]
-----------------getPredecessors called-------------------

-----------------for 3

-----------------getInNeighbors called-------------------
-----------------for 3-------------------
-----------------inNeighbors = [1]-------------------
-----------------getInNeighbors called-------------------
-----------------for 1-------------------
-----------------inNeighbors = [0]-------------------
-----------------getInNeighbors called-------------------
-----------------for 0-------------------
-----------------inNeighbors = [2]-------------------
-----------------getInNeighbors called-------------------
-----------------for 2-------------------
-----------------inNeighbors = [1]-------------------
getPredecessors retrun preds = [1, 0, 2]
nPreds = 4 5 2 0 3 1 6
mPreds = 1 0 2
-----------------Rpred returned true-------------------

-----------------Rsucc called-------------------

nSuccs = 1 3 0 0 6 3 6 2 4 6 0 6 2 4 6 1
mSuccs = 
Feasibility returned FALSE because of Rsucc
end of checking all current candidates

inside VF2 IsoArrtemp = 
inside VF2 IsoArr     = 
Subgraph Isomorphism took 0.206453 sec
IsoDistArray = 
2023-12-05:10:47:56 [SubgraphIsomorphismVF2Msg] subgraphIsomorphismVF2Msg Line 164 INFO [Chapel] Subgraph Isomorphism took 0.206453 sec
2023-12-05:10:47:56 [SubgraphIsomorphismVF2Msg] subgraphIsomorphismVF2Msg Line 165 INFO [Chapel] created id_r7ETRAC_427 int64 0 1 (0,) 8
2023-12-05:10:47:56 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"created id_r7ETRAC_427 int64 0 1 (0,) 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:56 [ServerDaemon] run Line 685 INFO [Chapel] <<< subgraphIsomorphismVF2 took 0.20956206321716309 sec
2023-12-05:10:47:56 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after subgraphIsomorphismVF2 command is 0% pct of max memory 14970345062
2023-12-05:10:47:56 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_381, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:56 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_381\"}"]
2023-12-05:10:47:56 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_381", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:56 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0016281604766845703 sec
2023-12-05:10:47:56 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:56 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_403, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:56 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_403\"}"]
2023-12-05:10:47:56 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_403", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:56 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014860630035400391 sec
2023-12-05:10:47:56 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:56 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_391, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:56 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_391\"}"]
2023-12-05:10:47:56 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_391", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:56 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014090538024902344 sec
2023-12-05:10:47:56 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:56 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_400, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:56 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_400\"}"]
2023-12-05:10:47:56 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_400", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:56 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014939308166503906 sec
2023-12-05:10:47:56 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:56 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_401, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:56 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_401\"}"]
2023-12-05:10:47:56 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_401", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:56 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014541149139404297 sec
2023-12-05:10:47:56 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:56 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_402, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:56 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_402\"}"]
2023-12-05:10:47:56 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_402", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:56 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0014441013336181641 sec
2023-12-05:10:47:56 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:56 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_412, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:56 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_412\"}"]
2023-12-05:10:47:56 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_412", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:56 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011439323425292969 sec
2023-12-05:10:47:56 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:56 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_421, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:56 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_421\"}"]
2023-12-05:10:47:56 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_421", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:56 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011451244354248047 sec
2023-12-05:10:47:56 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:56 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_r7ETRAC_422, objType = VALUE, dtype = str)], size = 1}
2023-12-05:10:47:56 [ServerDaemon] run Line 585 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_r7ETRAC_422\"}"]
2023-12-05:10:47:56 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"deleted id_r7ETRAC_422", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:56 [ServerDaemon] run Line 685 INFO [Chapel] <<< delete took 0.0011260509490966797 sec
2023-12-05:10:47:56 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 14970345062
2023-12-05:10:47:56 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_r7ETRAC_427, objType = PDARRAY, dtype = int64), (key = printThresh, val = 100, objType = VALUE, dtype = int64)], size = 2}
2023-12-05:10:47:56 [ServerDaemon] run Line 585 INFO [Chapel] >>> str ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_r7ETRAC_427\"}", "{\"key\": \"printThresh\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"100\"}"]
2023-12-05:10:47:56 [ServerDaemon] sendRepMsg Line 311 INFO [Chapel] repMsg: {"msg":"[]", "msgType":"NORMAL", "msgFormat":"STRING", "user":"mohammad"}
2023-12-05:10:47:56 [ServerDaemon] run Line 685 INFO [Chapel] <<< str took 0.0046219825744628906 sec
2023-12-05:10:47:56 [ServerDaemon] run Line 692 INFO [Chapel] bytes of memory 0 used after str command is 0% pct of max memory 14970345062
2023-12-05:10:47:56 [ServerDaemon] run Line 570 INFO [Chapel] MessageArgs: {param_list = [], size = 0}
2023-12-05:10:47:56 [ServerDaemon] run Line 585 INFO [Chapel] >>> shutdown 
2023-12-05:10:47:56 [ServerDaemon] sendShutdownRequest Line 599 INFO [Chapel] <<< shutdown initiated by mohammad took 0.0006389617919921875 sec
2023-12-05:10:47:56 [ServerDaemon] run Line 731 INFO [Chapel] requests = 718 responseCount = 718 elapsed sec = 10
