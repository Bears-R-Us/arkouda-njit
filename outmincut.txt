

******************************************************************************************************
******************************************************************************************************
*                                                                                                    *
*                          server listening on tcp://n4.cluster.local:5555                           *
*                                arkouda server version = v2024.06.21                                *
*                                   built with chapel version2.1.0                                   *
*                                    memory limit = 973797002035                                     *
*                                      bytes of memory used = 0                                      *
*                                                                                                    *
******************************************************************************************************
******************************************************************************************************


2024-11-13:09:54:18 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [], size = 0}
2024-11-13:09:54:18 [ServerDaemon] run Line 601 INFO [Chapel] >>> connect 
2024-11-13:09:54:18 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"connected to arkouda server tcp://*:5555", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:18 [ServerDaemon] run Line 722 INFO [Chapel] <<< connect took 0.00033807754516601562 sec
2024-11-13:09:54:18 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after connect command is 0% pct of max memory 973797002035
2024-11-13:09:54:18 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [], size = 0}
2024-11-13:09:54:18 [ServerDaemon] run Line 601 INFO [Chapel] >>> getconfig []
2024-11-13:09:54:18 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"{\"arkoudaVersion\":\"v2024.06.21\", \"chplVersion\":\"2.1.0\", \"ZMQVersion\":\"4.3.5\", \"HDF5Version\":\"1.12.2\", \"serverHostname\":\"n4.cluster.local\", \"ServerPort\":5555, \"numLocales\":1, \"numPUs\":128, \"maxTaskPar\":128, \"physicalMemory\":1081996668928, \"distributionType\":\"domain(1,int(64),one)\", \"LocaleConfigs\":[{\"id\":0, \"name\":\"n4.cluster.local\", \"numPUs\":128, \"maxTaskPar\":128, \"physicalMemory\":1081996668928}], \"authenticate\":false, \"logLevel\":\"INFO\", \"logChannel\":\"CONSOLE\", \"regexMaxCaptures\":20, \"byteorder\":\"little\", \"autoShutdown\":false, \"serverInfoNoSplash\":false,\"ARROW_VERSION\":\"14.0.1\"}", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:18 [ServerDaemon] run Line 722 INFO [Chapel] <<< getconfig took 0.00013494491577148438 sec
2024-11-13:09:54:18 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after getconfig command is 0% pct of max memory 973797002035
2024-11-13:09:54:18 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = Path, val = /scratch/users/md724/arkouda-njit/arachne/data/wcc/test_network_simple_3.tsv, objType = VALUE, dtype = str), (key = Directed, val = False, objType = VALUE, dtype = bool), (key = CommentHeader, val = #, objType = VALUE, dtype = str)], size = 3}
2024-11-13:09:54:18 [ServerDaemon] run Line 601 INFO [Chapel] >>> readTSVFile ["{\"key\": \"Path\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"/scratch/users/md724/arkouda-njit/arachne/data/wcc/test_network_simple_3.tsv\"}", "{\"key\": \"Directed\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"CommentHeader\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"#\"}"]
$$$$$ we get here 1
$$$$$ we get here 2
2024-11-13:09:54:18 [ServerConfig] overMemLimit Line 378 INFO [Chapel] memory high watermark = 408 memory limit = 973797002035 projected pct memory used of 0%
2024-11-13:09:54:18 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_1 int64 51 1 [51] 8+ created id_yf6Iug0_2 int64 51 1 [51] 8+ nil", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:18 [ServerDaemon] run Line 722 INFO [Chapel] <<< readTSVFile took 0.0030760765075683594 sec
2024-11-13:09:54:18 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after readTSVFile command is 0% pct of max memory 973797002035
2024-11-13:09:54:18 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = seg_string, val = False, objType = VALUE, dtype = bool), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = shape, val = 1, objType = VALUE, dtype = int64)], size = 3}
2024-11-13:09:54:18 [ServerDaemon] run Line 601 INFO [Chapel] >>> array1D ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"shape\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"seg_string\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}"]
2024-11-13:09:54:18 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_4 int64 1 1 [1] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:18 [ServerDaemon] run Line 722 INFO [Chapel] <<< array1D took 0.0010480880737304688 sec
2024-11-13:09:54:18 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after array1D command is 0% pct of max memory 973797002035
2024-11-13:09:54:18 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = mode, val = append, objType = VALUE, dtype = str), (key = names, val = ["id_yf6Iug0_1", "id_yf6Iug0_2"], objType = LIST, dtype = str)], size = 4}
2024-11-13:09:54:18 [ServerDaemon] run Line 601 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"append\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_yf6Iug0_1\\\", \\\"id_yf6Iug0_2\\\"]\"}"]
2024-11-13:09:54:18 [ServerConfig] overMemLimit Line 378 INFO [Chapel] memory high watermark = 816 memory limit = 973797002035 projected pct memory used of 0%
2024-11-13:09:54:18 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_5 int64 102 1 [102] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:18 [ServerDaemon] run Line 722 INFO [Chapel] <<< concatenate took 0.0011920928955078125 sec
2024-11-13:09:54:18 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 973797002035
2024-11-13:09:54:18 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = objType, val = pdarray, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = names, val = ["id_yf6Iug0_2", "id_yf6Iug0_1"], objType = LIST, dtype = str), (key = mode, val = append, objType = VALUE, dtype = str)], size = 4}
2024-11-13:09:54:18 [ServerDaemon] run Line 601 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"append\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_yf6Iug0_2\\\", \\\"id_yf6Iug0_1\\\"]\"}"]
2024-11-13:09:54:18 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_6 int64 102 1 [102] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:18 [ServerDaemon] run Line 722 INFO [Chapel] <<< concatenate took 0.0008258819580078125 sec
2024-11-13:09:54:18 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 973797002035
2024-11-13:09:54:18 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = seg_string, val = False, objType = VALUE, dtype = bool), (key = shape, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = float64, objType = VALUE, dtype = str)], size = 3}
2024-11-13:09:54:18 [ServerDaemon] run Line 601 INFO [Chapel] >>> array1D ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"float64\"}", "{\"key\": \"shape\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"seg_string\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}"]
2024-11-13:09:54:18 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_7 float64 1 1 [1] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:18 [ServerDaemon] run Line 722 INFO [Chapel] <<< array1D took 0.00045609474182128906 sec
2024-11-13:09:54:18 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after array1D command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool), (key = nstr, val = 2, objType = VALUE, dtype = int64), (key = keytypes, val = ["pdarray", "pdarray"], objType = LIST, dtype = str), (key = keynames, val = ["id_yf6Iug0_5", "id_yf6Iug0_6"], objType = LIST, dtype = str)], size = 5}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_yf6Iug0_5\\\", \\\"id_yf6Iug0_6\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\", \\\"pdarray\\\"]\"}"]
2024-11-13:09:54:19 [ServerConfig] overMemLimit Line 378 INFO [Chapel] memory high watermark = 134220584 memory limit = 973797002035 projected pct memory used of 0%
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_9 int64 102 1 [102] 8+created id_yf6Iug0_10 int64 102 1 [102] 8+created id_yf6Iug0_11 int64 102 1 [102] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< unique took 0.066967010498046875 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_yf6Iug0_11, objType = PDARRAY, dtype = int64), (key = array, val = id_yf6Iug0_5, objType = PDARRAY, dtype = int64)], size = 2}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_5\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_11\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_12 int64 102 1 [102] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< [pdarray] took 0.00075697898864746094 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_yf6Iug0_11, objType = PDARRAY, dtype = int64), (key = array, val = id_yf6Iug0_6, objType = PDARRAY, dtype = int64)], size = 2}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_6\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_11\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_13 int64 102 1 [102] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< [pdarray] took 0.00071501731872558594 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = b, val = id_yf6Iug0_13, objType = PDARRAY, dtype = int64), (key = a, val = id_yf6Iug0_12, objType = PDARRAY, dtype = int64), (key = op, val = ==, objType = VALUE, dtype = str)], size = 3}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> binopvv1D ["{\"key\": \"op\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"==\"}", "{\"key\": \"a\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_12\"}", "{\"key\": \"b\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_13\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_14 bool 102 1 [102] 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< binopvv1D took 0.00067615509033203125 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after binopvv1D command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_14, objType = VALUE, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = targetDtype, val = int64, objType = VALUE, dtype = str), (key = opt, val = strict, objType = VALUE, dtype = str)], size = 4}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> cast1D ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_14\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"targetDtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"opt\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"strict\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_15 int64 102 1 [102] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< cast1D took 0.00056910514831542969 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after cast1D command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = keynames, val = ["id_yf6Iug0_15"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str)], size = 5}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_yf6Iug0_15\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_17 int64 102 1 [102] 8+created id_yf6Iug0_18 int64 1 1 [1] 8+created id_yf6Iug0_19 int64 1 1 [1] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< unique took 0.0014998912811279297 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_yf6Iug0_14, objType = PDARRAY, dtype = bool), (key = idx, val = id_yf6Iug0_19, objType = PDARRAY, dtype = int64)], size = 2}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"bool\", \"val\": \"id_yf6Iug0_14\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_19\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_20 bool 1 1 [1] 1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< [pdarray] took 0.00026798248291015625 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_15, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_15\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_15", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00019693374633789062 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = size, val = 102, objType = VALUE, dtype = int64), (key = segments, val = id_yf6Iug0_18, objType = PDARRAY, dtype = int64)], size = 2}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> sizeReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_18\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"102\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_21 int64 1 1 [1] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< sizeReduction took 0.00025010108947753906 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after sizeReduction command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_17, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_17\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_17", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00018405914306640625 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_18, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_18\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_18", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00020599365234375 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_19, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_19\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_19", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.0001888275146484375 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_20, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_20\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_20", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00014901161193847656 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_21, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_21\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_21", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00014996528625488281 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = keynames, val = ["id_yf6Iug0_12"], objType = LIST, dtype = str), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool), (key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64)], size = 5}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_yf6Iug0_12\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_23 int64 102 1 [102] 8+created id_yf6Iug0_24 int64 39 1 [39] 8+created id_yf6Iug0_25 int64 39 1 [39] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< unique took 0.0020689964294433594 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_yf6Iug0_12, objType = PDARRAY, dtype = int64), (key = idx, val = id_yf6Iug0_25, objType = PDARRAY, dtype = int64)], size = 2}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_12\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_25\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_26 int64 39 1 [39] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< [pdarray] took 0.00068497657775878906 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = keynames, val = ["id_yf6Iug0_13"], objType = LIST, dtype = str), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool), (key = assumeSortedStr, val = False, objType = VALUE, dtype = bool), (key = nstr, val = 1, objType = VALUE, dtype = int64)], size = 5}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_yf6Iug0_13\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_28 int64 102 1 [102] 8+created id_yf6Iug0_29 int64 39 1 [39] 8+created id_yf6Iug0_30 int64 39 1 [39] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< unique took 0.042746067047119141 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = idx, val = id_yf6Iug0_30, objType = PDARRAY, dtype = int64), (key = array, val = id_yf6Iug0_13, objType = PDARRAY, dtype = int64)], size = 2}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_13\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_30\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_31 int64 39 1 [39] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< [pdarray] took 0.00061202049255371094 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = stop, val = 39, objType = VALUE, dtype = int64), (key = start, val = 0, objType = VALUE, dtype = int64), (key = stride, val = 1, objType = VALUE, dtype = int64), (key = dtype, val = int64, objType = VALUE, dtype = str)], size = 4}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> arange ["{\"key\": \"start\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"0\"}", "{\"key\": \"stop\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"39\"}", "{\"key\": \"stride\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_32 int64 39 1 [39] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< arange took 0.00046896934509277344 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after arange command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = permName, val = id_yf6Iug0_23, objType = VALUE, dtype = str), (key = valName, val = id_yf6Iug0_32, objType = VALUE, dtype = str), (key = segName, val = id_yf6Iug0_24, objType = VALUE, dtype = str), (key = permute, val = True, objType = VALUE, dtype = bool), (key = size, val = 102, objType = VALUE, dtype = int64)], size = 5}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_23\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_24\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_32\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"102\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_33 int64 102 1 [102] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< broadcast took 0.00074100494384765625 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = permute, val = True, objType = VALUE, dtype = bool), (key = valName, val = id_yf6Iug0_32, objType = VALUE, dtype = str), (key = size, val = 102, objType = VALUE, dtype = int64), (key = permName, val = id_yf6Iug0_28, objType = VALUE, dtype = str), (key = segName, val = id_yf6Iug0_29, objType = VALUE, dtype = str)], size = 5}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> broadcast ["{\"key\": \"permName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_28\"}", "{\"key\": \"segName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_29\"}", "{\"key\": \"valName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_32\"}", "{\"key\": \"permute\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"102\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_34 int64 102 1 [102] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< broadcast took 0.00073909759521484375 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after broadcast command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = keytypes, val = ["pdarray"], objType = LIST, dtype = str), (key = nstr, val = 1, objType = VALUE, dtype = int64), (key = keynames, val = ["id_yf6Iug0_33"], objType = LIST, dtype = str), (key = assumeSortedStr, val = True, objType = VALUE, dtype = bool), (key = returnGroupStr, val = True, objType = VALUE, dtype = bool)], size = 5}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> unique ["{\"key\": \"returnGroupStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"assumeSortedStr\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"True\"}", "{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"keynames\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_yf6Iug0_33\\\"]\"}", "{\"key\": \"keytypes\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"pdarray\\\"]\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_36 int64 102 1 [102] 8+created id_yf6Iug0_37 int64 39 1 [39] 8+created id_yf6Iug0_38 int64 39 1 [39] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< unique took 0.0015540122985839844 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after unique command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_yf6Iug0_33, objType = PDARRAY, dtype = int64), (key = idx, val = id_yf6Iug0_38, objType = PDARRAY, dtype = int64)], size = 2}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> [pdarray] ["{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_33\"}", "{\"key\": \"idx\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_38\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_39 int64 39 1 [39] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< [pdarray] took 0.00064110755920410156 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after [pdarray] command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = segments, val = id_yf6Iug0_37, objType = PDARRAY, dtype = int64), (key = size, val = 102, objType = VALUE, dtype = int64)], size = 2}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> sizeReduction ["{\"key\": \"segments\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_37\"}", "{\"key\": \"size\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"102\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_40 int64 39 1 [39] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< sizeReduction took 0.0003719329833984375 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after sizeReduction command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = array, val = id_yf6Iug0_40, objType = PDARRAY, dtype = int64), (key = func, val = cumsum, objType = VALUE, dtype = str)], size = 2}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> efunc1D ["{\"key\": \"func\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"cumsum\"}", "{\"key\": \"array\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_40\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_41 int64 39 1 [39] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< efunc1D took 0.00054192543029785156 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after efunc1D command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = seg_string, val = False, objType = VALUE, dtype = bool), (key = dtype, val = int64, objType = VALUE, dtype = str), (key = shape, val = 1, objType = VALUE, dtype = int64)], size = 3}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> array1D ["{\"key\": \"dtype\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"int64\"}", "{\"key\": \"shape\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"seg_string\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_42 int64 1 1 [1] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< array1D took 0.00038504600524902344 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after array1D command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = mode, val = append, objType = VALUE, dtype = str), (key = names, val = ["id_yf6Iug0_42", "id_yf6Iug0_41"], objType = LIST, dtype = str), (key = objType, val = pdarray, objType = VALUE, dtype = str), (key = nstr, val = 2, objType = VALUE, dtype = int64)], size = 4}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> concatenate ["{\"key\": \"nstr\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"2\"}", "{\"key\": \"objType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"pdarray\"}", "{\"key\": \"mode\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"append\"}", "{\"key\": \"names\", \"objType\": \"LIST\", \"dtype\": \"str\", \"val\": \"[\\\"id_yf6Iug0_42\\\", \\\"id_yf6Iug0_41\\\"]\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"created id_yf6Iug0_43 int64 40 1 [40] 8", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< concatenate took 0.00044703483581542969 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after concatenate command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_41, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_41\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_41", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00019001960754394531 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = SEGMENTS_SDI, val = id_yf6Iug0_43, objType = PDARRAY, dtype = int64), (key = EDGE_WEIGHT_SDI, val = id_yf6Iug0_7, objType = PDARRAY, dtype = float64), (key = SRC_SDI, val = id_yf6Iug0_33, objType = PDARRAY, dtype = int64), (key = DST_SDI, val = id_yf6Iug0_34, objType = PDARRAY, dtype = int64), (key = NumEdges, val = 51, objType = VALUE, dtype = int64), (key = NumVertices, val = 39, objType = VALUE, dtype = int64), (key = VERTEX_MAP_SDI, val = id_yf6Iug0_26, objType = PDARRAY, dtype = int64), (key = Directed, val = False, objType = VALUE, dtype = bool), (key = Weighted, val = False, objType = VALUE, dtype = bool)], size = 9}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> insertComponents ["{\"key\": \"SRC_SDI\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_33\"}", "{\"key\": \"DST_SDI\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_34\"}", "{\"key\": \"SEGMENTS_SDI\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_43\"}", "{\"key\": \"EDGE_WEIGHT_SDI\", \"objType\": \"PDARRAY\", \"dtype\": \"float64\", \"val\": \"id_yf6Iug0_7\"}", "{\"key\": \"VERTEX_MAP_SDI\", \"objType\": \"PDARRAY\", \"dtype\": \"int64\", \"val\": \"id_yf6Iug0_26\"}", "{\"key\": \"Directed\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"Weighted\", \"objType\": \"VALUE\", \"dtype\": \"bool\", \"val\": \"False\"}", "{\"key\": \"NumVertices\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"39\"}", "{\"key\": \"NumEdges\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"51\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"id_yf6Iug0_44", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< insertComponents took 0.00079202651977539062 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after insertComponents command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_6, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_6\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_6", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00019311904907226562 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_5, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_5\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_5", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00018000602722167969 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_9, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_9\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_9", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00018000602722167969 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_10, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_10\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_10", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00017690658569335938 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_11, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_11\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_11", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00019001960754394531 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_14, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_14\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_14", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00015711784362792969 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_12, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_12\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_12", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00015902519226074219 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_23, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_23\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_23", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00014996528625488281 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_24, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_24\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_24", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00014901161193847656 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_25, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_25\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_25", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00014996528625488281 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_13, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_13\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_13", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00018095970153808594 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_31, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_31\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_31", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00015091896057128906 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:19 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_28, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:19 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_28\"}"]
2024-11-13:09:54:19 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_28", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:19 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00014996528625488281 sec
2024-11-13:09:54:19 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_29, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_29\"}"]
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_29", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00015902519226074219 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_30, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_30\"}"]
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_30", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00015711784362792969 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_32, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_32\"}"]
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_32", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00017595291137695312 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_39, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_39\"}"]
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_39", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00015282630920410156 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_36, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_36\"}"]
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_36", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00015091896057128906 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_37, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_37\"}"]
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_37", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00015401840209960938 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_38, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_38\"}"]
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_38", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00020098686218261719 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_40, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_40\"}"]
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_40", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00015497207641601562 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_42, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_42\"}"]
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_42", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00018715858459472656 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_33, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_33\"}"]
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_33", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00016093254089355469 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_34, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_34\"}"]
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_34", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00028300285339355469 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_43, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_43\"}"]
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_43", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00015401840209960938 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_7, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_7\"}"]
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_7", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00015091896057128906 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_26, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_26\"}"]
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_26", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00018215179443359375 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_1, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_1\"}"]
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_1", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00015306472778320312 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_2, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_2\"}"]
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_2", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00015306472778320312 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = name, val = id_yf6Iug0_4, objType = VALUE, dtype = str)], size = 1}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> delete ["{\"key\": \"name\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_4\"}"]
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"deleted id_yf6Iug0_4", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< delete took 0.00015211105346679688 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after delete command is 0% pct of max memory 973797002035
2024-11-13:09:54:20 [ServerDaemon] run Line 586 INFO [Chapel] MessageArgs: {param_list = [(key = ConnectednessCriterionMultValue, val = 0.0, objType = VALUE, dtype = float64), (key = ConnectednessCriterion, val = log10, objType = VALUE, dtype = str), (key = GraphName, val = id_yf6Iug0_44, objType = VALUE, dtype = str), (key = FilePath, val = /scratch/users/md724/arkouda-njit/arachne/data/wcc/test_clustering_simple_3.tsv, objType = VALUE, dtype = str), (key = PostFilterMinSize, val = 1, objType = VALUE, dtype = int64), (key = OutputType, val = post, objType = VALUE, dtype = str), (key = PreFilterMinSize, val = 1, objType = VALUE, dtype = int64), (key = OutputPath, val = /scratch/users/md724/arkouda-njit/arachne/output/log10_test_network_wcc_output_post.tsv, objType = VALUE, dtype = str)], size = 8}
2024-11-13:09:54:20 [ServerDaemon] run Line 601 INFO [Chapel] >>> wellConnectedComponents ["{\"key\": \"GraphName\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"id_yf6Iug0_44\"}", "{\"key\": \"FilePath\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"/scratch/users/md724/arkouda-njit/arachne/data/wcc/test_clustering_simple_3.tsv\"}", "{\"key\": \"OutputPath\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"/scratch/users/md724/arkouda-njit/arachne/output/log10_test_network_wcc_output_post.tsv\"}", "{\"key\": \"OutputType\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"post\"}", "{\"key\": \"ConnectednessCriterion\", \"objType\": \"VALUE\", \"dtype\": \"str\", \"val\": \"log10\"}", "{\"key\": \"ConnectednessCriterionMultValue\", \"objType\": \"VALUE\", \"dtype\": \"float64\", \"val\": \"0.0\"}", "{\"key\": \"PreFilterMinSize\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}", "{\"key\": \"PostFilterMinSize\", \"objType\": \"VALUE\", \"dtype\": \"int64\", \"val\": \"1\"}"]
2024-11-13:09:54:20 [WellConnectedComponentsMsg] wellConnectedComponentsMsg Line 46 INFO [Chapel] Generating neighbors set.
/************* graph info**************/
graph totalVolume: 102
graph MinDegree: 1
meanDegreeGraph: 2.61538

2024-11-13:09:54:20 [WellConnectedComponents] wcc Line 1615 INFO [Chapel] Graph loaded with 39 vertices and 51 edges.
2024-11-13:09:54:20 [WellConnectedComponents] readClustersFile Line 140 INFO [Chapel] Number of clusters originally found in file: 3
2024-11-13:09:54:20 [WellConnectedComponents] wcc Line 1618 INFO [Chapel] Reading clusters file finished.
2024-11-13:09:54:20 [WellConnectedComponents] wcc Line 1676 INFO [Chapel] Splitting up clusters yielded 4 new clusters.
-*-*-*-*-*-*-*-*-*-*at the beginning for cluster(1) and has {35, 34, 36}
conductance: 0.0
This cluster seems to be far from other clusters (outlier cluster)!!
102 <= Est. of Previos cutsize 
Cluster Mean degree: 2.0
Based on Mader's theorem for sure we have a 2-edge-connected subgraph. (a lower bound)
Based on Iequlaity. MinCut <= 2
Based on Cheeger's Inequalit: 0.0 <= λ2 <= 0.0
λ2 Midpoint Approximation: 0.0
My metric: nan
//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*
λ2 == 0    --> Cluster is disconnected!
λ2 near 0  --> Cluster is weakly connected, and for sure there is 2 subcluster in it.
0 << λ2 < 1 --> Cluster is reasonably well-connected structure, with some potential for partitioning.
λ2 >= 1    --> Cluster has strong connectivity and robustness
//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*


No bridges found.

=== Running Comprehensive Tests ===

Test 1: Square with diagonal (Original test case)

Graph structure:
Graph:
Vertices: {1, 4, 2, 3}
Edges:
1 -- 4
1 -- 2
2 -- 4
2 -- 3
3 -- 4
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {4, 2}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1, 3: 0}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2, 3: 1}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2, 3: 2}
Added vertex 3 with weight 2
Updated weights: {4: 1, 2: 2, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}
Merge map:{1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 3, previous min: 2Cut set: {1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Global minimum cut value: 2

Exploring subgraph with vertices: {1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {4, 2}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1, 3: 0}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2, 3: 1}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2, 3: 2}
Added vertex 3 with weight 2
Updated weights: {4: 1, 2: 2, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}
Merge map:{1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 3, previous min: 2Cut set: {1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
Found cut of value 2 in current subgraph
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
Added to minimum cuts list

Recursing on subgraph A: {1, 4, 2}

Exploring subgraph with vertices: {1, 4, 2}
Starting Stoer-Wagner with vertices: {1, 4, 2}
Initial adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 4}

New minimum cut found!
Cut value: 2
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2}}

Final result:
Minimum cut value: 2
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}
Found cut of value 2 in current subgraph
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}
Added to minimum cuts list

Recursing on subgraph A: {1, 4}

Exploring subgraph with vertices: {1, 4}
Starting Stoer-Wagner with vertices: {1, 4}
Initial adjacency lists:
1 -> {4}
4 -> {1}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 4)}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 4)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 4)}

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (2 total):
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
---
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}
---

Expected min cut: 2
Found min cut: 2
Number of min cuts found: 2


Test 2: Triangle graph

Graph structure:
Graph:
Vertices: {1, 2, 3}
Edges:
1 -- 2
1 -- 3
2 -- 3
Starting Stoer-Wagner with vertices: {1, 2, 3}
Initial adjacency lists:
1 -> {2, 3}
2 -> {1, 3}
3 -> {1, 2}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 2}

New minimum cut found!
Cut value: 2
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2, 3}
2 -> {1, 3}
3 -> {1, 2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}

Global minimum cut value: 2

Exploring subgraph with vertices: {1, 2, 3}
Starting Stoer-Wagner with vertices: {1, 2, 3}
Initial adjacency lists:
1 -> {2, 3}
2 -> {1, 3}
3 -> {1, 2}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 2}

New minimum cut found!
Cut value: 2
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2, 3}
2 -> {1, 3}
3 -> {1, 2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}
Found cut of value 2 in current subgraph
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}
Added to minimum cuts list

Recursing on subgraph A: {1, 2}

Exploring subgraph with vertices: {1, 2}
Starting Stoer-Wagner with vertices: {1, 2}
Initial adjacency lists:
1 -> {2}
2 -> {1}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 2)}

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (1 total):
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}
---

Expected min cut: 2
Found min cut: 2
Number of min cuts found: 1


Test 3: Path graph (should have min cut 1)

Graph structure:
Graph:
Vertices: {1, 4, 2, 3}
Edges:
1 -- 2
2 -- 3
3 -- 4
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1, 3}
3 -> {4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 2, 3}

New minimum cut found!
Cut value: 1
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}

Merging vertex 4 into 3
Before merge adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {1, 2, 3}
Updated adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}
Merge map:{1: {1}, 2: {2}, 3: {4, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1, 2}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}

Global minimum cut value: 1

Exploring subgraph with vertices: {1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1, 3}
3 -> {4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 2, 3}

New minimum cut found!
Cut value: 1
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}

Merging vertex 4 into 3
Before merge adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {1, 2, 3}
Updated adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}
Merge map:{1: {1}, 2: {2}, 3: {4, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1, 2}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}
Found cut of value 1 in current subgraph
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}
Added to minimum cuts list

Recursing on subgraph A: {1, 2, 3}

Exploring subgraph with vertices: {1, 2, 3}
Starting Stoer-Wagner with vertices: {1, 2, 3}
Initial adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 2}

New minimum cut found!
Cut value: 1
Cut set: {1, 2}
Cut edges: {(2, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {1, 2}
Cut edges: {(2, 3)}
Found cut of value 1 in current subgraph
Cut set: {1, 2}
Cut edges: {(2, 3)}
Added to minimum cuts list

Recursing on subgraph A: {1, 2}

Exploring subgraph with vertices: {1, 2}
Starting Stoer-Wagner with vertices: {1, 2}
Initial adjacency lists:
1 -> {2}
2 -> {1}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 2)}
Added to minimum cuts list

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

All minimum cuts found (3 total):
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}
---
Cut set: {1, 2}
Cut edges: {(2, 3)}
---
Cut set: {1}
Cut edges: {(1, 2)}
---

Expected min cut: 1
Found min cut: 1
Number of min cuts found: 3


Test 4: Complete graph K4 (should have min cut 3)

Graph structure:
Graph:
Vertices: {1, 4, 2, 3}
Edges:
1 -- 4
1 -- 2
1 -- 3
2 -- 4
2 -- 3
3 -- 4
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {4, 2, 3}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {1, 4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2, 3: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2, 3: 3}
Added vertex 3 with weight 3
Updated weights: {4: 1, 2: 2, 3: 3}

Phase complete. 
Cut weight: 3, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 3
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {4, 2, 3}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {1, 4, 2}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}
Merge map:{1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 4, previous min: 3Cut set: {1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 3, previous min: 3Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 3
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}

Global minimum cut value: 3

Exploring subgraph with vertices: {1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {4, 2, 3}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {1, 4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2, 3: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2, 3: 3}
Added vertex 3 with weight 3
Updated weights: {4: 1, 2: 2, 3: 3}

Phase complete. 
Cut weight: 3, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 3
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {4, 2, 3}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {1, 4, 2}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}
Merge map:{1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 4, previous min: 3Cut set: {1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 3, previous min: 3Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 3
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}
Found cut of value 3 in current subgraph
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}
Added to minimum cuts list

Recursing on subgraph A: {1, 4, 2}

Exploring subgraph with vertices: {1, 4, 2}
Starting Stoer-Wagner with vertices: {1, 4, 2}
Initial adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 4}

New minimum cut found!
Cut value: 2
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2}}

Final result:
Minimum cut value: 2
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}
Found cut of value 2 in current subgraph
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}

Recursing on subgraph A: {1, 4}

Exploring subgraph with vertices: {1, 4}
Starting Stoer-Wagner with vertices: {1, 4}
Initial adjacency lists:
1 -> {4}
4 -> {1}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 4)}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 4)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 4)}

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (1 total):
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}
---

Expected min cut: 3
Found min cut: 3
Number of min cuts found: 1


Test 5: Butterfly graph

Graph structure:
Graph:
Vertices: {5, 1, 4, 2, 3}
Edges:
1 -- 5
1 -- 4
1 -- 2
1 -- 3
4 -- 5
2 -- 3
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2, 3}
4 -> {5, 1}
2 -> {1, 3}
3 -> {1, 2}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1, 3: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2, 3}
4 -> {5, 1}
2 -> {1, 3}
3 -> {1, 2}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 4, previous min: 2Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}

Global minimum cut value: 2

Exploring subgraph with vertices: {5, 1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2, 3}
4 -> {5, 1}
2 -> {1, 3}
3 -> {1, 2}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1, 3: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2, 3}
4 -> {5, 1}
2 -> {1, 3}
3 -> {1, 2}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 4, previous min: 2Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}
Found cut of value 2 in current subgraph
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1, 4, 2}

Exploring subgraph with vertices: {5, 1, 4, 2}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 3, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Recursing on subgraph A: {5, 1, 4}

Exploring subgraph with vertices: {5, 1, 4}
Starting Stoer-Wagner with vertices: {5, 1, 4}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1}

New minimum cut found!
Cut value: 2
Cut set: {5, 1}
Cut edges: {(4, 5), (1, 4)}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4}}

Final result:
Minimum cut value: 2
Cut set: {5, 1}
Cut edges: {(4, 5), (1, 4)}
Found cut of value 2 in current subgraph
Cut set: {5, 1}
Cut edges: {(4, 5), (1, 4)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1}

Exploring subgraph with vertices: {5, 1}
Starting Stoer-Wagner with vertices: {5, 1}
Initial adjacency lists:
5 -> {1}
1 -> {5}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5}

New minimum cut found!
Cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1}}

Final result:
Minimum cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}
Found cut of value 1 in current subgraph
Cut set: {5}
Cut edges: {(1, 5)}

Recursing on subgraph A: {5}

Exploring subgraph with vertices: {5}

Recursing on subgraph B: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (2 total):
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}
---
Cut set: {5, 1}
Cut edges: {(4, 5), (1, 4)}
---

Expected min cut: 2
Found min cut: 2
Number of min cuts found: 2


Test 6: Disconnected graph (should have min cut 0)

Graph structure:
Graph:
Vertices: {1, 4, 2, 3}
Edges:
1 -- 2
3 -- 4
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1}
3 -> {4}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1, 3: 0}
Added vertex 4 with weight 0
Updated weights: {4: 0, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {4: 0, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 1
Cut set: {1, 4, 2}
Cut edges: {(3, 4)}

Merging vertex 3 into 4
Before merge adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1}
3 -> {4}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {2}
4 -> {}
2 -> {1}
Merge map:{1: {1}, 4: {4, 3}, 2: {2}}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1}
Added vertex 4 with weight 0
Updated weights: {4: 0, 2: 1}

Phase complete. 
Cut weight: 0, previous min: 1Cut set: {1, 2}

New minimum cut found!
Cut value: 0
Cut set: {1, 2}
Cut edges: {}

Merging vertex 4 into 2
Before merge adjacency lists:
1 -> {2}
4 -> {}
2 -> {1}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 0Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 0
Cut set: {1, 2}
Cut edges: {}

Global minimum cut value: 0

Exploring subgraph with vertices: {1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1}
3 -> {4}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1, 3: 0}
Added vertex 4 with weight 0
Updated weights: {4: 0, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {4: 0, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 1
Cut set: {1, 4, 2}
Cut edges: {(3, 4)}

Merging vertex 3 into 4
Before merge adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1}
3 -> {4}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {2}
4 -> {}
2 -> {1}
Merge map:{1: {1}, 4: {4, 3}, 2: {2}}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1}
Added vertex 4 with weight 0
Updated weights: {4: 0, 2: 1}

Phase complete. 
Cut weight: 0, previous min: 1Cut set: {1, 2}

New minimum cut found!
Cut value: 0
Cut set: {1, 2}
Cut edges: {}

Merging vertex 4 into 2
Before merge adjacency lists:
1 -> {2}
4 -> {}
2 -> {1}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 0Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 0
Cut set: {1, 2}
Cut edges: {}
Found cut of value 0 in current subgraph
Cut set: {1, 2}
Cut edges: {}
Added to minimum cuts list

Recursing on subgraph A: {1, 2}

Exploring subgraph with vertices: {1, 2}
Starting Stoer-Wagner with vertices: {1, 2}
Initial adjacency lists:
1 -> {2}
2 -> {1}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 2)}

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {4, 3}

Exploring subgraph with vertices: {4, 3}
Starting Stoer-Wagner with vertices: {4, 3}
Initial adjacency lists:
4 -> {3}
3 -> {4}

New phase starting with first vertex: 4
Initial weights: {3: 1}
Added vertex 3 with weight 1
Updated weights: {3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {4}

New minimum cut found!
Cut value: 1
Cut set: {4}
Cut edges: {(3, 4)}

Merging vertex 3 into 4
Before merge adjacency lists:
4 -> {3}
3 -> {4}

After merge:
Vertices remaining: {4}
Updated adjacency lists:
4 -> {}
Merge map:{4: {4, 3}}

Final result:
Minimum cut value: 1
Cut set: {4}
Cut edges: {(3, 4)}
Found cut of value 1 in current subgraph
Cut set: {4}
Cut edges: {(3, 4)}

Recursing on subgraph A: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (1 total):
Cut set: {1, 2}
Cut edges: {}
---

Expected min cut: 0
Found min cut: 0
Number of min cuts found: 1


Test 7: Star graph

Graph structure:
Graph:
Vertices: {5, 1, 4, 2, 3}
Edges:
1 -- 5
1 -- 4
1 -- 2
1 -- 3
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1}
1 -> {5, 4, 2, 3}
4 -> {1}
2 -> {1}
3 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2, 3}
4 -> {1}
2 -> {1}
3 -> {1}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 3, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}

Global minimum cut value: 1

Exploring subgraph with vertices: {5, 1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1}
1 -> {5, 4, 2, 3}
4 -> {1}
2 -> {1}
3 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2, 3}
4 -> {1}
2 -> {1}
3 -> {1}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 3, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}
Found cut of value 1 in current subgraph
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1, 4, 2}

Exploring subgraph with vertices: {5, 1, 4, 2}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2}
Initial adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1, 4}

Exploring subgraph with vertices: {5, 1, 4}
Starting Stoer-Wagner with vertices: {5, 1, 4}
Initial adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1}

New minimum cut found!
Cut value: 1
Cut set: {5, 1}
Cut edges: {(1, 4)}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4}}

Final result:
Minimum cut value: 1
Cut set: {5, 1}
Cut edges: {(1, 4)}
Found cut of value 1 in current subgraph
Cut set: {5, 1}
Cut edges: {(1, 4)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1}

Exploring subgraph with vertices: {5, 1}
Starting Stoer-Wagner with vertices: {5, 1}
Initial adjacency lists:
5 -> {1}
1 -> {5}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5}

New minimum cut found!
Cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1}}

Final result:
Minimum cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}
Found cut of value 1 in current subgraph
Cut set: {5}
Cut edges: {(1, 5)}
Added to minimum cuts list

Recursing on subgraph A: {5}

Exploring subgraph with vertices: {5}

Recursing on subgraph B: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (4 total):
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}
---
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
---
Cut set: {5, 1}
Cut edges: {(1, 4)}
---
Cut set: {5}
Cut edges: {(1, 5)}
---

Expected min cut: 1
Found min cut: 1
Number of min cuts found: 4


Test 8: Cycle graph

Graph structure:
Graph:
Vertices: {5, 1, 4, 2, 3}
Edges:
1 -- 5
1 -- 2
4 -- 5
2 -- 3
3 -- 4
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 3}
2 -> {1, 3}
3 -> {4, 2}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 0}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {1: 1, 4: 1, 2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 3}
2 -> {1, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 2}
2 -> {1, 4}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {1: 1, 4: 1, 2: 2}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Global minimum cut value: 2

Exploring subgraph with vertices: {5, 1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 3}
2 -> {1, 3}
3 -> {4, 2}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 0}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {1: 1, 4: 1, 2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 3}
2 -> {1, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 2}
2 -> {1, 4}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {1: 1, 4: 1, 2: 2}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
Found cut of value 2 in current subgraph
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1, 4, 2}

Exploring subgraph with vertices: {5, 1, 4, 2}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5}
2 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Recursing on subgraph A: {5, 1, 4}

Exploring subgraph with vertices: {5, 1, 4}
Starting Stoer-Wagner with vertices: {5, 1, 4}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5}
4 -> {5}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1}

New minimum cut found!
Cut value: 1
Cut set: {5, 1}
Cut edges: {(4, 5)}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5}
4 -> {5}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4}}

Final result:
Minimum cut value: 1
Cut set: {5, 1}
Cut edges: {(4, 5)}
Found cut of value 1 in current subgraph
Cut set: {5, 1}
Cut edges: {(4, 5)}

Recursing on subgraph A: {5, 1}

Exploring subgraph with vertices: {5, 1}
Starting Stoer-Wagner with vertices: {5, 1}
Initial adjacency lists:
5 -> {1}
1 -> {5}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5}

New minimum cut found!
Cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1}}

Final result:
Minimum cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}
Found cut of value 1 in current subgraph
Cut set: {5}
Cut edges: {(1, 5)}

Recursing on subgraph A: {5}

Exploring subgraph with vertices: {5}

Recursing on subgraph B: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (1 total):
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
---

Expected min cut: 2
Found min cut: 2
Number of min cuts found: 1

=== Test Suite Completed ===
-*-*-*-*-*-*-*-*-*-*at the beginning for cluster(0) and has {29, 20, 25, 24, 28, 17, 23, 19, 22, 32, 21, 27, 18, 26, 30, 31}
conductance: 0.047619
1 <= Est. of Previos cutsize 
Cluster Mean degree: 2.625
Based on Mader's theorem for sure we have a 2-edge-connected subgraph. (a lower bound)
Based on Iequlaity. MinCut <= 1
Based on Cheeger's Inequalit: 0.00113379 <= λ2 <= 0.0952381
λ2 Midpoint Approximation: 0.0481859
My metric: 0.988235
//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*
λ2 == 0    --> Cluster is disconnected!
λ2 near 0  --> Cluster is weakly connected, and for sure there is 2 subcluster in it.
0 << λ2 < 1 --> Cluster is reasonably well-connected structure, with some potential for partitioning.
λ2 >= 1    --> Cluster has strong connectivity and robustness
//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*


The best bridge in this cluster is between 25 and 22
Component sizes are 8 and 8
Nodes in component containing 22: {20, 24, 17, 23, 19, 22, 21, 18}
Nodes in component containing 25: {29, 25, 30, 28, 32, 27, 26, 31}

=== Running Comprehensive Tests ===

Test 1: Square with diagonal (Original test case)

Graph structure:
Graph:
Vertices: {1, 4, 2, 3}
Edges:
1 -- 4
1 -- 2
2 -- 4
2 -- 3
3 -- 4
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {4, 2}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1, 3: 0}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2, 3: 1}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2, 3: 2}
Added vertex 3 with weight 2
Updated weights: {4: 1, 2: 2, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}
Merge map:{1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 3, previous min: 2Cut set: {1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Global minimum cut value: 2

Exploring subgraph with vertices: {1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {4, 2}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1, 3: 0}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2, 3: 1}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2, 3: 2}
Added vertex 3 with weight 2
Updated weights: {4: 1, 2: 2, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}
Merge map:{1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 3, previous min: 2Cut set: {1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
Found cut of value 2 in current subgraph
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
Added to minimum cuts list

Recursing on subgraph A: {1, 4, 2}

Exploring subgraph with vertices: {1, 4, 2}
Starting Stoer-Wagner with vertices: {1, 4, 2}
Initial adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 4}

New minimum cut found!
Cut value: 2
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2}}

Final result:
Minimum cut value: 2
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}
Found cut of value 2 in current subgraph
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}
Added to minimum cuts list

Recursing on subgraph A: {1, 4}

Exploring subgraph with vertices: {1, 4}
Starting Stoer-Wagner with vertices: {1, 4}
Initial adjacency lists:
1 -> {4}
4 -> {1}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 4)}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 4)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 4)}

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (2 total):
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
---
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}
---

Expected min cut: 2
Found min cut: 2
Number of min cuts found: 2


Test 2: Triangle graph

Graph structure:
Graph:
Vertices: {1, 2, 3}
Edges:
1 -- 2
1 -- 3
2 -- 3
Starting Stoer-Wagner with vertices: {1, 2, 3}
Initial adjacency lists:
1 -> {2, 3}
2 -> {1, 3}
3 -> {1, 2}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 2}

New minimum cut found!
Cut value: 2
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2, 3}
2 -> {1, 3}
3 -> {1, 2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}

Global minimum cut value: 2

Exploring subgraph with vertices: {1, 2, 3}
Starting Stoer-Wagner with vertices: {1, 2, 3}
Initial adjacency lists:
1 -> {2, 3}
2 -> {1, 3}
3 -> {1, 2}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 2}

New minimum cut found!
Cut value: 2
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2, 3}
2 -> {1, 3}
3 -> {1, 2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}
Found cut of value 2 in current subgraph
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}
Added to minimum cuts list

Recursing on subgraph A: {1, 2}

Exploring subgraph with vertices: {1, 2}
Starting Stoer-Wagner with vertices: {1, 2}
Initial adjacency lists:
1 -> {2}
2 -> {1}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 2)}

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (1 total):
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}
---

Expected min cut: 2
Found min cut: 2
Number of min cuts found: 1


Test 3: Path graph (should have min cut 1)

Graph structure:
Graph:
Vertices: {1, 4, 2, 3}
Edges:
1 -- 2
2 -- 3
3 -- 4
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1, 3}
3 -> {4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 2, 3}

New minimum cut found!
Cut value: 1
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}

Merging vertex 4 into 3
Before merge adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {1, 2, 3}
Updated adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}
Merge map:{1: {1}, 2: {2}, 3: {4, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1, 2}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}

Global minimum cut value: 1

Exploring subgraph with vertices: {1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1, 3}
3 -> {4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 2, 3}

New minimum cut found!
Cut value: 1
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}

Merging vertex 4 into 3
Before merge adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {1, 2, 3}
Updated adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}
Merge map:{1: {1}, 2: {2}, 3: {4, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1, 2}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}
Found cut of value 1 in current subgraph
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}
Added to minimum cuts list

Recursing on subgraph A: {1, 2, 3}

Exploring subgraph with vertices: {1, 2, 3}
Starting Stoer-Wagner with vertices: {1, 2, 3}
Initial adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 2}

New minimum cut found!
Cut value: 1
Cut set: {1, 2}
Cut edges: {(2, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {1, 2}
Cut edges: {(2, 3)}
Found cut of value 1 in current subgraph
Cut set: {1, 2}
Cut edges: {(2, 3)}
Added to minimum cuts list

Recursing on subgraph A: {1, 2}

Exploring subgraph with vertices: {1, 2}
Starting Stoer-Wagner with vertices: {1, 2}
Initial adjacency lists:
1 -> {2}
2 -> {1}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 2)}
Added to minimum cuts list

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

All minimum cuts found (3 total):
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}
---
Cut set: {1, 2}
Cut edges: {(2, 3)}
---
Cut set: {1}
Cut edges: {(1, 2)}
---

Expected min cut: 1
Found min cut: 1
Number of min cuts found: 3


Test 4: Complete graph K4 (should have min cut 3)

Graph structure:
Graph:
Vertices: {1, 4, 2, 3}
Edges:
1 -- 4
1 -- 2
1 -- 3
2 -- 4
2 -- 3
3 -- 4
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {4, 2, 3}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {1, 4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2, 3: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2, 3: 3}
Added vertex 3 with weight 3
Updated weights: {4: 1, 2: 2, 3: 3}

Phase complete. 
Cut weight: 3, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 3
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {4, 2, 3}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {1, 4, 2}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}
Merge map:{1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 4, previous min: 3Cut set: {1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 3, previous min: 3Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 3
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}

Global minimum cut value: 3

Exploring subgraph with vertices: {1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {4, 2, 3}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {1, 4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2, 3: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2, 3: 3}
Added vertex 3 with weight 3
Updated weights: {4: 1, 2: 2, 3: 3}

Phase complete. 
Cut weight: 3, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 3
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {4, 2, 3}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {1, 4, 2}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}
Merge map:{1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 4, previous min: 3Cut set: {1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 3, previous min: 3Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 3
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}
Found cut of value 3 in current subgraph
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}
Added to minimum cuts list

Recursing on subgraph A: {1, 4, 2}

Exploring subgraph with vertices: {1, 4, 2}
Starting Stoer-Wagner with vertices: {1, 4, 2}
Initial adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 4}

New minimum cut found!
Cut value: 2
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2}}

Final result:
Minimum cut value: 2
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}
Found cut of value 2 in current subgraph
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}

Recursing on subgraph A: {1, 4}

Exploring subgraph with vertices: {1, 4}
Starting Stoer-Wagner with vertices: {1, 4}
Initial adjacency lists:
1 -> {4}
4 -> {1}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 4)}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 4)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 4)}

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (1 total):
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}
---

Expected min cut: 3
Found min cut: 3
Number of min cuts found: 1


Test 5: Butterfly graph

Graph structure:
Graph:
Vertices: {5, 1, 4, 2, 3}
Edges:
1 -- 5
1 -- 4
1 -- 2
1 -- 3
4 -- 5
2 -- 3
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2, 3}
4 -> {5, 1}
2 -> {1, 3}
3 -> {1, 2}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1, 3: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2, 3}
4 -> {5, 1}
2 -> {1, 3}
3 -> {1, 2}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 4, previous min: 2Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}

Global minimum cut value: 2

Exploring subgraph with vertices: {5, 1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2, 3}
4 -> {5, 1}
2 -> {1, 3}
3 -> {1, 2}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1, 3: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2, 3}
4 -> {5, 1}
2 -> {1, 3}
3 -> {1, 2}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 4, previous min: 2Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}
Found cut of value 2 in current subgraph
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1, 4, 2}

Exploring subgraph with vertices: {5, 1, 4, 2}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 3, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Recursing on subgraph A: {5, 1, 4}

Exploring subgraph with vertices: {5, 1, 4}
Starting Stoer-Wagner with vertices: {5, 1, 4}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1}

New minimum cut found!
Cut value: 2
Cut set: {5, 1}
Cut edges: {(4, 5), (1, 4)}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4}}

Final result:
Minimum cut value: 2
Cut set: {5, 1}
Cut edges: {(4, 5), (1, 4)}
Found cut of value 2 in current subgraph
Cut set: {5, 1}
Cut edges: {(4, 5), (1, 4)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1}

Exploring subgraph with vertices: {5, 1}
Starting Stoer-Wagner with vertices: {5, 1}
Initial adjacency lists:
5 -> {1}
1 -> {5}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5}

New minimum cut found!
Cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1}}

Final result:
Minimum cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}
Found cut of value 1 in current subgraph
Cut set: {5}
Cut edges: {(1, 5)}

Recursing on subgraph A: {5}

Exploring subgraph with vertices: {5}

Recursing on subgraph B: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (2 total):
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}
---
Cut set: {5, 1}
Cut edges: {(4, 5), (1, 4)}
---

Expected min cut: 2
Found min cut: 2
Number of min cuts found: 2


Test 6: Disconnected graph (should have min cut 0)

Graph structure:
Graph:
Vertices: {1, 4, 2, 3}
Edges:
1 -- 2
3 -- 4
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1}
3 -> {4}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1, 3: 0}
Added vertex 4 with weight 0
Updated weights: {4: 0, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {4: 0, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 1
Cut set: {1, 4, 2}
Cut edges: {(3, 4)}

Merging vertex 3 into 4
Before merge adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1}
3 -> {4}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {2}
4 -> {}
2 -> {1}
Merge map:{1: {1}, 4: {4, 3}, 2: {2}}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1}
Added vertex 4 with weight 0
Updated weights: {4: 0, 2: 1}

Phase complete. 
Cut weight: 0, previous min: 1Cut set: {1, 2}

New minimum cut found!
Cut value: 0
Cut set: {1, 2}
Cut edges: {}

Merging vertex 4 into 2
Before merge adjacency lists:
1 -> {2}
4 -> {}
2 -> {1}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 0Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 0
Cut set: {1, 2}
Cut edges: {}

Global minimum cut value: 0

Exploring subgraph with vertices: {1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1}
3 -> {4}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1, 3: 0}
Added vertex 4 with weight 0
Updated weights: {4: 0, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {4: 0, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 1
Cut set: {1, 4, 2}
Cut edges: {(3, 4)}

Merging vertex 3 into 4
Before merge adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1}
3 -> {4}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {2}
4 -> {}
2 -> {1}
Merge map:{1: {1}, 4: {4, 3}, 2: {2}}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1}
Added vertex 4 with weight 0
Updated weights: {4: 0, 2: 1}

Phase complete. 
Cut weight: 0, previous min: 1Cut set: {1, 2}

New minimum cut found!
Cut value: 0
Cut set: {1, 2}
Cut edges: {}

Merging vertex 4 into 2
Before merge adjacency lists:
1 -> {2}
4 -> {}
2 -> {1}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 0Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 0
Cut set: {1, 2}
Cut edges: {}
Found cut of value 0 in current subgraph
Cut set: {1, 2}
Cut edges: {}
Added to minimum cuts list

Recursing on subgraph A: {1, 2}

Exploring subgraph with vertices: {1, 2}
Starting Stoer-Wagner with vertices: {1, 2}
Initial adjacency lists:
1 -> {2}
2 -> {1}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 2)}

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {4, 3}

Exploring subgraph with vertices: {4, 3}
Starting Stoer-Wagner with vertices: {4, 3}
Initial adjacency lists:
4 -> {3}
3 -> {4}

New phase starting with first vertex: 4
Initial weights: {3: 1}
Added vertex 3 with weight 1
Updated weights: {3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {4}

New minimum cut found!
Cut value: 1
Cut set: {4}
Cut edges: {(3, 4)}

Merging vertex 3 into 4
Before merge adjacency lists:
4 -> {3}
3 -> {4}

After merge:
Vertices remaining: {4}
Updated adjacency lists:
4 -> {}
Merge map:{4: {4, 3}}

Final result:
Minimum cut value: 1
Cut set: {4}
Cut edges: {(3, 4)}
Found cut of value 1 in current subgraph
Cut set: {4}
Cut edges: {(3, 4)}

Recursing on subgraph A: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (1 total):
Cut set: {1, 2}
Cut edges: {}
---

Expected min cut: 0
Found min cut: 0
Number of min cuts found: 1


Test 7: Star graph

Graph structure:
Graph:
Vertices: {5, 1, 4, 2, 3}
Edges:
1 -- 5
1 -- 4
1 -- 2
1 -- 3
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1}
1 -> {5, 4, 2, 3}
4 -> {1}
2 -> {1}
3 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2, 3}
4 -> {1}
2 -> {1}
3 -> {1}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 3, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}

Global minimum cut value: 1

Exploring subgraph with vertices: {5, 1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1}
1 -> {5, 4, 2, 3}
4 -> {1}
2 -> {1}
3 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2, 3}
4 -> {1}
2 -> {1}
3 -> {1}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 3, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}
Found cut of value 1 in current subgraph
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1, 4, 2}

Exploring subgraph with vertices: {5, 1, 4, 2}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2}
Initial adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1, 4}

Exploring subgraph with vertices: {5, 1, 4}
Starting Stoer-Wagner with vertices: {5, 1, 4}
Initial adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1}

New minimum cut found!
Cut value: 1
Cut set: {5, 1}
Cut edges: {(1, 4)}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4}}

Final result:
Minimum cut value: 1
Cut set: {5, 1}
Cut edges: {(1, 4)}
Found cut of value 1 in current subgraph
Cut set: {5, 1}
Cut edges: {(1, 4)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1}

Exploring subgraph with vertices: {5, 1}
Starting Stoer-Wagner with vertices: {5, 1}
Initial adjacency lists:
5 -> {1}
1 -> {5}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5}

New minimum cut found!
Cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1}}

Final result:
Minimum cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}
Found cut of value 1 in current subgraph
Cut set: {5}
Cut edges: {(1, 5)}
Added to minimum cuts list

Recursing on subgraph A: {5}

Exploring subgraph with vertices: {5}

Recursing on subgraph B: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (4 total):
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}
---
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
---
Cut set: {5, 1}
Cut edges: {(1, 4)}
---
Cut set: {5}
Cut edges: {(1, 5)}
---

Expected min cut: 1
Found min cut: 1
Number of min cuts found: 4


Test 8: Cycle graph

Graph structure:
Graph:
Vertices: {5, 1, 4, 2, 3}
Edges:
1 -- 5
1 -- 2
4 -- 5
2 -- 3
3 -- 4
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 3}
2 -> {1, 3}
3 -> {4, 2}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 0}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {1: 1, 4: 1, 2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 3}
2 -> {1, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 2}
2 -> {1, 4}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {1: 1, 4: 1, 2: 2}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Global minimum cut value: 2

Exploring subgraph with vertices: {5, 1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 3}
2 -> {1, 3}
3 -> {4, 2}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 0}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {1: 1, 4: 1, 2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 3}
2 -> {1, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 2}
2 -> {1, 4}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {1: 1, 4: 1, 2: 2}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
Found cut of value 2 in current subgraph
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1, 4, 2}

Exploring subgraph with vertices: {5, 1, 4, 2}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5}
2 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Recursing on subgraph A: {5, 1, 4}

Exploring subgraph with vertices: {5, 1, 4}
Starting Stoer-Wagner with vertices: {5, 1, 4}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5}
4 -> {5}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1}

New minimum cut found!
Cut value: 1
Cut set: {5, 1}
Cut edges: {(4, 5)}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5}
4 -> {5}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4}}

Final result:
Minimum cut value: 1
Cut set: {5, 1}
Cut edges: {(4, 5)}
Found cut of value 1 in current subgraph
Cut set: {5, 1}
Cut edges: {(4, 5)}

Recursing on subgraph A: {5, 1}

Exploring subgraph with vertices: {5, 1}
Starting Stoer-Wagner with vertices: {5, 1}
Initial adjacency lists:
5 -> {1}
1 -> {5}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5}

New minimum cut found!
Cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1}}

Final result:
Minimum cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}
Found cut of value 1 in current subgraph
Cut set: {5}
Cut edges: {(1, 5)}

Recursing on subgraph A: {5}

Exploring subgraph with vertices: {5}

Recursing on subgraph B: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (1 total):
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
---

Expected min cut: 2
Found min cut: 2
Number of min cuts found: 1

=== Test Suite Completed ===
-*-*-*-*-*-*-*-*-*-*at the beginning for cluster(2) and has {37, 38}
neighbors 37 are: {38}
neighbors 38 are: {37}
conductance: 0.0
This cluster seems to be far from other clusters (outlier cluster)!!
102 <= Est. of Previos cutsize 
Cluster Mean degree: 1.0
Based on Mader's theorem for sure we have a 1-edge-connected subgraph. (a lower bound)
Based on Iequlaity. MinCut <= 1
Based on Cheeger's Inequalit: 0.0 <= λ2 <= 0.0
λ2 Midpoint Approximation: 0.0
My metric: nan
//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*
λ2 == 0    --> Cluster is disconnected!
λ2 near 0  --> Cluster is weakly connected, and for sure there is 2 subcluster in it.
0 << λ2 < 1 --> Cluster is reasonably well-connected structure, with some potential for partitioning.
λ2 >= 1    --> Cluster has strong connectivity and robustness
//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*


The best bridge in this cluster is between 37 and 38
Component sizes are 1 and 1
Nodes in component containing 38: {38}
Nodes in component containing 37: {37}

=== Running Comprehensive Tests ===

Test 1: Square with diagonal (Original test case)

Graph structure:
Graph:
Vertices: {1, 4, 2, 3}
Edges:
1 -- 4
1 -- 2
2 -- 4
2 -- 3
3 -- 4
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {4, 2}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1, 3: 0}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2, 3: 1}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2, 3: 2}
Added vertex 3 with weight 2
Updated weights: {4: 1, 2: 2, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}
Merge map:{1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 3, previous min: 2Cut set: {1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Global minimum cut value: 2

Exploring subgraph with vertices: {1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {4, 2}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1, 3: 0}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2, 3: 1}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2, 3: 2}
Added vertex 3 with weight 2
Updated weights: {4: 1, 2: 2, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}
Merge map:{1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 3, previous min: 2Cut set: {1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
Found cut of value 2 in current subgraph
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
Added to minimum cuts list

Recursing on subgraph A: {1, 4, 2}

Exploring subgraph with vertices: {1, 4, 2}
Starting Stoer-Wagner with vertices: {1, 4, 2}
Initial adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 4}

New minimum cut found!
Cut value: 2
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2}}

Final result:
Minimum cut value: 2
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}
Found cut of value 2 in current subgraph
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}
Added to minimum cuts list

Recursing on subgraph A: {1, 4}

Exploring subgraph with vertices: {1, 4}
Starting Stoer-Wagner with vertices: {1, 4}
Initial adjacency lists:
1 -> {4}
4 -> {1}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 4)}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 4)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 4)}

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (2 total):
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
---
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}
---

Expected min cut: 2
Found min cut: 2
Number of min cuts found: 2


Test 2: Triangle graph

Graph structure:
Graph:
Vertices: {1, 2, 3}
Edges:
1 -- 2
1 -- 3
2 -- 3
Starting Stoer-Wagner with vertices: {1, 2, 3}
Initial adjacency lists:
1 -> {2, 3}
2 -> {1, 3}
3 -> {1, 2}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 2}

New minimum cut found!
Cut value: 2
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2, 3}
2 -> {1, 3}
3 -> {1, 2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}

Global minimum cut value: 2

Exploring subgraph with vertices: {1, 2, 3}
Starting Stoer-Wagner with vertices: {1, 2, 3}
Initial adjacency lists:
1 -> {2, 3}
2 -> {1, 3}
3 -> {1, 2}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 2}

New minimum cut found!
Cut value: 2
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2, 3}
2 -> {1, 3}
3 -> {1, 2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}
Found cut of value 2 in current subgraph
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}
Added to minimum cuts list

Recursing on subgraph A: {1, 2}

Exploring subgraph with vertices: {1, 2}
Starting Stoer-Wagner with vertices: {1, 2}
Initial adjacency lists:
1 -> {2}
2 -> {1}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 2)}

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (1 total):
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}
---

Expected min cut: 2
Found min cut: 2
Number of min cuts found: 1


Test 3: Path graph (should have min cut 1)

Graph structure:
Graph:
Vertices: {1, 4, 2, 3}
Edges:
1 -- 2
2 -- 3
3 -- 4
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1, 3}
3 -> {4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 2, 3}

New minimum cut found!
Cut value: 1
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}

Merging vertex 4 into 3
Before merge adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {1, 2, 3}
Updated adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}
Merge map:{1: {1}, 2: {2}, 3: {4, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1, 2}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}

Global minimum cut value: 1

Exploring subgraph with vertices: {1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1, 3}
3 -> {4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 2, 3}

New minimum cut found!
Cut value: 1
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}

Merging vertex 4 into 3
Before merge adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {1, 2, 3}
Updated adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}
Merge map:{1: {1}, 2: {2}, 3: {4, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1, 2}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}
Found cut of value 1 in current subgraph
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}
Added to minimum cuts list

Recursing on subgraph A: {1, 2, 3}

Exploring subgraph with vertices: {1, 2, 3}
Starting Stoer-Wagner with vertices: {1, 2, 3}
Initial adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 2}

New minimum cut found!
Cut value: 1
Cut set: {1, 2}
Cut edges: {(2, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {1, 2}
Cut edges: {(2, 3)}
Found cut of value 1 in current subgraph
Cut set: {1, 2}
Cut edges: {(2, 3)}
Added to minimum cuts list

Recursing on subgraph A: {1, 2}

Exploring subgraph with vertices: {1, 2}
Starting Stoer-Wagner with vertices: {1, 2}
Initial adjacency lists:
1 -> {2}
2 -> {1}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 2)}
Added to minimum cuts list

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

All minimum cuts found (3 total):
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}
---
Cut set: {1, 2}
Cut edges: {(2, 3)}
---
Cut set: {1}
Cut edges: {(1, 2)}
---

Expected min cut: 1
Found min cut: 1
Number of min cuts found: 3


Test 4: Complete graph K4 (should have min cut 3)

Graph structure:
Graph:
Vertices: {1, 4, 2, 3}
Edges:
1 -- 4
1 -- 2
1 -- 3
2 -- 4
2 -- 3
3 -- 4
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {4, 2, 3}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {1, 4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2, 3: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2, 3: 3}
Added vertex 3 with weight 3
Updated weights: {4: 1, 2: 2, 3: 3}

Phase complete. 
Cut weight: 3, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 3
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {4, 2, 3}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {1, 4, 2}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}
Merge map:{1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 4, previous min: 3Cut set: {1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 3, previous min: 3Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 3
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}

Global minimum cut value: 3

Exploring subgraph with vertices: {1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {4, 2, 3}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {1, 4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2, 3: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2, 3: 3}
Added vertex 3 with weight 3
Updated weights: {4: 1, 2: 2, 3: 3}

Phase complete. 
Cut weight: 3, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 3
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {4, 2, 3}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {1, 4, 2}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}
Merge map:{1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 4, previous min: 3Cut set: {1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 3, previous min: 3Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 3
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}
Found cut of value 3 in current subgraph
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}
Added to minimum cuts list

Recursing on subgraph A: {1, 4, 2}

Exploring subgraph with vertices: {1, 4, 2}
Starting Stoer-Wagner with vertices: {1, 4, 2}
Initial adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 4}

New minimum cut found!
Cut value: 2
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2}}

Final result:
Minimum cut value: 2
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}
Found cut of value 2 in current subgraph
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}

Recursing on subgraph A: {1, 4}

Exploring subgraph with vertices: {1, 4}
Starting Stoer-Wagner with vertices: {1, 4}
Initial adjacency lists:
1 -> {4}
4 -> {1}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 4)}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 4)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 4)}

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (1 total):
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}
---

Expected min cut: 3
Found min cut: 3
Number of min cuts found: 1


Test 5: Butterfly graph

Graph structure:
Graph:
Vertices: {5, 1, 4, 2, 3}
Edges:
1 -- 5
1 -- 4
1 -- 2
1 -- 3
4 -- 5
2 -- 3
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2, 3}
4 -> {5, 1}
2 -> {1, 3}
3 -> {1, 2}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1, 3: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2, 3}
4 -> {5, 1}
2 -> {1, 3}
3 -> {1, 2}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 4, previous min: 2Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}

Global minimum cut value: 2

Exploring subgraph with vertices: {5, 1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2, 3}
4 -> {5, 1}
2 -> {1, 3}
3 -> {1, 2}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1, 3: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2, 3}
4 -> {5, 1}
2 -> {1, 3}
3 -> {1, 2}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 4, previous min: 2Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}
Found cut of value 2 in current subgraph
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1, 4, 2}

Exploring subgraph with vertices: {5, 1, 4, 2}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 3, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Recursing on subgraph A: {5, 1, 4}

Exploring subgraph with vertices: {5, 1, 4}
Starting Stoer-Wagner with vertices: {5, 1, 4}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1}

New minimum cut found!
Cut value: 2
Cut set: {5, 1}
Cut edges: {(4, 5), (1, 4)}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4}}

Final result:
Minimum cut value: 2
Cut set: {5, 1}
Cut edges: {(4, 5), (1, 4)}
Found cut of value 2 in current subgraph
Cut set: {5, 1}
Cut edges: {(4, 5), (1, 4)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1}

Exploring subgraph with vertices: {5, 1}
Starting Stoer-Wagner with vertices: {5, 1}
Initial adjacency lists:
5 -> {1}
1 -> {5}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5}

New minimum cut found!
Cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1}}

Final result:
Minimum cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}
Found cut of value 1 in current subgraph
Cut set: {5}
Cut edges: {(1, 5)}

Recursing on subgraph A: {5}

Exploring subgraph with vertices: {5}

Recursing on subgraph B: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (2 total):
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}
---
Cut set: {5, 1}
Cut edges: {(4, 5), (1, 4)}
---

Expected min cut: 2
Found min cut: 2
Number of min cuts found: 2


Test 6: Disconnected graph (should have min cut 0)

Graph structure:
Graph:
Vertices: {1, 4, 2, 3}
Edges:
1 -- 2
3 -- 4
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1}
3 -> {4}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1, 3: 0}
Added vertex 4 with weight 0
Updated weights: {4: 0, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {4: 0, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 1
Cut set: {1, 4, 2}
Cut edges: {(3, 4)}

Merging vertex 3 into 4
Before merge adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1}
3 -> {4}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {2}
4 -> {}
2 -> {1}
Merge map:{1: {1}, 4: {4, 3}, 2: {2}}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1}
Added vertex 4 with weight 0
Updated weights: {4: 0, 2: 1}

Phase complete. 
Cut weight: 0, previous min: 1Cut set: {1, 2}

New minimum cut found!
Cut value: 0
Cut set: {1, 2}
Cut edges: {}

Merging vertex 4 into 2
Before merge adjacency lists:
1 -> {2}
4 -> {}
2 -> {1}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 0Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 0
Cut set: {1, 2}
Cut edges: {}

Global minimum cut value: 0

Exploring subgraph with vertices: {1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1}
3 -> {4}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1, 3: 0}
Added vertex 4 with weight 0
Updated weights: {4: 0, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {4: 0, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 1
Cut set: {1, 4, 2}
Cut edges: {(3, 4)}

Merging vertex 3 into 4
Before merge adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1}
3 -> {4}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {2}
4 -> {}
2 -> {1}
Merge map:{1: {1}, 4: {4, 3}, 2: {2}}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1}
Added vertex 4 with weight 0
Updated weights: {4: 0, 2: 1}

Phase complete. 
Cut weight: 0, previous min: 1Cut set: {1, 2}

New minimum cut found!
Cut value: 0
Cut set: {1, 2}
Cut edges: {}

Merging vertex 4 into 2
Before merge adjacency lists:
1 -> {2}
4 -> {}
2 -> {1}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 0Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 0
Cut set: {1, 2}
Cut edges: {}
Found cut of value 0 in current subgraph
Cut set: {1, 2}
Cut edges: {}
Added to minimum cuts list

Recursing on subgraph A: {1, 2}

Exploring subgraph with vertices: {1, 2}
Starting Stoer-Wagner with vertices: {1, 2}
Initial adjacency lists:
1 -> {2}
2 -> {1}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 2)}

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {4, 3}

Exploring subgraph with vertices: {4, 3}
Starting Stoer-Wagner with vertices: {4, 3}
Initial adjacency lists:
4 -> {3}
3 -> {4}

New phase starting with first vertex: 4
Initial weights: {3: 1}
Added vertex 3 with weight 1
Updated weights: {3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {4}

New minimum cut found!
Cut value: 1
Cut set: {4}
Cut edges: {(3, 4)}

Merging vertex 3 into 4
Before merge adjacency lists:
4 -> {3}
3 -> {4}

After merge:
Vertices remaining: {4}
Updated adjacency lists:
4 -> {}
Merge map:{4: {4, 3}}

Final result:
Minimum cut value: 1
Cut set: {4}
Cut edges: {(3, 4)}
Found cut of value 1 in current subgraph
Cut set: {4}
Cut edges: {(3, 4)}

Recursing on subgraph A: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (1 total):
Cut set: {1, 2}
Cut edges: {}
---

Expected min cut: 0
Found min cut: 0
Number of min cuts found: 1


Test 7: Star graph

Graph structure:
Graph:
Vertices: {5, 1, 4, 2, 3}
Edges:
1 -- 5
1 -- 4
1 -- 2
1 -- 3
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1}
1 -> {5, 4, 2, 3}
4 -> {1}
2 -> {1}
3 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2, 3}
4 -> {1}
2 -> {1}
3 -> {1}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 3, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}

Global minimum cut value: 1

Exploring subgraph with vertices: {5, 1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1}
1 -> {5, 4, 2, 3}
4 -> {1}
2 -> {1}
3 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2, 3}
4 -> {1}
2 -> {1}
3 -> {1}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 3, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}
Found cut of value 1 in current subgraph
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1, 4, 2}

Exploring subgraph with vertices: {5, 1, 4, 2}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2}
Initial adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1, 4}

Exploring subgraph with vertices: {5, 1, 4}
Starting Stoer-Wagner with vertices: {5, 1, 4}
Initial adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1}

New minimum cut found!
Cut value: 1
Cut set: {5, 1}
Cut edges: {(1, 4)}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4}}

Final result:
Minimum cut value: 1
Cut set: {5, 1}
Cut edges: {(1, 4)}
Found cut of value 1 in current subgraph
Cut set: {5, 1}
Cut edges: {(1, 4)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1}

Exploring subgraph with vertices: {5, 1}
Starting Stoer-Wagner with vertices: {5, 1}
Initial adjacency lists:
5 -> {1}
1 -> {5}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5}

New minimum cut found!
Cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1}}

Final result:
Minimum cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}
Found cut of value 1 in current subgraph
Cut set: {5}
Cut edges: {(1, 5)}
Added to minimum cuts list

Recursing on subgraph A: {5}

Exploring subgraph with vertices: {5}

Recursing on subgraph B: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (4 total):
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}
---
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
---
Cut set: {5, 1}
Cut edges: {(1, 4)}
---
Cut set: {5}
Cut edges: {(1, 5)}
---

Expected min cut: 1
Found min cut: 1
Number of min cuts found: 4


Test 8: Cycle graph

Graph structure:
Graph:
Vertices: {5, 1, 4, 2, 3}
Edges:
1 -- 5
1 -- 2
4 -- 5
2 -- 3
3 -- 4
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 3}
2 -> {1, 3}
3 -> {4, 2}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 0}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {1: 1, 4: 1, 2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 3}
2 -> {1, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 2}
2 -> {1, 4}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {1: 1, 4: 1, 2: 2}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Global minimum cut value: 2

Exploring subgraph with vertices: {5, 1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 3}
2 -> {1, 3}
3 -> {4, 2}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 0}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {1: 1, 4: 1, 2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 3}
2 -> {1, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 2}
2 -> {1, 4}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {1: 1, 4: 1, 2: 2}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
Found cut of value 2 in current subgraph
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1, 4, 2}

Exploring subgraph with vertices: {5, 1, 4, 2}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5}
2 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Recursing on subgraph A: {5, 1, 4}

Exploring subgraph with vertices: {5, 1, 4}
Starting Stoer-Wagner with vertices: {5, 1, 4}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5}
4 -> {5}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1}

New minimum cut found!
Cut value: 1
Cut set: {5, 1}
Cut edges: {(4, 5)}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5}
4 -> {5}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4}}

Final result:
Minimum cut value: 1
Cut set: {5, 1}
Cut edges: {(4, 5)}
Found cut of value 1 in current subgraph
Cut set: {5, 1}
Cut edges: {(4, 5)}

Recursing on subgraph A: {5, 1}

Exploring subgraph with vertices: {5, 1}
Starting Stoer-Wagner with vertices: {5, 1}
Initial adjacency lists:
5 -> {1}
1 -> {5}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5}

New minimum cut found!
Cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1}}

Final result:
Minimum cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}
Found cut of value 1 in current subgraph
Cut set: {5}
Cut edges: {(1, 5)}

Recursing on subgraph A: {5}

Exploring subgraph with vertices: {5}

Recursing on subgraph B: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (1 total):
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
---

Expected min cut: 2
Found min cut: 2
Number of min cuts found: 1

=== Test Suite Completed ===
-*-*-*-*-*-*-*-*-*-*at the beginning for cluster(3) and has {5, 16, 12, 8, 1, 0, 6, 11, 9, 14, 3, 7, 33, 4, 15, 2, 10, 13}
conductance: 0.04
1 <= Est. of Previos cutsize 
Cluster Mean degree: 2.88889
Based on Mader's theorem for sure we have a 2-edge-connected subgraph. (a lower bound)
Based on Iequlaity. MinCut <= 1
Based on Cheeger's Inequalit: 0.0008 <= λ2 <= 0.08
λ2 Midpoint Approximation: 0.0404
My metric: 0.990099
//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*
λ2 == 0    --> Cluster is disconnected!
λ2 near 0  --> Cluster is weakly connected, and for sure there is 2 subcluster in it.
0 << λ2 < 1 --> Cluster is reasonably well-connected structure, with some potential for partitioning.
λ2 >= 1    --> Cluster has strong connectivity and robustness
//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*


The best bridge in this cluster is between 3 and 8
Component sizes are 9 and 9
Nodes in component containing 8: {33, 12, 8, 13, 15, 11, 10, 9, 14}
Nodes in component containing 3: {5, 16, 7, 1, 0, 4, 6, 2, 3}

=== Running Comprehensive Tests ===

Test 1: Square with diagonal (Original test case)

Graph structure:
Graph:
Vertices: {1, 4, 2, 3}
Edges:
1 -- 4
1 -- 2
2 -- 4
2 -- 3
3 -- 4
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {4, 2}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1, 3: 0}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2, 3: 1}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2, 3: 2}
Added vertex 3 with weight 2
Updated weights: {4: 1, 2: 2, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}
Merge map:{1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 3, previous min: 2Cut set: {1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Global minimum cut value: 2

Exploring subgraph with vertices: {1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {4, 2}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1, 3: 0}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2, 3: 1}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2, 3: 2}
Added vertex 3 with weight 2
Updated weights: {4: 1, 2: 2, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}
Merge map:{1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 3, previous min: 2Cut set: {1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
Found cut of value 2 in current subgraph
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
Added to minimum cuts list

Recursing on subgraph A: {1, 4, 2}

Exploring subgraph with vertices: {1, 4, 2}
Starting Stoer-Wagner with vertices: {1, 4, 2}
Initial adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 4}

New minimum cut found!
Cut value: 2
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2}}

Final result:
Minimum cut value: 2
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}
Found cut of value 2 in current subgraph
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}
Added to minimum cuts list

Recursing on subgraph A: {1, 4}

Exploring subgraph with vertices: {1, 4}
Starting Stoer-Wagner with vertices: {1, 4}
Initial adjacency lists:
1 -> {4}
4 -> {1}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 4)}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 4)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 4)}

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (2 total):
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
---
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}
---

Expected min cut: 2
Found min cut: 2
Number of min cuts found: 2


Test 2: Triangle graph

Graph structure:
Graph:
Vertices: {1, 2, 3}
Edges:
1 -- 2
1 -- 3
2 -- 3
Starting Stoer-Wagner with vertices: {1, 2, 3}
Initial adjacency lists:
1 -> {2, 3}
2 -> {1, 3}
3 -> {1, 2}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 2}

New minimum cut found!
Cut value: 2
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2, 3}
2 -> {1, 3}
3 -> {1, 2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}

Global minimum cut value: 2

Exploring subgraph with vertices: {1, 2, 3}
Starting Stoer-Wagner with vertices: {1, 2, 3}
Initial adjacency lists:
1 -> {2, 3}
2 -> {1, 3}
3 -> {1, 2}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 2}

New minimum cut found!
Cut value: 2
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2, 3}
2 -> {1, 3}
3 -> {1, 2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}
Found cut of value 2 in current subgraph
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}
Added to minimum cuts list

Recursing on subgraph A: {1, 2}

Exploring subgraph with vertices: {1, 2}
Starting Stoer-Wagner with vertices: {1, 2}
Initial adjacency lists:
1 -> {2}
2 -> {1}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 2)}

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (1 total):
Cut set: {1, 2}
Cut edges: {(2, 3), (1, 3)}
---

Expected min cut: 2
Found min cut: 2
Number of min cuts found: 1


Test 3: Path graph (should have min cut 1)

Graph structure:
Graph:
Vertices: {1, 4, 2, 3}
Edges:
1 -- 2
2 -- 3
3 -- 4
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1, 3}
3 -> {4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 2, 3}

New minimum cut found!
Cut value: 1
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}

Merging vertex 4 into 3
Before merge adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {1, 2, 3}
Updated adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}
Merge map:{1: {1}, 2: {2}, 3: {4, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1, 2}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}

Global minimum cut value: 1

Exploring subgraph with vertices: {1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1, 3}
3 -> {4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 2, 3}

New minimum cut found!
Cut value: 1
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}

Merging vertex 4 into 3
Before merge adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {1, 2, 3}
Updated adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}
Merge map:{1: {1}, 2: {2}, 3: {4, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1, 2}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}
Found cut of value 1 in current subgraph
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}
Added to minimum cuts list

Recursing on subgraph A: {1, 2, 3}

Exploring subgraph with vertices: {1, 2, 3}
Starting Stoer-Wagner with vertices: {1, 2, 3}
Initial adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}

New phase starting with first vertex: 1
Initial weights: {2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 2}

New minimum cut found!
Cut value: 1
Cut set: {1, 2}
Cut edges: {(2, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {2}
2 -> {1, 3}
3 -> {2}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {1, 2}
Cut edges: {(2, 3)}
Found cut of value 1 in current subgraph
Cut set: {1, 2}
Cut edges: {(2, 3)}
Added to minimum cuts list

Recursing on subgraph A: {1, 2}

Exploring subgraph with vertices: {1, 2}
Starting Stoer-Wagner with vertices: {1, 2}
Initial adjacency lists:
1 -> {2}
2 -> {1}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 2)}
Added to minimum cuts list

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

All minimum cuts found (3 total):
Cut set: {1, 2, 3}
Cut edges: {(3, 4)}
---
Cut set: {1, 2}
Cut edges: {(2, 3)}
---
Cut set: {1}
Cut edges: {(1, 2)}
---

Expected min cut: 1
Found min cut: 1
Number of min cuts found: 3


Test 4: Complete graph K4 (should have min cut 3)

Graph structure:
Graph:
Vertices: {1, 4, 2, 3}
Edges:
1 -- 4
1 -- 2
1 -- 3
2 -- 4
2 -- 3
3 -- 4
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {4, 2, 3}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {1, 4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2, 3: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2, 3: 3}
Added vertex 3 with weight 3
Updated weights: {4: 1, 2: 2, 3: 3}

Phase complete. 
Cut weight: 3, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 3
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {4, 2, 3}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {1, 4, 2}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}
Merge map:{1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 4, previous min: 3Cut set: {1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 3, previous min: 3Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 3
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}

Global minimum cut value: 3

Exploring subgraph with vertices: {1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {4, 2, 3}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {1, 4, 2}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2, 3: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2, 3: 3}
Added vertex 3 with weight 3
Updated weights: {4: 1, 2: 2, 3: 3}

Phase complete. 
Cut weight: 3, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 3
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
1 -> {4, 2, 3}
4 -> {1, 2, 3}
2 -> {1, 4, 3}
3 -> {1, 4, 2}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}
Merge map:{1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 4, previous min: 3Cut set: {1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 3, previous min: 3Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 3
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}
Found cut of value 3 in current subgraph
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}
Added to minimum cuts list

Recursing on subgraph A: {1, 4, 2}

Exploring subgraph with vertices: {1, 4, 2}
Starting Stoer-Wagner with vertices: {1, 4, 2}
Initial adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

New phase starting with first vertex: 1
Initial weights: {4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {4: 1, 2: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {1, 4}

New minimum cut found!
Cut value: 2
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}

Merging vertex 2 into 4
Before merge adjacency lists:
1 -> {4, 2}
4 -> {1, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {1, 4}
Updated adjacency lists:
1 -> {4}
4 -> {1}
Merge map:{1: {1}, 4: {4, 2}}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {1}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2}}

Final result:
Minimum cut value: 2
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}
Found cut of value 2 in current subgraph
Cut set: {1, 4}
Cut edges: {(1, 2), (2, 4)}

Recursing on subgraph A: {1, 4}

Exploring subgraph with vertices: {1, 4}
Starting Stoer-Wagner with vertices: {1, 4}
Initial adjacency lists:
1 -> {4}
4 -> {1}

New phase starting with first vertex: 1
Initial weights: {4: 1}
Added vertex 4 with weight 1
Updated weights: {4: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 4)}

Merging vertex 4 into 1
Before merge adjacency lists:
1 -> {4}
4 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 4)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 4)}

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (1 total):
Cut set: {1, 4, 2}
Cut edges: {(2, 3), (3, 4), (1, 3)}
---

Expected min cut: 3
Found min cut: 3
Number of min cuts found: 1


Test 5: Butterfly graph

Graph structure:
Graph:
Vertices: {5, 1, 4, 2, 3}
Edges:
1 -- 5
1 -- 4
1 -- 2
1 -- 3
4 -- 5
2 -- 3
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2, 3}
4 -> {5, 1}
2 -> {1, 3}
3 -> {1, 2}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1, 3: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2, 3}
4 -> {5, 1}
2 -> {1, 3}
3 -> {1, 2}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 4, previous min: 2Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}

Global minimum cut value: 2

Exploring subgraph with vertices: {5, 1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2, 3}
4 -> {5, 1}
2 -> {1, 3}
3 -> {1, 2}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1, 3: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2, 3}
4 -> {5, 1}
2 -> {1, 3}
3 -> {1, 2}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 4, previous min: 2Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}
Found cut of value 2 in current subgraph
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1, 4, 2}

Exploring subgraph with vertices: {5, 1, 4, 2}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 2, 2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4, 2}
4 -> {5, 1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 3, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Recursing on subgraph A: {5, 1, 4}

Exploring subgraph with vertices: {5, 1, 4}
Starting Stoer-Wagner with vertices: {5, 1, 4}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1}

New minimum cut found!
Cut value: 2
Cut set: {5, 1}
Cut edges: {(4, 5), (1, 4)}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4}}

Final result:
Minimum cut value: 2
Cut set: {5, 1}
Cut edges: {(4, 5), (1, 4)}
Found cut of value 2 in current subgraph
Cut set: {5, 1}
Cut edges: {(4, 5), (1, 4)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1}

Exploring subgraph with vertices: {5, 1}
Starting Stoer-Wagner with vertices: {5, 1}
Initial adjacency lists:
5 -> {1}
1 -> {5}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5}

New minimum cut found!
Cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1}}

Final result:
Minimum cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}
Found cut of value 1 in current subgraph
Cut set: {5}
Cut edges: {(1, 5)}

Recursing on subgraph A: {5}

Exploring subgraph with vertices: {5}

Recursing on subgraph B: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (2 total):
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (1, 3)}
---
Cut set: {5, 1}
Cut edges: {(4, 5), (1, 4)}
---

Expected min cut: 2
Found min cut: 2
Number of min cuts found: 2


Test 6: Disconnected graph (should have min cut 0)

Graph structure:
Graph:
Vertices: {1, 4, 2, 3}
Edges:
1 -- 2
3 -- 4
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1}
3 -> {4}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1, 3: 0}
Added vertex 4 with weight 0
Updated weights: {4: 0, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {4: 0, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 1
Cut set: {1, 4, 2}
Cut edges: {(3, 4)}

Merging vertex 3 into 4
Before merge adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1}
3 -> {4}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {2}
4 -> {}
2 -> {1}
Merge map:{1: {1}, 4: {4, 3}, 2: {2}}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1}
Added vertex 4 with weight 0
Updated weights: {4: 0, 2: 1}

Phase complete. 
Cut weight: 0, previous min: 1Cut set: {1, 2}

New minimum cut found!
Cut value: 0
Cut set: {1, 2}
Cut edges: {}

Merging vertex 4 into 2
Before merge adjacency lists:
1 -> {2}
4 -> {}
2 -> {1}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 0Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 0
Cut set: {1, 2}
Cut edges: {}

Global minimum cut value: 0

Exploring subgraph with vertices: {1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {1, 4, 2, 3}
Initial adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1}
3 -> {4}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1, 3: 0}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1, 3: 0}
Added vertex 4 with weight 0
Updated weights: {4: 0, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {4: 0, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1, 4, 2}

New minimum cut found!
Cut value: 1
Cut set: {1, 4, 2}
Cut edges: {(3, 4)}

Merging vertex 3 into 4
Before merge adjacency lists:
1 -> {2}
4 -> {3}
2 -> {1}
3 -> {4}

After merge:
Vertices remaining: {1, 4, 2}
Updated adjacency lists:
1 -> {2}
4 -> {}
2 -> {1}
Merge map:{1: {1}, 4: {4, 3}, 2: {2}}

New phase starting with first vertex: 1
Initial weights: {4: 0, 2: 1}
Added vertex 2 with weight 1
Updated weights: {4: 0, 2: 1}
Added vertex 4 with weight 0
Updated weights: {4: 0, 2: 1}

Phase complete. 
Cut weight: 0, previous min: 1Cut set: {1, 2}

New minimum cut found!
Cut value: 0
Cut set: {1, 2}
Cut edges: {}

Merging vertex 4 into 2
Before merge adjacency lists:
1 -> {2}
4 -> {}
2 -> {1}

After merge:
Vertices remaining: {1, 2}
Updated adjacency lists:
1 -> {2}
2 -> {1}
Merge map:{1: {1}, 2: {4, 2, 3}}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 0Cut set: {1}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 4, 2, 3}}

Final result:
Minimum cut value: 0
Cut set: {1, 2}
Cut edges: {}
Found cut of value 0 in current subgraph
Cut set: {1, 2}
Cut edges: {}
Added to minimum cuts list

Recursing on subgraph A: {1, 2}

Exploring subgraph with vertices: {1, 2}
Starting Stoer-Wagner with vertices: {1, 2}
Initial adjacency lists:
1 -> {2}
2 -> {1}

New phase starting with first vertex: 1
Initial weights: {2: 1}
Added vertex 2 with weight 1
Updated weights: {2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {1}

New minimum cut found!
Cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}

Merging vertex 2 into 1
Before merge adjacency lists:
1 -> {2}
2 -> {1}

After merge:
Vertices remaining: {1}
Updated adjacency lists:
1 -> {}
Merge map:{1: {1, 2}}

Final result:
Minimum cut value: 1
Cut set: {1}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {1}
Cut edges: {(1, 2)}

Recursing on subgraph A: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {4, 3}

Exploring subgraph with vertices: {4, 3}
Starting Stoer-Wagner with vertices: {4, 3}
Initial adjacency lists:
4 -> {3}
3 -> {4}

New phase starting with first vertex: 4
Initial weights: {3: 1}
Added vertex 3 with weight 1
Updated weights: {3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {4}

New minimum cut found!
Cut value: 1
Cut set: {4}
Cut edges: {(3, 4)}

Merging vertex 3 into 4
Before merge adjacency lists:
4 -> {3}
3 -> {4}

After merge:
Vertices remaining: {4}
Updated adjacency lists:
4 -> {}
Merge map:{4: {4, 3}}

Final result:
Minimum cut value: 1
Cut set: {4}
Cut edges: {(3, 4)}
Found cut of value 1 in current subgraph
Cut set: {4}
Cut edges: {(3, 4)}

Recursing on subgraph A: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (1 total):
Cut set: {1, 2}
Cut edges: {}
---

Expected min cut: 0
Found min cut: 0
Number of min cuts found: 1


Test 7: Star graph

Graph structure:
Graph:
Vertices: {5, 1, 4, 2, 3}
Edges:
1 -- 5
1 -- 4
1 -- 2
1 -- 3
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1}
1 -> {5, 4, 2, 3}
4 -> {1}
2 -> {1}
3 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2, 3}
4 -> {1}
2 -> {1}
3 -> {1}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 3, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}

Global minimum cut value: 1

Exploring subgraph with vertices: {5, 1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1}
1 -> {5, 4, 2, 3}
4 -> {1}
2 -> {1}
3 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 3 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2, 3}
4 -> {1}
2 -> {1}
3 -> {1}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 3, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}
Found cut of value 1 in current subgraph
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1, 4, 2}

Exploring subgraph with vertices: {5, 1, 4, 2}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2}
Initial adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4, 2}
4 -> {1}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1, 4}

Exploring subgraph with vertices: {5, 1, 4}
Starting Stoer-Wagner with vertices: {5, 1, 4}
Initial adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1}

New minimum cut found!
Cut value: 1
Cut set: {5, 1}
Cut edges: {(1, 4)}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1}
1 -> {5, 4}
4 -> {1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4}}

Final result:
Minimum cut value: 1
Cut set: {5, 1}
Cut edges: {(1, 4)}
Found cut of value 1 in current subgraph
Cut set: {5, 1}
Cut edges: {(1, 4)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1}

Exploring subgraph with vertices: {5, 1}
Starting Stoer-Wagner with vertices: {5, 1}
Initial adjacency lists:
5 -> {1}
1 -> {5}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5}

New minimum cut found!
Cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1}}

Final result:
Minimum cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}
Found cut of value 1 in current subgraph
Cut set: {5}
Cut edges: {(1, 5)}
Added to minimum cuts list

Recursing on subgraph A: {5}

Exploring subgraph with vertices: {5}

Recursing on subgraph B: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (4 total):
Cut set: {5, 1, 4, 2}
Cut edges: {(1, 3)}
---
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
---
Cut set: {5, 1}
Cut edges: {(1, 4)}
---
Cut set: {5}
Cut edges: {(1, 5)}
---

Expected min cut: 1
Found min cut: 1
Number of min cuts found: 4


Test 8: Cycle graph

Graph structure:
Graph:
Vertices: {5, 1, 4, 2, 3}
Edges:
1 -- 5
1 -- 2
4 -- 5
2 -- 3
3 -- 4
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 3}
2 -> {1, 3}
3 -> {4, 2}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 0}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {1: 1, 4: 1, 2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 3}
2 -> {1, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 2}
2 -> {1, 4}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {1: 1, 4: 1, 2: 2}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Global minimum cut value: 2

Exploring subgraph with vertices: {5, 1, 4, 2, 3}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2, 3}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 3}
2 -> {1, 3}
3 -> {4, 2}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0, 3: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 0}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1, 3: 2}
Added vertex 3 with weight 2
Updated weights: {1: 1, 4: 1, 2: 1, 3: 2}

Phase complete. 
Cut weight: 2, previous min: 9223372036854775807Cut set: {5, 1, 4, 2}

New minimum cut found!
Cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}

Merging vertex 3 into 2
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 3}
2 -> {1, 3}
3 -> {4, 2}

After merge:
Vertices remaining: {5, 1, 4, 2}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 2}
2 -> {1, 4}
Merge map:{5: {5}, 1: {1}, 4: {4}, 2: {2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 2}
Added vertex 2 with weight 2
Updated weights: {1: 1, 4: 1, 2: 2}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1, 4}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5, 2}
2 -> {1, 4}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2, 3}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 2Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2, 3}}

Final result:
Minimum cut value: 2
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
Found cut of value 2 in current subgraph
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
Added to minimum cuts list

Recursing on subgraph A: {5, 1, 4, 2}

Exploring subgraph with vertices: {5, 1, 4, 2}
Starting Stoer-Wagner with vertices: {5, 1, 4, 2}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5}
2 -> {1}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1, 2: 0}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}
Added vertex 2 with weight 1
Updated weights: {1: 1, 4: 1, 2: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1, 4}

New minimum cut found!
Cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Merging vertex 2 into 4
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 2}
4 -> {5}
2 -> {1}

After merge:
Vertices remaining: {5, 1, 4}
Updated adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}
Merge map:{5: {5}, 1: {1}, 4: {4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 2}
Added vertex 4 with weight 2
Updated weights: {1: 1, 4: 2}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5, 1}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5, 4}
4 -> {5, 1}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4, 2}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4, 2}}

Final result:
Minimum cut value: 1
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}
Found cut of value 1 in current subgraph
Cut set: {5, 1, 4}
Cut edges: {(1, 2)}

Recursing on subgraph A: {5, 1, 4}

Exploring subgraph with vertices: {5, 1, 4}
Starting Stoer-Wagner with vertices: {5, 1, 4}
Initial adjacency lists:
5 -> {1, 4}
1 -> {5}
4 -> {5}

New phase starting with first vertex: 5
Initial weights: {1: 1, 4: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1, 4: 1}
Added vertex 4 with weight 1
Updated weights: {1: 1, 4: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5, 1}

New minimum cut found!
Cut value: 1
Cut set: {5, 1}
Cut edges: {(4, 5)}

Merging vertex 4 into 1
Before merge adjacency lists:
5 -> {1, 4}
1 -> {5}
4 -> {5}

After merge:
Vertices remaining: {5, 1}
Updated adjacency lists:
5 -> {1}
1 -> {5}
Merge map:{5: {5}, 1: {1, 4}}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 2, previous min: 1Cut set: {5}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1, 4}}

Final result:
Minimum cut value: 1
Cut set: {5, 1}
Cut edges: {(4, 5)}
Found cut of value 1 in current subgraph
Cut set: {5, 1}
Cut edges: {(4, 5)}

Recursing on subgraph A: {5, 1}

Exploring subgraph with vertices: {5, 1}
Starting Stoer-Wagner with vertices: {5, 1}
Initial adjacency lists:
5 -> {1}
1 -> {5}

New phase starting with first vertex: 5
Initial weights: {1: 1}
Added vertex 1 with weight 1
Updated weights: {1: 1}

Phase complete. 
Cut weight: 1, previous min: 9223372036854775807Cut set: {5}

New minimum cut found!
Cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}

Merging vertex 1 into 5
Before merge adjacency lists:
5 -> {1}
1 -> {5}

After merge:
Vertices remaining: {5}
Updated adjacency lists:
5 -> {}
Merge map:{5: {5, 1}}

Final result:
Minimum cut value: 1
Cut set: {5}
Cut edges: {(1, 5)}
Found cut of value 1 in current subgraph
Cut set: {5}
Cut edges: {(1, 5)}

Recursing on subgraph A: {5}

Exploring subgraph with vertices: {5}

Recursing on subgraph B: {1}

Exploring subgraph with vertices: {1}

Recursing on subgraph B: {4}

Exploring subgraph with vertices: {4}

Recursing on subgraph B: {2}

Exploring subgraph with vertices: {2}

Recursing on subgraph B: {3}

Exploring subgraph with vertices: {3}

All minimum cuts found (1 total):
Cut set: {5, 1, 4, 2}
Cut edges: {(2, 3), (3, 4)}
---

Expected min cut: 2
Found min cut: 2
Number of min cuts found: 1

=== Test Suite Completed ===
2024-11-13:09:54:20 [WellConnectedComponents] wcc Line 1697 INFO [Chapel] WCC found 0 clusters to be well-connected.
2024-11-13:09:54:20 [WellConnectedComponentsMsg] wellConnectedComponentsMsg Line 57 INFO [Chapel] Well connected components took 0.014391 sec
2024-11-13:09:54:20 [ServerDaemon] sendRepMsg Line 309 INFO [Chapel] repMsg: {"msg":"0", "msgType":"NORMAL", "msgFormat":"STRING", "user":"md724"}
2024-11-13:09:54:20 [ServerDaemon] run Line 722 INFO [Chapel] <<< wellConnectedComponents took 0.016231060028076172 sec
2024-11-13:09:54:20 [ServerDaemon] run Line 729 INFO [Chapel] bytes of memory 0 used after wellConnectedComponents command is 0% pct of max memory 973797002035
